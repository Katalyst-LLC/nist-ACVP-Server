using NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash;
using NIST.CVP.ACVTS.Libraries.Crypto.ParallelHash;
using NIST.CVP.ACVTS.Libraries.Math;
using NIST.CVP.ACVTS.Libraries.Math.Domain;
using NIST.CVP.ACVTS.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;
//using System;

namespace NIST.CVP.ACVTS.Libraries.Generation.ParallelHash.IntegrationTests
{
    [TestFixture, LongRunningIntegrationTest]
    public class MCTTests
    {
        [Test]
        [TestCase(128, "40058A9D25FEE7FC1A27C76F20241F26", "B72BD1852B9EA93445CBFF81F978A9F7F8B2F36FAD6CD21CB1EB6342B651F7ABB771B3F6BD44A549B97E24249A7454D81671EDC454BC79499E1C696B2CC4D5510D76597181FCB49CD58A89FA6D226595DEA528F4F5761177F9AA9AAA434ABFC15DBBCAD5D844407FA10DAC2E7598B51354606A7869BBBF78C439BC5BC840EEE353F78917DE70259D9592D38D96379FFB35599F4162CA98E73B228B2D0762AAD58B66003950D9E72566662A754D04DB8B6CB6AB901E7901B6E1071908479D7C72AA578FC848730AAC1A0CE3FCDC5A6D5DAF528FB5E214DDBAE00A87611B2370969BA24A9BB145B82DFBC1F969395D4934B2B72FBD9E21A5C6F18E5778A257AEFC790EEA3F1E0E177F85860D9AA97C399E138EA1B3537888A08967EF6B2EFD7AF6380FCBE4D71CDB308EE7444A0D7EED6D5394787E37D3E78FBF2DBB50064FFC5DAE7695201518D147940320567A7C696EF7F80F80CEDCB4F771C3ADE1976F78AFE43E88C492E6F90DA7700E9C23C6AC66F7C41D904DC9522F4BC138FDC1A6BE00DA6C884B9A56E0623F2B868D3ECD106503B98E9389081CF5A82F62261C065CABD1EFCA99F16471C180FAB026F8AC1119707291C4B884")]
        [TestCase(256, "93579F4B946D00BA41BF79010D5C3F92F88965451D435E31682EF6BD1B0757E9", "917E7CBAED9A8FBFD6FE2F3F04964B0D368EDF587AB80AC1632AD8A6F29FCF5F55AF077A143E4D80ED04689AE23439AE2B5CABC5D6BFCF1F37A783BA9B6F7A217D1728A9B59F3A37D9533234DC709C2C402EB2D1761B888924319A0F6756E0B21E0234A35167555065BE6936A7B244FCD8CA4457CE435885F43AEAC60698E93B573ADDB9A08865D87C72AFEA1D215160D82B39256DA22CE067E1815ACD0558AB9A20659D7A6060A43E8A4EABD3841D4D65658041DE333D6E191C54866A5D19247C4CC3CB05CDBB9F87A577CF5C3592FE812C5606ECE4A0D046A9ED56CD11991B8C1709764798989A06F300A0A8DEA6F5EE0A39321C919961E6742C843259D21454DFF0B2C7DEB9BD04E5E2BAD7B1A24C83745C5E62D58B10FBA8A6301863781B7AA91AE7B1C6A85BCD1335E71D8C6E06107515160106D9CD85DB3E81038D9E7A0E3175697324F3EBF7C5AF6AEA331B7B21C064A69D6222767912DF2B112923B1970D95FB85E1EF6BADE01F")]
        public void ShouldMonteCarloTestParallelHashForSampleSuppliedCase(int digestSize, string message, string digest)
        {
            var subject = new ParallelHash_MCT(new Crypto.ParallelHash.ParallelHash());
            var messageBitString = new BitString(message);
            var digestBitString = new BitString(digest);
            var hashFunction = new HashFunction(digestSize, digestSize * 2, false);

            var domain = new MathDomain();
            domain.AddSegment(new RangeDomainSegment(null, 256, 4096, 8));

            var blockSizeDomain = new MathDomain();
            blockSizeDomain.AddSegment(new RangeDomainSegment(null, 1, 128));
            var result = subject.MCTHash(hashFunction, messageBitString, domain, blockSizeDomain, false, true);

            Assert.That(result, Is.Not.Null, "null check");
            Assert.That(result.Success, Is.True, result.ErrorMessage);

            var resultDigest = result.Response[result.Response.Count - 1].Digest;
            //            Console.WriteLine($"Should be: {digestBitString.ToHex()}");
            //            Console.WriteLine($"Is       : {resultDigest.ToHex()}");
            //Assert.AreEqual(digestBitString.BitLength, resultDigest.BitLength);
            Assert.That(resultDigest.ToHex(), Is.EqualTo(digestBitString.ToHex()), resultDigest.ToHex());
        }
    }
}
