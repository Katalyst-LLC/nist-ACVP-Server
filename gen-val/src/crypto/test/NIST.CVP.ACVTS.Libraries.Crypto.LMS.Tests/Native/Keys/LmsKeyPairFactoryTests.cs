using System;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Native.Enums;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Native.Helpers;
using NIST.CVP.ACVTS.Libraries.Crypto.LMS.Native.Keys;
using NIST.CVP.ACVTS.Libraries.Crypto.SHA.NativeFastSha;
using NIST.CVP.ACVTS.Libraries.Math;
using NIST.CVP.ACVTS.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.ACVTS.Libraries.Crypto.LMS.Tests.Native.Keys
{
    [TestFixture, LongCryptoTest]
    public class LmsKeyPairFactoryTests
    {
        private LmsKeyPairFactory _subject;

        [OneTimeSetUp]
        public void Setup()
        {
            var shaFactory = new NativeShaFactory();
            _subject = new LmsKeyPairFactory(new LmOtsKeyPairFactory(shaFactory), shaFactory);
        }

        // Warning -- these tests were generated using the implementation itself, they are for consistency not correctness
        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "7B84EBFA638EE663EE2B0E135EEDBC38", "B3E67892BEBE8C7A44B075A0EED58EB4F576C072161FD3E6", "0000000A000000057B84EBFA638EE663EE2B0E135EEDBC38B15CD2270EFF912E43EDAE5BA895AE27054FC0605C241B37")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "F4AD092B0A7F7A9331B225AF0B074307", "8E4A4DE6BA8BE662A6E218D2B6DD6CEC6DD66F4121E208DE", "0000000A00000005F4AD092B0A7F7A9331B225AF0B0743078F058FEA160FA7C853C357DDB693F3CBC46CD0F055921BEB")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "F01C3B65162209ED1CEEF03A63437614", "C2C9AB7C765D263B2E2BD56C6CB2ACE31731C07C37B6AFD3", "0000000A00000005F01C3B65162209ED1CEEF03A63437614095FD5ED96FF5FEBD2DDB2CD08370DDAC52C0B8906F6A404")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "5E5ED5F2AF7173D9C2E0AE0747226D0A", "FFC914B2627E95BDF3DDCE7C0622F3E528588FBD19FD8AF1", "0000000A000000055E5ED5F2AF7173D9C2E0AE0747226D0A7AF0810E38FB2BD442EDC2E9DD02201663A95F88A3770C68")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "3D37EACAF46E5C95C5A69ECA9C0B709F", "472A0236590F27328C33BE243FAEB1E3D600B2AE436A1594", "0000000A000000053D37EACAF46E5C95C5A69ECA9C0B709F774B59BE1E3E482473AC903C1B08671BF6E6A6685668873F")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "DC695B254839C9EFE52E340902766CA0", "419576F5024C08A24F4A6F23FF0D60C13DC09AAC4EF3784D", "0000000A00000005DC695B254839C9EFE52E340902766CA0DB11E6B21DAA07760799EB8E191C4EE0B2437B7F391D4F10")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "4F3775261566814C583D5380ECCF0DC4", "90A7C8AC86167C25038579F5AEDF33AF6386FD82904F2588", "0000000A000000054F3775261566814C583D5380ECCF0DC48C0FCA768C6D8470DC7ADF27752CA31783AFCBD79D779BB3")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "08BE94C7874C85B098731BC6F6DFF338", "2E28F280E97FD3569032C8FC0EBFAE4AF1CB4B60EADA0C09", "0000000A0000000508BE94C7874C85B098731BC6F6DFF3385BA34B846AF7006CECFBC98E8E0C9FAD40DED1904553F6E7")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "DBB288DC7C3DD24C32A88E7A59D786A4", "2477D40598965A17E200A60DB3C05A02087845EADB4EF095", "0000000A00000005DBB288DC7C3DD24C32A88E7A59D786A401C5A4342083275053B422511A5362942547D1D964C7FC41")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "9FEF945056EF9CF8F3E657E2B9B12036", "E7002D5C082C60133621106D500FFEC1DD1D3AD34C5EB057", "0000000A000000059FEF945056EF9CF8F3E657E2B9B120365F76DBE342126976A27DE07328B29B212E818273E4C4970B")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "F9DAA8576C95B87615A918C186BFA5E0", "7A416EE1FF667AEAECE38BBBC31E4C670BF5E2A4EEDB02AB", "0000000A00000005F9DAA8576C95B87615A918C186BFA5E0D5EF6F3B19B6BA2D0B1B79EC1416BC30F0E66AABCCF217B9")]
        public void ShouldGenerateCorrectPublicKey(LmsMode lmsMode, LmOtsMode lmOtsMode, string iHex, string seedHex, string keyHex)
        {
            var i = new BitString(iHex).ToBytes();
            var seed = new BitString(seedHex).ToBytes();
            var key = new BitString(keyHex);

            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, i, seed);
            var result = new BitString(keyPair.PublicKey.Key);
            
            Console.WriteLine(result.ToHex());
            Assert.That(result.ToHex(), Is.EqualTo(key.ToHex()));
        }
        
        // Warning -- these tests were generated using the implementation itself, they are for consistency not correctness
        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "0000000A000000050000000000000000000000000000000006CCA7E073DC8AC11026D556B093959C4B6BB93ACF20DA14")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W2, "0000000A0000000600000000000000000000000000000000E18398500F622E709F9EFF1DC764620907883244C9C8AD8A")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W4, "0000000A0000000700000000000000000000000000000000459C06A56BBC5101B67214C1928B9F7A4AC000506F7EAF22")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W8, "0000000A0000000800000000000000000000000000000000F4541C138D18DB2BB752D93163B8DEEBB4E4C3311035EB8C")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W1, "000000050000000100000000000000000000000000000000D1286A221473DFBE752D7FA9CEE5C1CFE19AEA14C9D567574385EE03DB30EEA7")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W2, "0000000500000002000000000000000000000000000000002FAC605FD6F94961F05835EAC0C46CEE8D088D1A64A3BE7E4D1747AABB4F13DA")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W4, "0000000500000003000000000000000000000000000000007E14ED0D8B44B61918A5647B0567A49E969E0454CB0F14DF2A62B1CA787EDCB0")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W8, "000000050000000400000000000000000000000000000000829887511085DC8B9946D97B20163FE2AB4385E734979F535139CABE33CD694F")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W1, "000000140000000D00000000000000000000000000000000705F8B39A1AE6F71B194DB7F5680242DD62BB1C5341FED1D")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W2, "000000140000000E000000000000000000000000000000000EB8B5366C00C2B3067E3122666572D0958D5F799550AF27")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W4, "000000140000000F000000000000000000000000000000004CA99BA1273436F2089095B55A4D022038998482E53D8BEE")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W8, "00000014000000100000000000000000000000000000000061B0136E5F7A2671FF079343C37AFA0720FFA430B155E241")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W1, "0000000F00000009000000000000000000000000000000002820407750A4F79B40EA357F072CBC97BE2AF4FBA2A09E475C0BEDDFCB12985C")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W2, "0000000F0000000A0000000000000000000000000000000053D42C0F9FF812FACF9BEDC8BACA11D022AC3627DA9D12472883E39A8A142253")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W4, "0000000F0000000B000000000000000000000000000000007011BFCB1F88550EB769B57F94D40CE84E1A3264E5F8C24136094272A23DF6FB")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W8, "0000000F0000000C0000000000000000000000000000000032AEDB783B2CCB6A0FD8DF82BDEBA6C3636F7EF841607B90F5C9B9859B9E4CC0")]
        public void WhenGivenDefaultOptionsHeight05_ShouldGenerateKeyPairs(LmsMode lmsMode, LmOtsMode lmOtsMode, string keyHex)
        {
            var seed = new byte[AttributesHelper.GetLmsAttribute(lmsMode).M];
            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], seed);

            var publicKey = keyPair.PublicKey.Key;

            Assert.That(publicKey, Is.Not.Null);
            Assert.That(new BitString(publicKey).ToHex(), Is.EqualTo(keyHex));
        }

        // Warning -- these tests were generated using the implementation itself, they are for consistency not correctness
        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W1, "0000000B0000000500000000000000000000000000000000B33BC283128FED0FD88C0DB2628B46120602A2252D602C90")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W2, "0000000B000000060000000000000000000000000000000096F5372205FCC4C40E87A1A26A7706BA01E3AC0A7A6EF538")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W4, "0000000B00000007000000000000000000000000000000004AC3BAA9186043FA39F68DBB1DFDC09F0569282ADD771AD0")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W8, "0000000B00000008000000000000000000000000000000006ECAE46757563E94E817B3BD4260FB3D00FD98A18BFA726C")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W1, "000000060000000100000000000000000000000000000000CE737251F5E5D135706E829DC8CBCEBBE1F6256D190B66F70BBBD57C82A418BE")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W2, "000000060000000200000000000000000000000000000000DCE57C65D2E57F0EAD999C30DE999FA0D683058B64FF6900D9B26832CC0256A1")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W4, "000000060000000300000000000000000000000000000000656CC5144487A95C9A711867952DA8EFADBAD21178B8976EE836034963316134")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W8, "000000060000000400000000000000000000000000000000ACB9A5EE322C4643F3E820917A1B3AB7FBD308EFD4E3A71E0755ED36F2C3E96B")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W1, "000000150000000D00000000000000000000000000000000FE41D9C332EAF2CFE67F96938EEA4BBCEE833CC49D4E4733")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W2, "000000150000000E00000000000000000000000000000000B69A890C6597CA299E3F68F80C34F789B5266B8023D81F09")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W4, "000000150000000F000000000000000000000000000000000668011C72168DA7AB49D9372D2DD65B6C18F1C155F970D4")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W8, "000000150000001000000000000000000000000000000000A898959D88E664EBE2A8822B403D9E3025E26A7CC4599B23")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W1, "000000100000000900000000000000000000000000000000F3320BAC0B2CC3223194465B1B57B662FF679EAD8F250986EFAC8EFCD7C5A2BE")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W2, "000000100000000A00000000000000000000000000000000852D425050822580B89B09156A82D1D031E4D332D3F3F8B3E32A1875764606B0")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W4, "000000100000000B00000000000000000000000000000000606BCD9EE546D31C996BD2B4F76C7A5AC2E86A8C7E461CEE16EC593F20BE07EF")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W8, "000000100000000C00000000000000000000000000000000374BDAD15650AAF1BE9CA956D22508088C68DF59939BFDE9CC6DEF2B2DC858ED")]
        public void WhenGivenDefaultOptionsHeight10_ShouldGenerateKeyPairs(LmsMode lmsMode, LmOtsMode lmOtsMode, string keyHex)
        {
            var seed = new byte[AttributesHelper.GetLmsAttribute(lmsMode).M];
            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], seed);
            
            var publicKey = keyPair.PublicKey.Key;

            Assert.That(publicKey, Is.Not.Null);
            Assert.That(new BitString(publicKey).ToHex(), Is.EqualTo(keyHex));
        }

        // Warning -- these tests were generated using the implementation itself, they are for consistency not correctness
        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, 5, "0000000A000000050000000000000000000000000000000006CCA7E073DC8AC11026D556B093959C4B6BB93ACF20DA14")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W2, 5, "0000000A0000000600000000000000000000000000000000E18398500F622E709F9EFF1DC764620907883244C9C8AD8A")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W4, 5, "0000000A0000000700000000000000000000000000000000459C06A56BBC5101B67214C1928B9F7A4AC000506F7EAF22")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W8, 5, "0000000A0000000800000000000000000000000000000000F4541C138D18DB2BB752D93163B8DEEBB4E4C3311035EB8C")]
        
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W1, 4, "0000000B0000000500000000000000000000000000000000B33BC283128FED0FD88C0DB2628B46120602A2252D602C90")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W2, 4, "0000000B000000060000000000000000000000000000000096F5372205FCC4C40E87A1A26A7706BA01E3AC0A7A6EF538")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W4, 4, "0000000B00000007000000000000000000000000000000004AC3BAA9186043FA39F68DBB1DFDC09F0569282ADD771AD0")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W8, 4, "0000000B00000008000000000000000000000000000000006ECAE46757563E94E817B3BD4260FB3D00FD98A18BFA726C")]
        public void ShouldGenerateCorrectTreeAndStoreResults(LmsMode lmsMode, LmOtsMode lmOtsMode, int x, string keyHex)
        {
            var expectedLmsKeyPair = LmsTestKeyPairProvider.GetPrecomputedTree(lmsMode, lmOtsMode);
            var expectedTree = expectedLmsKeyPair.PrivateKey;

            var seed = new byte[AttributesHelper.GetLmsAttribute(lmsMode).M];
            var lmsKeyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], seed, x);
            var publicKey = lmsKeyPair.PublicKey.Key;
            var tree = lmsKeyPair.PrivateKey;

            // Console.WriteLine("public key: " + new BitString(publicKey).ToHex());
            Assert.That(publicKey, Is.Not.Null);
            Assert.That(new BitString(publicKey).ToHex(), Is.EqualTo(keyHex));

            for (var i = 1; i < (2 << x); i++)
            {
                var expected = new BitString(expectedTree.GetTreeNodeAtIndex(i)).ToHex();
                var computed = new BitString(tree.GetTreeNodeAtIndex(i)).ToHex();
                // Console.WriteLine(computed);
                Assert.That(computed, Is.EqualTo(expected));
            }
        }

        // TODO this is getting too spicy - clearly there needs to be some parallelization going on. Will get to that once it's all working.
        [Test]
        [LongCryptoTest]
        [Ignore("Too long, only run if needed")]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W1)]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W2)]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W4)]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W8)]
        
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W1)]
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W2)]
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W4)]
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W8)]
        
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W1)]
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W2)]
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W4)]
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W8)]
        
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W1)]
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W2)]
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W4)]
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W8)]
        public void WhenGivenDefaultOptionsHeight15_ShouldGenerateKeyPairs(LmsMode lmsMode, LmOtsMode lmOtsMode)
        {
            var seed = new byte[AttributesHelper.GetLmsAttribute(lmsMode).M];
            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], seed);
            
        	var publicKey = keyPair.PublicKey.Key;

            Assert.That(publicKey, Is.Not.Null);
        }
    }
}
