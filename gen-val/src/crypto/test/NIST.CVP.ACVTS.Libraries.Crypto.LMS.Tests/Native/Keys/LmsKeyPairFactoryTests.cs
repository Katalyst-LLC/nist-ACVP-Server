using System;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Native.Enums;
using NIST.CVP.ACVTS.Libraries.Crypto.LMS.Native.Keys;
using NIST.CVP.ACVTS.Libraries.Crypto.SHA.NativeFastSha;
using NIST.CVP.ACVTS.Libraries.Math;
using NIST.CVP.ACVTS.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.ACVTS.Libraries.Crypto.LMS.Tests.Native.Keys
{
    [TestFixture, LongCryptoTest]
    public class LmsKeyPairFactoryTests
    {
        private LmsKeyPairFactory _subject;

        [OneTimeSetUp]
        public void Setup()
        {
            var shaFactory = new NativeShaFactory();
            _subject = new LmsKeyPairFactory(new LmOtsKeyPairFactory(shaFactory), shaFactory);
        }

        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "7B84EBFA638EE663EE2B0E135EEDBC38", "B3E67892BEBE8C7A44B075A0EED58EB4F576C072161FD3E6682DFFAD5C4D8FE8", "0000000A000000057B84EBFA638EE663EE2B0E135EEDBC38A0013EB60210D390A93C6A08EED1A88EE7724341569C5531")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "F4AD092B0A7F7A9331B225AF0B074307", "8E4A4DE6BA8BE662A6E218D2B6DD6CEC6DD66F4121E208DE72280700C0C887B6", "0000000A00000005F4AD092B0A7F7A9331B225AF0B07430701080F06C17BEB084E5363E2725BBA66902BE604A407882E")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "F01C3B65162209ED1CEEF03A63437614", "C2C9AB7C765D263B2E2BD56C6CB2ACE31731C07C37B6AFD3D5051B3F38B81DA5", "0000000A00000005F01C3B65162209ED1CEEF03A63437614A5AFEAF8CE041DD464FC3FBD0903C7D2BAA314FD25E11572")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "5E5ED5F2AF7173D9C2E0AE0747226D0A", "FFC914B2627E95BDF3DDCE7C0622F3E528588FBD19FD8AF1D09C52E11BA33454", "0000000A000000055E5ED5F2AF7173D9C2E0AE0747226D0A60204C9D4830C3D68620E66329711CB453E77A698D8AB9F9")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "3D37EACAF46E5C95C5A69ECA9C0B709F", "472A0236590F27328C33BE243FAEB1E3D600B2AE436A159419D6DA9BF6AB58F7", "0000000A000000053D37EACAF46E5C95C5A69ECA9C0B709FE83C4B2DA53E5BA5AFE99F4F803C787A6BD4B41E82B8DF40")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "DC695B254839C9EFE52E340902766CA0", "419576F5024C08A24F4A6F23FF0D60C13DC09AAC4EF3784DF6B5FB4C0C64DF89", "0000000A00000005DC695B254839C9EFE52E340902766CA01A60A6392093550B06FC8BB12893629EE7D86EE78C046D71")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "4F3775261566814C583D5380ECCF0DC4", "90A7C8AC86167C25038579F5AEDF33AF6386FD82904F25887C6D4F51B2037C6A", "0000000A000000054F3775261566814C583D5380ECCF0DC4AE8E0F5149A95358245B4216590E0E1400EDA1AEC25BD383")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "08BE94C7874C85B098731BC6F6DFF338", "2E28F280E97FD3569032C8FC0EBFAE4AF1CB4B60EADA0C09B2A9FB0A0C40069E", "0000000A0000000508BE94C7874C85B098731BC6F6DFF338AD00EFA3C44A009BCAA5C0654F5701A26D23FF3526C0B440")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "DBB288DC7C3DD24C32A88E7A59D786A4", "2477D40598965A17E200A60DB3C05A02087845EADB4EF0956D8CFFE2D997E795", "0000000A00000005DBB288DC7C3DD24C32A88E7A59D786A445F8C74060B9E88B78FC494B5C7E1DCE7927C3FDF4F16DA2")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "9FEF945056EF9CF8F3E657E2B9B12036", "E7002D5C082C60133621106D500FFEC1DD1D3AD34C5EB057857416187131F9B1", "0000000A000000059FEF945056EF9CF8F3E657E2B9B1203664E5F7BA205ADD8E8C38A5B66B96B236EE60B717878A8C83")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "F9DAA8576C95B87615A918C186BFA5E0", "7A416EE1FF667AEAECE38BBBC31E4C670BF5E2A4EEDB02ABA29913C9DD653081", "0000000A00000005F9DAA8576C95B87615A918C186BFA5E0CAAAF55E45B441DF19F6C0C69F16757D1040F330D71344A5")]
        public void ShouldGenerateCorrectPublicKey(LmsMode lmsMode, LmOtsMode lmOtsMode, string iHex, string seedHex, string keyHex)
        {
            var i = new BitString(iHex).ToBytes();
            var seed = new BitString(seedHex).ToBytes();
            var key = new BitString(keyHex);

            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, i, seed);
            var result = new BitString(keyPair.PublicKey.Key);
            
            Assert.AreEqual(key.ToHex(), result.ToHex());
        }
        
        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, "0000000A00000005000000000000000000000000000000004C31BFD058793026A7348DE2ABA372727F394FF50C3BE0F6")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W2, "0000000A00000006000000000000000000000000000000001A896ED37BACEE65992D548831666DE1F86CF791812A579A")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W4, "0000000A000000070000000000000000000000000000000000DDC15D4B4B49C04D7308ABC25E0276861B2D27652B31EA")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W8, "0000000A00000008000000000000000000000000000000003163B5B0AF623BFECA10C58F3D61EA9E938F09872BA0ACCB")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W1, "000000050000000100000000000000000000000000000000D1286A221473DFBE752D7FA9CEE5C1CFE19AEA14C9D567574385EE03DB30EEA7")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W2, "0000000500000002000000000000000000000000000000002FAC605FD6F94961F05835EAC0C46CEE8D088D1A64A3BE7E4D1747AABB4F13DA")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W4, "0000000500000003000000000000000000000000000000007E14ED0D8B44B61918A5647B0567A49E969E0454CB0F14DF2A62B1CA787EDCB0")]
        [TestCase(LmsMode.LMS_SHA256_M32_H5, LmOtsMode.LMOTS_SHA256_N32_W8, "000000050000000400000000000000000000000000000000829887511085DC8B9946D97B20163FE2AB4385E734979F535139CABE33CD694F")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W1, "000000140000000D000000000000000000000000000000004909711D40F98FB4B1514C2B53936E87F44C317B1AF90315")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W2, "000000140000000E000000000000000000000000000000009BD44750F439FDE3CB833077797D4D458D1CBE143DFD7F28")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W4, "000000140000000F0000000000000000000000000000000011B09DBD0B5C5CF08C01AA1CBC7F50A82863FE45AB4CAA8A")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H5, LmOtsMode.LMOTS_SHAKE_N24_W8, "000000140000001000000000000000000000000000000000C6B01794B07EA601384797EC5BE194112345AD14C765BDB8")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W1, "0000000F00000009000000000000000000000000000000002820407750A4F79B40EA357F072CBC97BE2AF4FBA2A09E475C0BEDDFCB12985C")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W2, "0000000F0000000A0000000000000000000000000000000053D42C0F9FF812FACF9BEDC8BACA11D022AC3627DA9D12472883E39A8A142253")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W4, "0000000F0000000B000000000000000000000000000000007011BFCB1F88550EB769B57F94D40CE84E1A3264E5F8C24136094272A23DF6FB")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H5, LmOtsMode.LMOTS_SHAKE_N32_W8, "0000000F0000000C0000000000000000000000000000000032AEDB783B2CCB6A0FD8DF82BDEBA6C3636F7EF841607B90F5C9B9859B9E4CC0")]
        public void WhenGivenDefaultOptionsHeight05_ShouldGenerateKeyPairs(LmsMode lmsMode, LmOtsMode lmOtsMode, string keyHex)
        {
            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], new byte[32]);

            var publicKey = keyPair.PublicKey.Key;

            Assert.IsNotNull(publicKey);
            Assert.AreEqual(keyHex, new BitString(publicKey).ToHex());
        }

        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W1, "0000000B0000000500000000000000000000000000000000B384EA33C18903222AB74C10D263C45C3CBD05CE262BFEE8")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W2, "0000000B0000000600000000000000000000000000000000A90D2749AE4A59F16623BDBA83411C7192A828A80FE92D43")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W4, "0000000B0000000700000000000000000000000000000000D3DF88EAAFCCA5D87079B337A434DEDAC21E493081A2A42B")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W8, "0000000B0000000800000000000000000000000000000000EAAA648405A1193A6C8AD4A98306D306153E110C5CD5BD3D")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W1, "000000060000000100000000000000000000000000000000CE737251F5E5D135706E829DC8CBCEBBE1F6256D190B66F70BBBD57C82A418BE")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W2, "000000060000000200000000000000000000000000000000DCE57C65D2E57F0EAD999C30DE999FA0D683058B64FF6900D9B26832CC0256A1")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W4, "000000060000000300000000000000000000000000000000656CC5144487A95C9A711867952DA8EFADBAD21178B8976EE836034963316134")]
        [TestCase(LmsMode.LMS_SHA256_M32_H10, LmOtsMode.LMOTS_SHA256_N32_W8, "000000060000000400000000000000000000000000000000ACB9A5EE322C4643F3E820917A1B3AB7FBD308EFD4E3A71E0755ED36F2C3E96B")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W1, "000000150000000D00000000000000000000000000000000A3CBA18A7E183855A3E23D6D98EB3D9C3B6F33E05302A458")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W2, "000000150000000E000000000000000000000000000000001A7B09A36A08564461CDB9663FBE2E3159EA430BAAF5D937")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W4, "000000150000000F00000000000000000000000000000000175B473690318833514F7C1B7CCA811CA8E9CF6300EEA5DF")]
        [TestCase(LmsMode.LMS_SHAKE_M24_H10, LmOtsMode.LMOTS_SHAKE_N24_W8, "000000150000001000000000000000000000000000000000B6886425ED1E41D8C897B8B3FBB656079F5A99067706BD18")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W1, "000000100000000900000000000000000000000000000000F3320BAC0B2CC3223194465B1B57B662FF679EAD8F250986EFAC8EFCD7C5A2BE")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W2, "000000100000000A00000000000000000000000000000000852D425050822580B89B09156A82D1D031E4D332D3F3F8B3E32A1875764606B0")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W4, "000000100000000B00000000000000000000000000000000606BCD9EE546D31C996BD2B4F76C7A5AC2E86A8C7E461CEE16EC593F20BE07EF")]
        [TestCase(LmsMode.LMS_SHAKE_M32_H10, LmOtsMode.LMOTS_SHAKE_N32_W8, "000000100000000C00000000000000000000000000000000374BDAD15650AAF1BE9CA956D22508088C68DF59939BFDE9CC6DEF2B2DC858ED")]
        public void WhenGivenDefaultOptionsHeight10_ShouldGenerateKeyPairs(LmsMode lmsMode, LmOtsMode lmOtsMode, string keyHex)
        {
            var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], new byte[32]);

            var publicKey = keyPair.PublicKey.Key;

            Assert.IsNotNull(publicKey);
            Assert.AreEqual(keyHex, new BitString(publicKey).ToHex());
        }

        [Test]
        [FastCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W1, 5, "0000000A00000005000000000000000000000000000000004C31BFD058793026A7348DE2ABA372727F394FF50C3BE0F6")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W2, 5, "0000000A00000006000000000000000000000000000000001A896ED37BACEE65992D548831666DE1F86CF791812A579A")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W4, 5, "0000000A000000070000000000000000000000000000000000DDC15D4B4B49C04D7308ABC25E0276861B2D27652B31EA")]
        [TestCase(LmsMode.LMS_SHA256_M24_H5, LmOtsMode.LMOTS_SHA256_N24_W8, 5, "0000000A00000008000000000000000000000000000000003163B5B0AF623BFECA10C58F3D61EA9E938F09872BA0ACCB")]
        
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W1, 4, "0000000B0000000500000000000000000000000000000000B384EA33C18903222AB74C10D263C45C3CBD05CE262BFEE8")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W2, 4, "0000000B0000000600000000000000000000000000000000A90D2749AE4A59F16623BDBA83411C7192A828A80FE92D43")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W4, 4, "0000000B0000000700000000000000000000000000000000D3DF88EAAFCCA5D87079B337A434DEDAC21E493081A2A42B")]
        [TestCase(LmsMode.LMS_SHA256_M24_H10, LmOtsMode.LMOTS_SHA256_N24_W8, 4, "0000000B0000000800000000000000000000000000000000EAAA648405A1193A6C8AD4A98306D306153E110C5CD5BD3D")]
        public void ShouldGenerateCorrectTreeAndStoreResults(LmsMode lmsMode, LmOtsMode lmOtsMode, int x, string keyHex)
        {
            var expectedLmsKeyPair = LmsTestKeyPairProvider.GetPrecomputedTree(lmsMode, lmOtsMode);
            var expectedTree = expectedLmsKeyPair.PrivateKey;

            var lmsKeyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], new byte[32], x);
            var publicKey = lmsKeyPair.PublicKey.Key;
            var tree = lmsKeyPair.PrivateKey;
            
            Assert.IsNotNull(publicKey);
            Assert.AreEqual(keyHex, new BitString(publicKey).ToHex());

            for (var i = 1; i < (2 << x); i++)
            {
                var expected = new BitString(expectedTree.GetTreeNodeAtIndex(i)).ToHex();
                var computed = new BitString(tree.GetTreeNodeAtIndex(i)).ToHex();
                Assert.AreEqual(expected, computed);
            }
        }

        // TODO this is getting too spicy - clearly there needs to be some parallelization going on. Will get to that once it's all working.
        [Test]
        [LongCryptoTest]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W1)]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W2)]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W4)]
        [TestCase(LmsMode.LMS_SHA256_M24_H15, LmOtsMode.LMOTS_SHA256_N24_W8)]
        
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W1)]
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W2)]
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W4)]
        [TestCase(LmsMode.LMS_SHA256_M32_H15, LmOtsMode.LMOTS_SHA256_N32_W8)]
        
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W1)]
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W2)]
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W4)]
        [TestCase(LmsMode.LMS_SHAKE_M24_H15, LmOtsMode.LMOTS_SHAKE_N24_W8)]
        
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W1)]
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W2)]
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W4)]
        [TestCase(LmsMode.LMS_SHAKE_M32_H15, LmOtsMode.LMOTS_SHAKE_N32_W8)]
        public void WhenGivenDefaultOptionsHeight15_ShouldGenerateKeyPairs(LmsMode lmsMode, LmOtsMode lmOtsMode)
        {
        	var keyPair = _subject.GetKeyPair(lmsMode, lmOtsMode, new byte[16], new byte[32]);
        
        	var publicKey = keyPair.PublicKey.Key;
        	
        	Assert.IsNotNull(publicKey);
        }
    }
}
