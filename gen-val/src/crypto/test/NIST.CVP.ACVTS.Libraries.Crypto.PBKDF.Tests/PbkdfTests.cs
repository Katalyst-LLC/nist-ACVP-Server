using System.Diagnostics;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper;
using NIST.CVP.ACVTS.Libraries.Crypto.HMAC;
using NIST.CVP.ACVTS.Libraries.Crypto.SHA.NativeFastSha;
using NIST.CVP.ACVTS.Libraries.Math;
using NIST.CVP.ACVTS.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.ACVTS.Libraries.Crypto.PBKDF.Tests
{
    [TestFixture, LongCryptoTest]
    public class PbkdfTests
    {
        private PbKdfFactory _factory;

        [OneTimeSetUp]
        public void OneTimeSetUp()
        {
            _factory = new PbKdfFactory(new HmacFactory(new NativeShaFactory()));
        }

        [Test]
        // 1000 iterations (2-3 sec per)
        [TestCase(ModeValues.SHA2, DigestSizes.d224, 1_000, "C2AB64C24FD6A8A80EF464E9229B256C0FEE14358E5D01735EF102066C508D3EF3434FAC3499A522B6E6692DEAFD85EE3721FFC5EF91FFD5FE5ACFA2A47FA2872A9DB6A616A122B1ED90C7E0AD72C331D3F5301B108FD2DFCC579A4D458F1E9754B0944E506414537B97D7DCB71A9EC243162A6B7A7C679A1CB370968B97F7E3")]
        [TestCase(ModeValues.SHA2, DigestSizes.d512t224, 1_000, "254A1305CBE2209F072EBABD2FBBDC909976A11E47B319663DEE0AD07A6C9461853FA5FA4CA6FF2F77003070330AFB7E2A973065A8EAEE3C32271AD97EE16265926B06F10307BE32974AF7662E250B485ABE76C625FF490B8D819BCA2969286EDC375E5BE62888E4B1EB36A500BE7CAA047CBE75CB8EC7D2AA8AFBA332213C73")]
        [TestCase(ModeValues.SHA2, DigestSizes.d512t256, 1_000, "D868EC4CC80CA2B8905DDCE4C3F5378FB5C34AB56D31B2DAB5D736CB93C9EE273F685C6377D88F70676DF10D368024B7A81F008B3453AE432EA48CC5ED75A2D1F77093400F531556D72F0D7FF96C41B9A43B28711A59DD6A1902DEA7A16144FD70C1435D26CD440B23CD26EB149881A979ADAFD4B146B56EA8A9BFF7C3C51EA5")]

        [TestCase(ModeValues.SHA3, DigestSizes.d224, 1_000, "19640F2260063D153CC694E8A095E8DA72C2ABD59BBA63E9DBE2B70EDEFD9B3FEC7CE5570CFCEBC413C1D65E7B66DBA47A32BF5201512C75E442A7AD10F00F5AEC6B01103828C40C7F0DC24DF9D22EEBC025FB6B5993887A6AC0499D227CEC3C22FCD9A6DFBE0A57088D0C901A43A512B768AB736C49F3CAA25EC2573F8A9E1F")]
        [TestCase(ModeValues.SHA3, DigestSizes.d256, 1_000, "92B2AA233466553065A5BB2F0E806755137ABB7C698B3C8DAB997A7C9DA83E36E4B0B5C3331FEAD7F403E02358B7D070CC17E670B40D03FA921A2B8D5D1046A2B37187B5A0E89373D2E4F184B4619A550439A3A370F200816FF127354CB94BD583247E8D153166D804D132D7ACB16D66D135564474536FE79AFAF3E3D330B9AA")]
        [TestCase(ModeValues.SHA3, DigestSizes.d384, 1_000, "A8A7C0AF63C367AC58250ABF745AA2CFF41B8251EA2442FDFCDB25CA623F96BBDEE896F68FEB73EEC3366077DA2359038E42BD70D631B585243684ED7863BB9FF2BBACD7F704236602250CF6C170BB175A1FAD53EC30BC2BAF8842C49D80F8A0EBCA737CEDFA132E1B5FF2FB399AFDC34C45B6084DA87A310BB5E7B217B9F35B")]
        [TestCase(ModeValues.SHA3, DigestSizes.d512, 1_000, "410FE8672880D38853858066F7952FF29AEFD40EFDB37AA1CCA731556B23750298D782596D9E8B65DC4B9C49B3C550A6E8DDEE07C0A17295548700D1C0E265BCB206067C53CB15C4B4699D6D94FB526D920B2E06240898ADB01DA0700BB017B79B41FF73A9D116F95FBADC473A2421A6E37CF2B5B30510E4DBCB012045063B2E")]

        // 100,000 iterations (200 sec per)
        [TestCase(ModeValues.SHA2, DigestSizes.d224, 100_000, "DE45EC95C0EE7C0CD03AD179463B47894AC2AC15AD701A0E6BC3AE9E24A5D73FA42A324706CB707246916EAE4397B5AC0C495B32AE1A413964B1BC9D32A6A32E2E5D2982D71C179F17CCE38A41D188DADD9F5E6C0798EF42F77F9E560E32DC2324FFDA18D0583549B77E1A6D2DB1C124DACFDFCBF6DD6DE4E27CF32719273DDC")]

        // 1,000,000 iterations (currently use the native HMAC implementation) (15 sec per)
        [TestCase(ModeValues.SHA1, DigestSizes.d160, 1_000_000, "BBE8633C10B84E82268B0502CBC9DE931DBEB51BDD18FEEC8CEB84169E1847724239B92F9867CB7136387C56F2F296ABDE0A44E76AB3D17FF0DFF3BC33E68D7A6B8C570DC23821B9BE7FF0956634AF0C31C647EDD0546891AAC577058B491C535089D1792155561A5CA2CA4BE095BFA347D417C77E2747635C85AA17095A8ED5")]
        [TestCase(ModeValues.SHA2, DigestSizes.d256, 1_000_000, "29EF0368326A83107DEBD1BFE18483E10D8BB02939008ABDBAE464456E00E37CBA2249CC49120710849A80166DD332319090C10BFDED5CD5718E845648EC959B371525C50B6A6E2825420BDAC97ABBDB4CB62298E62D0BB928C3D8FDC53702F2B1363179DCF0E394A0CD8BB52EA42B4D5BEB7EE875CE8FE16C736BE38BC1E193")]
        [TestCase(ModeValues.SHA2, DigestSizes.d384, 1_000_000, "8D63AA4700F962D61073601816A0B0B1C8D22D3DA3730CF07234CA11119183AB02EFA03583AAD6D92E7D03CDB8294CB71E574F4F78711D45B4C1D723F31AD73915E12B5E5F3CA85F3C4D5FBE50DDB6D429A11CB0CB977843782AF5C6A6CED3A2AD86CF6629990658EED4803491C3E80325E867A22AA8CD7F1BF498D6B736A7A1")]
        [TestCase(ModeValues.SHA2, DigestSizes.d512, 1_000_000, "844C8192D53924B55DA9407704BBAE07EE6BB37F80EE1AF29D7B3B9310730173A06D233D85FBF9E514999CA2B1B8C15183684B573AF985F4BAD2E1248A2D70085B6508B97A060A8680D330F621C581C60974F243028FE91BE202578A28294DB0F160B9390A94829F1062713C2834FF7F51C8163CEC303E739055304313DD2FC8")]

        // 1,000,000 iterations (currently using C-based HMAC) (40 sec per)
        [TestCase(ModeValues.SHA3, DigestSizes.d224, 1_000_000, "C11330871EDAC6FA98F68AA263FF8823084F7E5FA56C3D18200D0DE9B7CA605982BF91FEE4730C12D74DB72FF70EEB463977FE80CD1BF42D298A88709ACF6148BF052CD834C371658589DB4D72A91487086C55C7D134F376FA7212B29643ED426F6826ABAAB6CC09FBD1E0999F995EE99C9F728B83E8A5D08C4102315655A594")]
        [TestCase(ModeValues.SHA3, DigestSizes.d256, 1_000_000, "60377FF2F405E8EF975A2AA972EF023F49940F1C88D5BFB7BCDEADCD16A307D815C26E9BBBF97797F113195616056E9BCE10DB7EDDD31B688B8F5A40B3119F5F76016479280D329A4E25FC65C0001F3A4E57E2D0DDB20F8C9D03CE3B936F4AF1481CB9501A5A7BB571994D1F95B5AD6E39ADAAB8FBB4B847EEF56E418A722782")]
        [TestCase(ModeValues.SHA3, DigestSizes.d384, 1_000_000, "BCE68FBA7F0A1A18E71000BDD4D40812796C551E79B2B123822094B9DE14296BEC800818D071D2886FF8A0CA717095FBE35D736F6D102B6611E976BB5FBA983F8D7CACA368FD24E0C011E7154E45EBE9F742F039919478D38790B3684A47B3C3B1BBA1227065BBC8DBC6DEA1EE2686C1595EB38F47D0916A6CE92EBEBF56A5C0")]
        [TestCase(ModeValues.SHA3, DigestSizes.d512, 1_000_000, "26C6406E0E4D195C218BF19059DD2216067A9233EE78D1ADC82792D1A075571132CBDDB11A8D7C07143715F04B530E01E7E3EB724E857AFDB5AFB4EFE4099635A449C5B9280332B0411E6DBA2FD52311750B660BE6EA5D950EACB88CA9A536A12ABEE4CD7AB7A4A7EE959B2F0D94B9E769818B606BB5790FA8332B72BDF8B177")]
        public void LargeTest(ModeValues mode, DigestSizes digest, int c, string expectedKey)
        {
            var pbkdf = _factory.GetKdf(new HashFunction(mode, digest));
            var result = pbkdf.DeriveKey(new BitString("ABDC"), "abcd", c, 1024);

            //Console.Write(result.DerivedKey.ToHex());
            Assert.AreEqual(expectedKey, result.DerivedKey.ToHex());
        }

        [Test]
        [TestCase(ModeValues.SHA2, DigestSizes.d224, 1, "CD57E79B3B9CC46233563299C8483172989A816FB8A7FE5A30690DCD")]
        public void ShouldDoStuff(ModeValues mode, DigestSizes digest, int c, string expectedKey)
        {
            var hashFunction = new HashFunction(mode, digest);
            var pbkdf = _factory.GetKdf(hashFunction);
            var result = pbkdf.DeriveKey(new BitString("ABDC"), "abcd", c, 224);

            Assert.AreEqual(expectedKey, result.DerivedKey.ToHex());
        }

        [Test]
        public void ShouldNotDieOnNotModEightKeyLen()
        {
            var pbkdf = _factory.GetKdf(new HashFunction(ModeValues.SHA2, DigestSizes.d256));
            var result = pbkdf.DeriveKey(
                new BitString("0102030405060708090A0B0C0D0E1112131415").GetMostSignificantBits(128),
                "doot doot dooooooo",
                1_000_000,
                4095);

            Assert.IsTrue(result.Success);
        }

        [Test]
        public void ShouldNotDieOnNotModEightSaltLen()
        {
            var pbkdf = _factory.GetKdf(new HashFunction(ModeValues.SHA2, DigestSizes.d256));
            var result = pbkdf.DeriveKey(
                new BitString("0102030405060708090A0B0C0D0E1112131415").GetMostSignificantBits(130),
                "doot doot dooooooo",
                1_000_000,
                4096);

            Assert.IsTrue(result.Success);
        }

        [Test]
        public void ShouldNotDieOnLargeTest()
        {
            var pbkdf = _factory.GetKdf(new HashFunction(ModeValues.SHA2, DigestSizes.d256));
            var result = pbkdf.DeriveKey(
                new BitString(4096),
                "doot doot dooooooo",
                1_000_000,
                4096);

            Assert.IsTrue(result.Success);
        }
    }
}
