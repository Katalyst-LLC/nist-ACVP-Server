// <auto-generated />
#if !EXCLUDE_GENERATED_CODE
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 618
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998
using global::Orleans;

[assembly: global::Orleans.Metadata.FeaturePopulatorAttribute(typeof(OrleansGeneratedCode.OrleansCodeGenNIST_CVP_ACVTS_Libraries_Orleans_Grains_InterfacesFeaturePopulator))]
[assembly: global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Autofac, Version=6.1.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001008728425885ef385e049261b18878327dfaaf0d666dea3bd2b0e4f18b33929ad4e5fbc9087e7eda3c1291d2de579206d9b4292456abffbe8be6c7060b36da0c33b883e3878eaf7c89fddf29e6e27d24588e81e86f3a22dd7b1a296b5f06fbfb500bbd7410faa7213ef4e2ce7622aefc03169b0324bcd30ccfe9ac8204e4960be6"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.CSharp, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Configuration.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Configuration.Binder, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Configuration, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Configuration.FileExtensions, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Configuration.Json, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.DependencyInjection.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.DependencyInjection, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.FileProviders.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.FileProviders.Physical, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.FileSystemGlobbing, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Http, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Logging.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Logging, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Options.ConfigurationExtensions, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Options, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Extensions.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.VisualBasic.Core, Version=10.0.6.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Win32.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("netstandard, Version=2.1.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f561df277c6c0b497d629032b410cdcf286e537c054724f7ffa0164345f62b3e642029d7a80cc351918955328c4adc8a048823ef90b0cf38ea7db0d729caf2b633c3babe08b0310198c1081995c19029bc675193744eab9d7345b8a67258ec17d112cebdbbb2a281487dceeafb9d83aa930f32103fbe1d2911425bc5744002c7"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("NIST.CVP.ACVTS.Libraries.Common, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("NIST.CVP.ACVTS.Libraries.Crypto.Common, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("NIST.CVP.ACVTS.Libraries.Math, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("NLog, Version=4.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100772391e63c104728adcf18e2390474262559fa7f34a4215848f43288cde875dcc92a06222e9be0592b211ff74adbb5d21a7aab5522b540b1735f2f03279221056fedbe7e534073dabee9db48f8ecebcf1dc98a95576e45cbeff5fe7c4842859451ab2dae7a8370f1b2f7a529d2ca210e3e844d973523d73d193df6c17f1314a6"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Orleans.Core.Abstractions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Serilog, Version=2.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100fb8d13fd344a1c6fe0fe83ef33c1080bf30690765bc6eb0df26ebfdf8f21670c64265b30db09f73a0dea5b3db4c9d18dbf6d5a25af5ce9016f281014d79dc3b4201ac646c451830fc7e61a2dfd633d34c39f87b81894191652df5ac63cc40c77f3542f702bda692e6e8a9158353df189007a49da0f3cfd55eb250066b19485ec"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.AppContext, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Buffers, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.Immutable, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.Annotations, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.EventBasedAsync, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Console, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Core, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Data.Common, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Contracts, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Debug, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.DiagnosticSource, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.FileVersionInfo, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Process, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.StackTrace, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.TextWriterTraceListener, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Tools, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.TraceSource, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Tracing, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Drawing.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Dynamic.Runtime, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Formats.Asn1, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Globalization.Calendars, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Globalization, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Globalization.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression.Brotli, Version=5.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression.ZipFile, Version=5.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem.DriveInfo, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem.Watcher, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.IsolatedStorage, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.MemoryMappedFiles, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.UnmanagedMemoryStream, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Memory, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Http, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Http.Json, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Mail, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.NameResolution, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.NetworkInformation, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Ping, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Requests, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.ServicePoint, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Sockets, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebClient, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebHeaderCollection, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebProxy, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebSockets.Client, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebSockets, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Numerics.Vectors, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.DispatchProxy, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Emit, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Emit.ILGeneration, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Emit.Lightweight, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Metadata, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.TypeExtensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Resources.Reader, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Resources.ResourceManager, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Resources.Writer, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.CompilerServices.Unsafe, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.CompilerServices.VisualC, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Handles, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.InteropServices, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.InteropServices.RuntimeInformation, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Intrinsics, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Loader, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Numerics, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Formatters, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Json, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Xml, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Claims, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Algorithms, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Csp, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Encoding, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.X509Certificates, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Principal, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.SecureString, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encoding.CodePages, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encoding, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encoding.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encodings.Web, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Json, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Channels, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Overlapped, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks.Dataflow, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks.Parallel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Thread, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.ThreadPool, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Timer, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Web, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Web.HttpUtility, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Windows, Version=4.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.ReaderWriter, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.Serialization, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XDocument, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XmlDocument, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XmlSerializer, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XPath, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XPath.XDocument, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain), (int)0x986C57C), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCcmCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x986C57C:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x986C57C;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCcmCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain
    {
        OrleansCodeGenOracleObserverAesCcmCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCcmCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCcmCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x986C57C;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCcmCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x986C57C;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x986C57C:
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain), (int)0x65AF47A6), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x65AF47A6:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x65AF47A6;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain
    {
        OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x65AF47A6;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCcmEcmaCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x65AF47A6;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x65AF47A6:
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain), (int)0x753CBF5A), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x753CBF5A:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x57D8AC59:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult)arguments[1]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x753CBF5A;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain
    {
        OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x753CBF5A;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCompleteDeferredGcmCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x753CBF5A;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x753CBF5A:
                {
                    switch (methodId)
                    {
                        case (int)0x57D8AC59:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>((int)0x57D8AC59, new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain), (int)0xCA86D7B), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0xCA86D7B:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x57D8AC59:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult)arguments[1]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0xCA86D7B;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain
    {
        OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0xCA86D7B;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCompleteDeferredXpnCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0xCA86D7B;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0xCA86D7B:
                {
                    switch (methodId)
                    {
                        case (int)0x57D8AC59:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>((int)0x57D8AC59, new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain), (int)0x174F542F), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x174F542F:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x174F542F;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain
    {
        OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x174F542F;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesDeferredGcmCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x174F542F;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x174F542F:
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain), (int)0x360B4D24), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x360B4D24:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x360B4D24;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain
    {
        OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x360B4D24;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesDeferredXpnCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x360B4D24;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x360B4D24:
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain), (int)0x60241CB5), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesGcmCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x60241CB5:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x60241CB5;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesGcmCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain
    {
        OrleansCodeGenOracleObserverAesGcmCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesGcmCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesGcmCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x60241CB5;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesGcmCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x60241CB5;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x60241CB5:
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain), unchecked((int)0xDA51A64E)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesGcmSivCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xDA51A64E):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xDA51A64E);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain
    {
        OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xDA51A64E);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesGcmSivCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xDA51A64E);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xDA51A64E):
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain), unchecked((int)0xDA35282D)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesXpnCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xDA35282D):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters)arguments[0]);
                        case (int)0x27E78AC0:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8034951E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92A83100):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xDA35282D);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesXpnCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain
    {
        OrleansCodeGenOracleObserverAesXpnCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesXpnCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesXpnCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xDA35282D);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesXpnCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xDA35282D);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xDA35282D):
                {
                    switch (methodId)
                    {
                        case (int)0x59E838C9:
                            return "BeginWorkAsync";
                        case (int)0x27E78AC0:
                            return "InitialSubscribe";
                        case unchecked((int)0x8034951E):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92A83100):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x59E838C9, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x27E78AC0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8034951E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92A83100), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain), unchecked((int)0xBDBF966C)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverAesCounterRfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xBDBF966C):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0xE3A33E5:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters>)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xBDBF966C);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain))]
    internal class OrleansCodeGenObserverAesCounterRfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain
    {
        OrleansCodeGenObserverAesCounterRfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverAesCounterRfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverAesCounterRfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xBDBF966C);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverAesCounterRfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xBDBF966C);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xBDBF966C):
                {
                    switch (methodId)
                    {
                        case (int)0xE3A33E5:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters> param0)
        {
            return base.InvokeMethodAsync<bool>((int)0xE3A33E5, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain), unchecked((int)0xAB585D10)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xAB585D10):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x493E3548:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesWithPayloadParameters)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xAB585D10);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain))]
    internal class OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain
    {
        OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xAB585D10);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverCompleteDeferredAesCounterRfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xAB585D10);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xAB585D10):
                {
                    switch (methodId)
                    {
                        case (int)0x493E3548:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesWithPayloadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x493E3548, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain), (int)0xD2F12FF), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0xD2F12FF:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x288A1E52:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0xD2F12FF;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain
    {
        OrleansCodeGenOracleObserverAesCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0xD2F12FF;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0xD2F12FF;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0xD2F12FF:
                {
                    switch (methodId)
                    {
                        case (int)0x288A1E52:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x288A1E52, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain), unchecked((int)0xFE0335B8)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xFE0335B8):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0xE3A33E5:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters>)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xFE0335B8);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain
    {
        OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xFE0335B8);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCompleteDeferredCounterCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xFE0335B8);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xFE0335B8):
                {
                    switch (methodId)
                    {
                        case (int)0xE3A33E5:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters> param0)
        {
            return base.InvokeMethodAsync<bool>((int)0xE3A33E5, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain), (int)0x2C26CBBF), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x2C26CBBF:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xA7B191AB):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult)arguments[1]);
                        case unchecked((int)0xB74BDFD9):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xEFD50D1C):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC213BC8B):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x2C26CBBF;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain
    {
        OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x2C26CBBF;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesCounterExtractIvsCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x2C26CBBF;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x2C26CBBF:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xA7B191AB):
                            return "BeginWorkAsync";
                        case unchecked((int)0xB74BDFD9):
                            return "InitialSubscribe";
                        case unchecked((int)0xEFD50D1C):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xC213BC8B):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xA7B191AB), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB74BDFD9), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEFD50D1C), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC213BC8B), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain), unchecked((int)0xC956B6B4)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC956B6B4):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0xE3A33E5:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters>)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC956B6B4);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain
    {
        OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC956B6B4);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesDeferredCounterCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC956B6B4);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC956B6B4):
                {
                    switch (methodId)
                    {
                        case (int)0xE3A33E5:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters> param0)
        {
            return base.InvokeMethodAsync<bool>((int)0xE3A33E5, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain), (int)0x5B608943), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesFfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x5B608943:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xCC7EE497):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesFfParameters)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x5B608943;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesFfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain
    {
        OrleansCodeGenOracleObserverAesFfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesFfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesFfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x5B608943;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesFfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x5B608943;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x5B608943:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xCC7EE497):
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesFfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xCC7EE497), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain), unchecked((int)0xB242BC1E)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xB242BC1E):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x288A1E52:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters)arguments[0]);
                        case unchecked((int)0xDC39680A):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xA4E9D7B3):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xFA2685B0):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xB242BC1E);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain
    {
        OrleansCodeGenOracleObserverAesMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xB242BC1E);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xB242BC1E);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xB242BC1E):
                {
                    switch (methodId)
                    {
                        case (int)0x288A1E52:
                            return "BeginWorkAsync";
                        case unchecked((int)0xDC39680A):
                            return "InitialSubscribe";
                        case unchecked((int)0xA4E9D7B3):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xFA2685B0):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x288A1E52, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xDC39680A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA4E9D7B3), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xFA2685B0), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain), unchecked((int)0xD6CF06DF)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesWithPayloadCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD6CF06DF):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x493E3548:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesWithPayloadParameters)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD6CF06DF);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain
    {
        OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD6CF06DF);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesWithPayloadCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD6CF06DF);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD6CF06DF):
                {
                    switch (methodId)
                    {
                        case (int)0x493E3548:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesWithPayloadParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x493E3548, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain), (int)0x309DE510), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAesXtsCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x309DE510:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x97CB5DA2):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesXtsParameters)arguments[0]);
                        case (int)0x1276D34C:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>)arguments[0]);
                            return null;
                        case (int)0x3CF0AC7D:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xBEA043ED):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x309DE510;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain))]
    internal class OrleansCodeGenOracleObserverAesXtsCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain
    {
        OrleansCodeGenOracleObserverAesXtsCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAesXtsCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAesXtsCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x309DE510;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAesXtsCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x309DE510;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x309DE510:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x97CB5DA2):
                            return "BeginWorkAsync";
                        case (int)0x1276D34C:
                            return "InitialSubscribe";
                        case (int)0x3CF0AC7D:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xBEA043ED):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesXtsParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x97CB5DA2), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1276D34C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3CF0AC7D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBEA043ED), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain), (int)0x49CD297D), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverCShakeCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x49CD297D:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6EB5489A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CShakeParameters)arguments[0]);
                        case (int)0x146AA402:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>)arguments[0]);
                            return null;
                        case (int)0x6F5247C:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>)arguments[0]);
                            return null;
                        case (int)0x222C4418:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x49CD297D;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain))]
    internal class OrleansCodeGenOracleObserverCShakeCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain
    {
        OrleansCodeGenOracleObserverCShakeCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverCShakeCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverCShakeCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x49CD297D;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverCShakeCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x49CD297D;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x49CD297D:
                {
                    switch (methodId)
                    {
                        case (int)0x6EB5489A:
                            return "BeginWorkAsync";
                        case (int)0x146AA402:
                            return "InitialSubscribe";
                        case (int)0x6F5247C:
                            return "HeartbeatSubscribe";
                        case (int)0x222C4418:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CShakeParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6EB5489A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x146AA402, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6F5247C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x222C4418, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain), unchecked((int)0xE50E54FC)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverCShakeMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xE50E54FC):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6EB5489A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CShakeParameters)arguments[0]);
                        case unchecked((int)0xE053E107):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0x804C0DE2):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>)arguments[0]);
                            return null;
                        case (int)0x532C2A6C:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xE50E54FC);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverCShakeMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain
    {
        OrleansCodeGenOracleObserverCShakeMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverCShakeMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverCShakeMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xE50E54FC);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverCShakeMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xE50E54FC);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xE50E54FC):
                {
                    switch (methodId)
                    {
                        case (int)0x6EB5489A:
                            return "BeginWorkAsync";
                        case unchecked((int)0xE053E107):
                            return "InitialSubscribe";
                        case unchecked((int)0x804C0DE2):
                            return "HeartbeatSubscribe";
                        case (int)0x532C2A6C:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CShakeParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6EB5489A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE053E107), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x804C0DE2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x532C2A6C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult>>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain), (int)0x16F371C9), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverBlockCipherDfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x16F371C9:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x288A1E52:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters)arguments[0]);
                        case (int)0x704FD752:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x36E35312:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        case (int)0x1C155724:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x16F371C9;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain))]
    internal class OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain
    {
        OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x16F371C9;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverBlockCipherDfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x16F371C9;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x16F371C9:
                {
                    switch (methodId)
                    {
                        case (int)0x288A1E52:
                            return "BeginWorkAsync";
                        case (int)0x704FD752:
                            return "InitialSubscribe";
                        case (int)0x36E35312:
                            return "HeartbeatSubscribe";
                        case (int)0x1C155724:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x288A1E52, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x704FD752, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x36E35312, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1C155724, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain), (int)0x4B7A2DFF), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDrbgCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x4B7A2DFF:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xAF903A4A):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.DrbgParameters)arguments[0]);
                        case (int)0x23679384:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC83C8DEB):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>)arguments[0]);
                            return null;
                        case (int)0x178E4321:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x4B7A2DFF;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain))]
    internal class OrleansCodeGenOracleObserverDrbgCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain
    {
        OrleansCodeGenOracleObserverDrbgCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDrbgCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDrbgCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x4B7A2DFF;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDrbgCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x4B7A2DFF;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x4B7A2DFF:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xAF903A4A):
                            return "BeginWorkAsync";
                        case (int)0x23679384:
                            return "InitialSubscribe";
                        case unchecked((int)0xC83C8DEB):
                            return "HeartbeatSubscribe";
                        case (int)0x178E4321:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.DrbgParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xAF903A4A), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x23679384, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC83C8DEB), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x178E4321, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain), (int)0x4A6FF6EE), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverHashDfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x4A6FF6EE:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x55E3B417:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaWrapperParameters)arguments[0]);
                        case unchecked((int)0x8699E55D):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        case (int)0x4874A0B1:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x98ABE739):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x4A6FF6EE;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain))]
    internal class OrleansCodeGenOracleObserverHashDfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain
    {
        OrleansCodeGenOracleObserverHashDfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverHashDfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverHashDfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x4A6FF6EE;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverHashDfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x4A6FF6EE;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x4A6FF6EE:
                {
                    switch (methodId)
                    {
                        case (int)0x55E3B417:
                            return "BeginWorkAsync";
                        case unchecked((int)0x8699E55D):
                            return "InitialSubscribe";
                        case (int)0x4874A0B1:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x98ABE739):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaWrapperParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x55E3B417, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8699E55D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4874A0B1, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x98ABE739), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain), unchecked((int)0xF874F20F)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xF874F20F):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x40545C38:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaKeyParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult)arguments[1]);
                        case unchecked((int)0xEC8ABCA7):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xCB83F14F):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xE46A7501):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xF874F20F);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain
    {
        OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xF874F20F);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaCompleteDeferredKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xF874F20F);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xF874F20F):
                {
                    switch (methodId)
                    {
                        case (int)0x40545C38:
                            return "BeginWorkAsync";
                        case unchecked((int)0xEC8ABCA7):
                            return "InitialSubscribe";
                        case unchecked((int)0xCB83F14F):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xE46A7501):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaKeyParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>((int)0x40545C38, new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEC8ABCA7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCB83F14F), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE46A7501), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain), (int)0x16DF585C), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x16DF585C:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xB33E89E5):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult)arguments[1]);
                        case (int)0x31309374:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0x8D3F2595):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xC289897F):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x16DF585C;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x16DF585C;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaCompleteDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x16DF585C;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x16DF585C:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xB33E89E5):
                            return "BeginWorkAsync";
                        case (int)0x31309374:
                            return "InitialSubscribe";
                        case unchecked((int)0x8D3F2595):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xC289897F):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xB33E89E5), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x31309374, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8D3F2595), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC289897F), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain), unchecked((int)0xD234C263)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD234C263):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xE4EA942C):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters)arguments[0]);
                        case (int)0x31BF8879:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0xBAC6DF3:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xBB3BFCCD):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD234C263);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD234C263);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD234C263);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD234C263):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xE4EA942C):
                            return "BeginWorkAsync";
                        case (int)0x31BF8879:
                            return "InitialSubscribe";
                        case (int)0xBAC6DF3:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xBB3BFCCD):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xE4EA942C), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x31BF8879, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0xBAC6DF3, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBB3BFCCD), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain), unchecked((int)0xF754F5EA)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaGCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xF754F5EA):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xA757D7E2):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult)arguments[1]);
                        case (int)0x210CF8FE:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>)arguments[0]);
                            return null;
                        case (int)0x7E1B55D6:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>)arguments[0]);
                            return null;
                        case (int)0x4A511513:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xF754F5EA);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaGCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain
    {
        OrleansCodeGenOracleObserverDsaGCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaGCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaGCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xF754F5EA);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaGCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xF754F5EA);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xF754F5EA):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xA757D7E2):
                            return "BeginWorkAsync";
                        case (int)0x210CF8FE:
                            return "InitialSubscribe";
                        case (int)0x7E1B55D6:
                            return "HeartbeatSubscribe";
                        case (int)0x4A511513:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult pqParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xA757D7E2), new object[]{param0, pqParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x210CF8FE, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7E1B55D6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4A511513, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain), unchecked((int)0xF45EC530)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaGVerifyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xF45EC530):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xA757D7E2):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult)arguments[1]);
                        case unchecked((int)0x8F83E890):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>)arguments[0]);
                            return null;
                        case (int)0x2448E016:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>)arguments[0]);
                            return null;
                        case (int)0x242AA4F6:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xF45EC530);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain
    {
        OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xF45EC530);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaGVerifyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xF45EC530);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xF45EC530):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xA757D7E2):
                            return "BeginWorkAsync";
                        case unchecked((int)0x8F83E890):
                            return "InitialSubscribe";
                        case (int)0x2448E016:
                            return "HeartbeatSubscribe";
                        case (int)0x242AA4F6:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xA757D7E2), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8F83E890), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2448E016, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x242AA4F6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain), unchecked((int)0x97B3A49F)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x97B3A49F):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x1E734C2B:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaKeyParameters)arguments[0]);
                        case (int)0x2383839A:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC6EE929C):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xD0C73EDF):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x97B3A49F);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain
    {
        OrleansCodeGenOracleObserverDsaKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x97B3A49F);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x97B3A49F);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x97B3A49F):
                {
                    switch (methodId)
                    {
                        case (int)0x1E734C2B:
                            return "BeginWorkAsync";
                        case (int)0x2383839A:
                            return "InitialSubscribe";
                        case unchecked((int)0xC6EE929C):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xD0C73EDF):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaKeyParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x1E734C2B, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2383839A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6EE929C), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD0C73EDF), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain), unchecked((int)0xB3A498F4)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaPqCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xB3A498F4):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x48CEE50:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters)arguments[0]);
                        case (int)0x210CF8FE:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>)arguments[0]);
                            return null;
                        case (int)0x7E1B55D6:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>)arguments[0]);
                            return null;
                        case (int)0x4A511513:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xB3A498F4);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaPqCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain
    {
        OrleansCodeGenOracleObserverDsaPqCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaPqCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaPqCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xB3A498F4);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaPqCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xB3A498F4);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xB3A498F4):
                {
                    switch (methodId)
                    {
                        case (int)0x48CEE50:
                            return "BeginWorkAsync";
                        case (int)0x210CF8FE:
                            return "InitialSubscribe";
                        case (int)0x7E1B55D6:
                            return "HeartbeatSubscribe";
                        case (int)0x4A511513:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x48CEE50, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x210CF8FE, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7E1B55D6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4A511513, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain), unchecked((int)0x93809FD5)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x93809FD5):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xA757D7E2):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult)arguments[1]);
                        case unchecked((int)0x8F83E890):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>)arguments[0]);
                            return null;
                        case (int)0x2448E016:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>)arguments[0]);
                            return null;
                        case (int)0x242AA4F6:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x93809FD5);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain
    {
        OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x93809FD5);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaPqVerifyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x93809FD5);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x93809FD5):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xA757D7E2):
                            return "BeginWorkAsync";
                        case unchecked((int)0x8F83E890):
                            return "InitialSubscribe";
                        case (int)0x2448E016:
                            return "HeartbeatSubscribe";
                        case (int)0x242AA4F6:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xA757D7E2), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8F83E890), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2448E016, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x242AA4F6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain), unchecked((int)0xCA7C6727)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverDsaSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xCA7C6727):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xE4EA942C):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters)arguments[0]);
                        case (int)0x31BF8879:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0xBAC6DF3:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xBB3BFCCD):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xCA7C6727);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xCA7C6727);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverDsaSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xCA7C6727);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xCA7C6727):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xE4EA942C):
                            return "BeginWorkAsync";
                        case (int)0x31BF8879:
                            return "InitialSubscribe";
                        case (int)0xBAC6DF3:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xBB3BFCCD):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xE4EA942C), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x31BF8879, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0xBAC6DF3, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBB3BFCCD), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain), unchecked((int)0xC0DB96B4)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverEcdsaDomainParameterGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC0DB96B4):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7EA47E4F:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.EcdsaCurveParameters)arguments[0]);
                        case (int)0x47D2594D:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xF9484461):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>)arguments[0]);
                            return null;
                        case (int)0x5A012FB9:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC0DB96B4);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain))]
    internal class OrleansCodeGenObserverEcdsaDomainParameterGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain
    {
        OrleansCodeGenObserverEcdsaDomainParameterGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverEcdsaDomainParameterGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverEcdsaDomainParameterGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC0DB96B4);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverEcdsaDomainParameterGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC0DB96B4);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC0DB96B4):
                {
                    switch (methodId)
                    {
                        case (int)0x7EA47E4F:
                            return "BeginWorkAsync";
                        case (int)0x47D2594D:
                            return "InitialSubscribe";
                        case unchecked((int)0xF9484461):
                            return "HeartbeatSubscribe";
                        case (int)0x5A012FB9:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.EcdsaCurveParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7EA47E4F, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x47D2594D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF9484461), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5A012FB9, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain), (int)0x2FE7262C), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x2FE7262C:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x2791EEE8:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult)arguments[1]);
                        case (int)0x49C10EF6:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>)arguments[0]);
                            return null;
                        case (int)0x28BBDE9:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xAEC2001E):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x2FE7262C;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x2FE7262C;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaCompleteDeferredKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x2FE7262C;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x2FE7262C:
                {
                    switch (methodId)
                    {
                        case (int)0x2791EEE8:
                            return "BeginWorkAsync";
                        case (int)0x49C10EF6:
                            return "InitialSubscribe";
                        case (int)0x28BBDE9:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xAEC2001E):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>((int)0x2791EEE8, new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x49C10EF6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x28BBDE9, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAEC2001E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain), (int)0x1B91922A), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x1B91922A:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x80A20A0F):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult)arguments[1]);
                        case (int)0x1DF9ECE6:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xD1C14902):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x63A99EBD:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x1B91922A;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x1B91922A;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x1B91922A;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x1B91922A:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x80A20A0F):
                            return "BeginWorkAsync";
                        case (int)0x1DF9ECE6:
                            return "InitialSubscribe";
                        case unchecked((int)0xD1C14902):
                            return "HeartbeatSubscribe";
                        case (int)0x63A99EBD:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x80A20A0F), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1DF9ECE6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD1C14902), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x63A99EBD, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain), (int)0x6A0E0A0B), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x6A0E0A0B:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6BB79C56:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters)arguments[0]);
                        case unchecked((int)0x941A9D44):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x7B6130B7:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x4AC276A1:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x6A0E0A0B;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x6A0E0A0B;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x6A0E0A0B;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x6A0E0A0B:
                {
                    switch (methodId)
                    {
                        case (int)0x6BB79C56:
                            return "BeginWorkAsync";
                        case unchecked((int)0x941A9D44):
                            return "InitialSubscribe";
                        case (int)0x7B6130B7:
                            return "HeartbeatSubscribe";
                        case (int)0x4AC276A1:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6BB79C56, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x941A9D44), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7B6130B7, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4AC276A1, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain), (int)0x2E7E502), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x2E7E502:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x1751FC72:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters)arguments[0]);
                        case (int)0x49C10EF6:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>)arguments[0]);
                            return null;
                        case (int)0x28BBDE9:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xAEC2001E):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x2E7E502;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x2E7E502;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x2E7E502;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x2E7E502:
                {
                    switch (methodId)
                    {
                        case (int)0x1751FC72:
                            return "BeginWorkAsync";
                        case (int)0x49C10EF6:
                            return "InitialSubscribe";
                        case (int)0x28BBDE9:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xAEC2001E):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x1751FC72, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x49C10EF6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x28BBDE9, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAEC2001E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain), (int)0x128A5138), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x128A5138:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6BB79C56:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters)arguments[0]);
                        case unchecked((int)0x941A9D44):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x7B6130B7:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x4AC276A1:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x128A5138;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x128A5138;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x128A5138;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x128A5138:
                {
                    switch (methodId)
                    {
                        case (int)0x6BB79C56:
                            return "BeginWorkAsync";
                        case unchecked((int)0x941A9D44):
                            return "InitialSubscribe";
                        case (int)0x7B6130B7:
                            return "HeartbeatSubscribe";
                        case (int)0x4AC276A1:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6BB79C56, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x941A9D44), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7B6130B7, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4AC276A1, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain), unchecked((int)0x91424479)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x91424479):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x2791EEE8:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult)arguments[1]);
                        case (int)0x6D1BB399:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xFEB04464):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xEFEF9913):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x91424479);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x91424479);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaVerifyKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x91424479);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x91424479):
                {
                    switch (methodId)
                    {
                        case (int)0x2791EEE8:
                            return "BeginWorkAsync";
                        case (int)0x6D1BB399:
                            return "InitialSubscribe";
                        case unchecked((int)0xFEB04464):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xEFEF9913):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult key1)
        {
            return base.InvokeMethodAsync<bool>((int)0x2791EEE8, new object[]{param0, key1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6D1BB399, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xFEB04464), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEFEF9913), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain), (int)0x398E7CEF), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x398E7CEF:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xBA3AE6DA):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult)arguments[1], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult)arguments[2]);
                        case (int)0x1DF9ECE6:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xD1C14902):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x63A99EBD:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x398E7CEF;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x398E7CEF;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEcdsaVerifySignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x398E7CEF;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x398E7CEF:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xBA3AE6DA):
                            return "BeginWorkAsync";
                        case (int)0x1DF9ECE6:
                            return "InitialSubscribe";
                        case unchecked((int)0xD1C14902):
                            return "HeartbeatSubscribe";
                        case (int)0x63A99EBD:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult key1, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult badKey2)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xBA3AE6DA), new object[]{param0, key1, badKey2});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1DF9ECE6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD1C14902), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x63A99EBD, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult>>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain), unchecked((int)0xDB5A66F1)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xDB5A66F1):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xDB8BA04E):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult)arguments[1]);
                        case unchecked((int)0xA52861EA):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>)arguments[0]);
                            return null;
                        case (int)0x7ADDC084:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8063B0A9):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xDB5A66F1);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xDB5A66F1);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaCompleteDeferredKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xDB5A66F1);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xDB5A66F1):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xDB8BA04E):
                            return "BeginWorkAsync";
                        case unchecked((int)0xA52861EA):
                            return "InitialSubscribe";
                        case (int)0x7ADDC084:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x8063B0A9):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xDB8BA04E), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA52861EA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7ADDC084, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8063B0A9), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain), (int)0x6F967BA3), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x6F967BA3:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xCD3E64A4):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult)arguments[1]);
                        case (int)0x5F6C271D:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x53414729:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x358666D:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x6F967BA3;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x6F967BA3;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaCompleteDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x6F967BA3;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x6F967BA3:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xCD3E64A4):
                            return "BeginWorkAsync";
                        case (int)0x5F6C271D:
                            return "InitialSubscribe";
                        case (int)0x53414729:
                            return "HeartbeatSubscribe";
                        case (int)0x358666D:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xCD3E64A4), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5F6C271D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x53414729, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x358666D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain), unchecked((int)0xD3985AC0)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD3985AC0):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters)arguments[0]);
                        case unchecked((int)0xC33D3E51):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC6869A99):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA18D348D):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD3985AC0);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD3985AC0);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD3985AC0);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD3985AC0):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return "BeginWorkAsync";
                        case unchecked((int)0xC33D3E51):
                            return "InitialSubscribe";
                        case unchecked((int)0xC6869A99):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xA18D348D):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC9CD2C3B), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC33D3E51), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6869A99), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA18D348D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain), (int)0x1CB3276C), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x1CB3276C:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters)arguments[0]);
                        case unchecked((int)0xC33D3E51):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC6869A99):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA18D348D):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x1CB3276C;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x1CB3276C;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x1CB3276C;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x1CB3276C:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return "BeginWorkAsync";
                        case unchecked((int)0xC33D3E51):
                            return "InitialSubscribe";
                        case unchecked((int)0xC6869A99):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xA18D348D):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC9CD2C3B), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC33D3E51), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6869A99), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA18D348D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain), (int)0x43B48D92), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x43B48D92:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x36CCCFF0:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters)arguments[0]);
                        case unchecked((int)0xA52861EA):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>)arguments[0]);
                            return null;
                        case (int)0x7ADDC084:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8063B0A9):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x43B48D92;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x43B48D92;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x43B48D92;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x43B48D92:
                {
                    switch (methodId)
                    {
                        case (int)0x36CCCFF0:
                            return "BeginWorkAsync";
                        case unchecked((int)0xA52861EA):
                            return "InitialSubscribe";
                        case (int)0x7ADDC084:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x8063B0A9):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x36CCCFF0, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA52861EA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7ADDC084, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8063B0A9), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain), (int)0x16B6F0A), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x16B6F0A:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x996C3E01):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaMessageParameters)arguments[0]);
                        case unchecked((int)0xEA468CA6):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString>)arguments[0]);
                            return null;
                        case (int)0xFE83009:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString>)arguments[0]);
                            return null;
                        case (int)0x4BD3E1FF:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x16B6F0A;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x16B6F0A;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaMessageBitFlipCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x16B6F0A;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x16B6F0A:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x996C3E01):
                            return "BeginWorkAsync";
                        case unchecked((int)0xEA468CA6):
                            return "InitialSubscribe";
                        case (int)0xFE83009:
                            return "HeartbeatSubscribe";
                        case (int)0x4BD3E1FF:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaMessageParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x996C3E01), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Math.BitString>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEA468CA6), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Math.BitString>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0xFE83009, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Math.BitString>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4BD3E1FF, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Math.BitString>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain), unchecked((int)0xF4AEB1AB)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xF4AEB1AB):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters)arguments[0]);
                        case unchecked((int)0xC33D3E51):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC6869A99):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA18D348D):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xF4AEB1AB);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xF4AEB1AB);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaSignatureBitFlipCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xF4AEB1AB);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xF4AEB1AB):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return "BeginWorkAsync";
                        case unchecked((int)0xC33D3E51):
                            return "InitialSubscribe";
                        case unchecked((int)0xC6869A99):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xA18D348D):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC9CD2C3B), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC33D3E51), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6869A99), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA18D348D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain), unchecked((int)0xE1DDB059)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xE1DDB059):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters)arguments[0]);
                        case unchecked((int)0xC33D3E51):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC6869A99):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA18D348D):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xE1DDB059);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xE1DDB059);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xE1DDB059);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xE1DDB059):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return "BeginWorkAsync";
                        case unchecked((int)0xC33D3E51):
                            return "InitialSubscribe";
                        case unchecked((int)0xC6869A99):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xA18D348D):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC9CD2C3B), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC33D3E51), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6869A99), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA18D348D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain), unchecked((int)0xF1B9A61F)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xF1B9A61F):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x36CCCFF0:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters)arguments[0]);
                        case (int)0x5A3111EA:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>)arguments[0]);
                            return null;
                        case (int)0x3B601774:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>)arguments[0]);
                            return null;
                        case (int)0x2EAC7CD2:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xF1B9A61F);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xF1B9A61F);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaVerifyKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xF1B9A61F);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xF1B9A61F):
                {
                    switch (methodId)
                    {
                        case (int)0x36CCCFF0:
                            return "BeginWorkAsync";
                        case (int)0x5A3111EA:
                            return "InitialSubscribe";
                        case (int)0x3B601774:
                            return "HeartbeatSubscribe";
                        case (int)0x2EAC7CD2:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x36CCCFF0, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5A3111EA, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3B601774, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2EAC7CD2, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain), (int)0x7543F9C1), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x7543F9C1:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters)arguments[0]);
                        case (int)0x5F6C271D:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x53414729:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x358666D:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x7543F9C1;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain
    {
        OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x7543F9C1;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverEddsaVerifySignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x7543F9C1;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x7543F9C1:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC9CD2C3B):
                            return "BeginWorkAsync";
                        case (int)0x5F6C271D:
                            return "InitialSubscribe";
                        case (int)0x53414729:
                            return "HeartbeatSubscribe";
                        case (int)0x358666D:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC9CD2C3B), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5F6C271D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x53414729, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x358666D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult>>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain), unchecked((int)0xE9E7DDEC)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverParallelHashCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xE9E7DDEC):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xD8A04015):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ParallelHashParameters)arguments[0]);
                        case (int)0x2ECD88D6:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>)arguments[0]);
                            return null;
                        case (int)0xB1F96DB:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x926AC8A1):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xE9E7DDEC);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain))]
    internal class OrleansCodeGenOracleObserverParallelHashCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain
    {
        OrleansCodeGenOracleObserverParallelHashCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverParallelHashCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverParallelHashCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xE9E7DDEC);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverParallelHashCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xE9E7DDEC);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xE9E7DDEC):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xD8A04015):
                            return "BeginWorkAsync";
                        case (int)0x2ECD88D6:
                            return "InitialSubscribe";
                        case (int)0xB1F96DB:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x926AC8A1):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ParallelHashParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xD8A04015), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2ECD88D6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0xB1F96DB, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x926AC8A1), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain), unchecked((int)0xD906AED3)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverParallelHashMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD906AED3):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xD8A04015):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ParallelHashParameters)arguments[0]);
                        case unchecked((int)0xBDE2532E):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xA7D5C87E):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>)arguments[0]);
                            return null;
                        case (int)0x6809D579:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD906AED3);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain
    {
        OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD906AED3);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverParallelHashMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD906AED3);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD906AED3):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xD8A04015):
                            return "BeginWorkAsync";
                        case unchecked((int)0xBDE2532E):
                            return "InitialSubscribe";
                        case unchecked((int)0xA7D5C87E):
                            return "HeartbeatSubscribe";
                        case (int)0x6809D579:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ParallelHashParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xD8A04015), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBDE2532E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA7D5C87E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6809D579, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain), unchecked((int)0xBF6BD808)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverSha3CaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xBF6BD808):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters)arguments[0]);
                        case unchecked((int)0x8699E55D):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        case (int)0x4874A0B1:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x98ABE739):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xBF6BD808);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain))]
    internal class OrleansCodeGenOracleObserverSha3CaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain
    {
        OrleansCodeGenOracleObserverSha3CaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverSha3CaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverSha3CaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xBF6BD808);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverSha3CaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xBF6BD808);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xBF6BD808):
                {
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return "BeginWorkAsync";
                        case unchecked((int)0x8699E55D):
                            return "InitialSubscribe";
                        case (int)0x4874A0B1:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x98ABE739):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7787B70A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8699E55D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4874A0B1, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x98ABE739), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain), unchecked((int)0x802A7CFA)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverSha3MctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x802A7CFA):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters)arguments[0]);
                        case unchecked((int)0xC6281D58):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        case (int)0x6BF84711:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0x8F6313F7):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x802A7CFA);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain))]
    internal class OrleansCodeGenOracleObserverSha3MctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain
    {
        OrleansCodeGenOracleObserverSha3MctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverSha3MctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverSha3MctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x802A7CFA);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverSha3MctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x802A7CFA);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x802A7CFA):
                {
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return "BeginWorkAsync";
                        case unchecked((int)0xC6281D58):
                            return "InitialSubscribe";
                        case (int)0x6BF84711:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x8F6313F7):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7787B70A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6281D58), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6BF84711, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8F6313F7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain), unchecked((int)0xC7D110FD)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverShaCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC7D110FD):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters)arguments[0]);
                        case unchecked((int)0x8699E55D):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        case (int)0x4874A0B1:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x98ABE739):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC7D110FD);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain))]
    internal class OrleansCodeGenOracleObserverShaCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain
    {
        OrleansCodeGenOracleObserverShaCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverShaCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverShaCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC7D110FD);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverShaCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC7D110FD);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC7D110FD):
                {
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return "BeginWorkAsync";
                        case unchecked((int)0x8699E55D):
                            return "InitialSubscribe";
                        case (int)0x4874A0B1:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x98ABE739):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7787B70A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8699E55D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4874A0B1, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x98ABE739), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain), unchecked((int)0xFA81A46F)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverShakeMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xFA81A46F):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x779FB939:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShakeParameters)arguments[0]);
                        case unchecked((int)0xC6281D58):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        case (int)0x6BF84711:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0x8F6313F7):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xFA81A46F);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverShakeMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain
    {
        OrleansCodeGenOracleObserverShakeMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverShakeMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverShakeMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xFA81A46F);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverShakeMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xFA81A46F);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xFA81A46F):
                {
                    switch (methodId)
                    {
                        case (int)0x779FB939:
                            return "BeginWorkAsync";
                        case unchecked((int)0xC6281D58):
                            return "InitialSubscribe";
                        case (int)0x6BF84711:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x8F6313F7):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShakeParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x779FB939, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6281D58), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6BF84711, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8F6313F7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain), (int)0x3A4D4857), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverShaLdtCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x3A4D4857:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC6B90566):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaLargeDataParameters)arguments[0]);
                        case (int)0x531266AD:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xD36FF9AA):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>)arguments[0]);
                            return null;
                        case (int)0x1CD6EE0B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x3A4D4857;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain))]
    internal class OrleansCodeGenOracleObserverShaLdtCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain
    {
        OrleansCodeGenOracleObserverShaLdtCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverShaLdtCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverShaLdtCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x3A4D4857;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverShaLdtCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x3A4D4857;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x3A4D4857:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC6B90566):
                            return "BeginWorkAsync";
                        case (int)0x531266AD:
                            return "InitialSubscribe";
                        case unchecked((int)0xD36FF9AA):
                            return "HeartbeatSubscribe";
                        case (int)0x1CD6EE0B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaLargeDataParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC6B90566), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x531266AD, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD36FF9AA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1CD6EE0B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain), unchecked((int)0xD67EDAAF)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverShaMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD67EDAAF):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters)arguments[0]);
                        case unchecked((int)0xC6281D58):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        case (int)0x6BF84711:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0x8F6313F7):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD67EDAAF);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverShaMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain
    {
        OrleansCodeGenOracleObserverShaMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverShaMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverShaMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD67EDAAF);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverShaMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD67EDAAF);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD67EDAAF):
                {
                    switch (methodId)
                    {
                        case (int)0x7787B70A:
                            return "BeginWorkAsync";
                        case unchecked((int)0xC6281D58):
                            return "InitialSubscribe";
                        case (int)0x6BF84711:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x8F6313F7):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7787B70A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC6281D58), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6BF84711, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8F6313F7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain), (int)0x60996148), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTupleHashCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x60996148:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x32BF3490:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TupleHashParameters)arguments[0]);
                        case unchecked((int)0x95DC5F0A):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xB5EA2AF2):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x98C48574):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x60996148;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain))]
    internal class OrleansCodeGenOracleObserverTupleHashCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain
    {
        OrleansCodeGenOracleObserverTupleHashCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTupleHashCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTupleHashCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x60996148;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTupleHashCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x60996148;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x60996148:
                {
                    switch (methodId)
                    {
                        case (int)0x32BF3490:
                            return "BeginWorkAsync";
                        case unchecked((int)0x95DC5F0A):
                            return "InitialSubscribe";
                        case unchecked((int)0xB5EA2AF2):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x98C48574):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TupleHashParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x32BF3490, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x95DC5F0A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB5EA2AF2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x98C48574), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain), (int)0x44B16454), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTupleHashMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x44B16454:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x32BF3490:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TupleHashParameters)arguments[0]);
                        case (int)0x377781D5:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0x9D320548):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xD565C0EA):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x44B16454;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain
    {
        OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x44B16454;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTupleHashMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x44B16454;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x44B16454:
                {
                    switch (methodId)
                    {
                        case (int)0x32BF3490:
                            return "BeginWorkAsync";
                        case (int)0x377781D5:
                            return "InitialSubscribe";
                        case unchecked((int)0x9D320548):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xD565C0EA):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TupleHashParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x32BF3490, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x377781D5, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x9D320548), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD565C0EA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult>>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<>), (int)0x33791DAA), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenGrainObserverMethodInvoker<TResult> : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x33791DAA:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<TResult>)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x899A0D99):
                            casted.ReceiveMessageFromCluster((TResult)arguments[0]);
                            return null;
                        case unchecked((int)0x84CE96C1):
                            casted.Throw((global::System.Exception)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x33791DAA;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<>))]
    internal class OrleansCodeGenGrainObserverReference<TResult> : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<TResult>
    {
        OrleansCodeGenGrainObserverReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenGrainObserverReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenGrainObserverReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x33791DAA;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IGrainObserver";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x33791DAA;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x33791DAA:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x899A0D99):
                            return "ReceiveMessageFromCluster";
                        case unchecked((int)0x84CE96C1):
                            return "Throw";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        void global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<TResult>.ReceiveMessageFromCluster(TResult result0)
        {
            base.InvokeOneWayMethod(unchecked((int)0x899A0D99), new object[]{result0});
        }

        void global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<TResult>.Throw(global::System.Exception exception0)
        {
            base.InvokeOneWayMethod(unchecked((int)0x84CE96C1), new object[]{exception0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain), unchecked((int)0x8319AE72)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleKasKcAftCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x8319AE72):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x39C85B65:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.KeyConfirmation.KasKcAftParameters)arguments[0]);
                        case unchecked((int)0x89B2EBD6):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xB7690588):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x81D562AF):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x8319AE72);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain))]
    internal class OrleansCodeGenOracleKasKcAftCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain
    {
        OrleansCodeGenOracleKasKcAftCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleKasKcAftCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleKasKcAftCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x8319AE72);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleKasKcAftCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x8319AE72);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x8319AE72):
                {
                    switch (methodId)
                    {
                        case (int)0x39C85B65:
                            return "BeginWorkAsync";
                        case unchecked((int)0x89B2EBD6):
                            return "InitialSubscribe";
                        case unchecked((int)0xB7690588):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x81D562AF):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.KeyConfirmation.KasKcAftParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x39C85B65, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x89B2EBD6), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB7690588), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x81D562AF), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain), (int)0x6C1629C0), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasAftEccCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x6C1629C0:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC014A2EE):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersEcc)arguments[0]);
                        case (int)0x58223FE7:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>)arguments[0]);
                            return null;
                        case (int)0x64CAE07A:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>)arguments[0]);
                            return null;
                        case unchecked((int)0xD5F44F10):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x6C1629C0;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasAftEccCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain
    {
        OrleansCodeGenOracleObserverKasAftEccCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasAftEccCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasAftEccCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x6C1629C0;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasAftEccCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x6C1629C0;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x6C1629C0:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC014A2EE):
                            return "BeginWorkAsync";
                        case (int)0x58223FE7:
                            return "InitialSubscribe";
                        case (int)0x64CAE07A:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xD5F44F10):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersEcc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC014A2EE), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x58223FE7, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x64CAE07A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD5F44F10), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain), (int)0x49D99135), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasAftFfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x49D99135:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xF8F2547C):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersFfc)arguments[0]);
                        case unchecked((int)0x9C3A730A):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xDD6E693A):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>)arguments[0]);
                            return null;
                        case (int)0x3E493967:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x49D99135;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain
    {
        OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x49D99135;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasAftFfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x49D99135;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x49D99135:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xF8F2547C):
                            return "BeginWorkAsync";
                        case unchecked((int)0x9C3A730A):
                            return "InitialSubscribe";
                        case unchecked((int)0xDD6E693A):
                            return "HeartbeatSubscribe";
                        case (int)0x3E493967:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersFfc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xF8F2547C), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x9C3A730A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xDD6E693A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3E493967, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain), (int)0x6D5F0FEA), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x6D5F0FEA:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x8D286D58):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersEcc)arguments[0]);
                        case (int)0xB35711F:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x5994467A:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x5037BB5:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x6D5F0FEA;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain
    {
        OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x6D5F0FEA;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasCompleteDeferredAftEccCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x6D5F0FEA;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x6D5F0FEA:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x8D286D58):
                            return "BeginWorkAsync";
                        case (int)0xB35711F:
                            return "InitialSubscribe";
                        case (int)0x5994467A:
                            return "HeartbeatSubscribe";
                        case (int)0x5037BB5:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersEcc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x8D286D58), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0xB35711F, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5994467A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5037BB5, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain), unchecked((int)0xC497A893)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC497A893):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xE62C631D):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersFfc)arguments[0]);
                        case (int)0xB35711F:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x5994467A:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x5037BB5:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC497A893);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain
    {
        OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC497A893);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasCompleteDeferredAftFfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC497A893);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC497A893):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xE62C631D):
                            return "BeginWorkAsync";
                        case (int)0xB35711F:
                            return "InitialSubscribe";
                        case (int)0x5994467A:
                            return "HeartbeatSubscribe";
                        case (int)0x5037BB5:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersFfc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xE62C631D), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0xB35711F, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5994467A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5037BB5, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain), (int)0x3D8DB3AB), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasEccComponentCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x3D8DB3AB:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x716A51BD:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentParameters)arguments[0]);
                        case (int)0x7380A12A:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xFF52E5BA):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>)arguments[0]);
                            return null;
                        case (int)0x3D181D60:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x3D8DB3AB;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain
    {
        OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x3D8DB3AB;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasEccComponentCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x3D8DB3AB;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x3D8DB3AB:
                {
                    switch (methodId)
                    {
                        case (int)0x716A51BD:
                            return "BeginWorkAsync";
                        case (int)0x7380A12A:
                            return "InitialSubscribe";
                        case unchecked((int)0xFF52E5BA):
                            return "HeartbeatSubscribe";
                        case (int)0x3D181D60:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x716A51BD, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7380A12A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xFF52E5BA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3D181D60, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain), unchecked((int)0xD9C21431)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD9C21431):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x29B5C78A:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredParameters)arguments[0]);
                        case unchecked((int)0xCDD2B52E):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xACBD528B):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x8A633B82):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD9C21431);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain
    {
        OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD9C21431);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasEccComponentCompleteDeferredCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD9C21431);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD9C21431):
                {
                    switch (methodId)
                    {
                        case (int)0x29B5C78A:
                            return "BeginWorkAsync";
                        case unchecked((int)0xCDD2B52E):
                            return "InitialSubscribe";
                        case unchecked((int)0xACBD528B):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x8A633B82):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x29B5C78A, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCDD2B52E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xACBD528B), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8A633B82), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain), unchecked((int)0x9140B6BF)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasValEccCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x9140B6BF):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xF5243F46):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersEcc)arguments[0]);
                        case unchecked((int)0xE3639566):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>)arguments[0]);
                            return null;
                        case unchecked((int)0xC73EB558):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>)arguments[0]);
                            return null;
                        case (int)0x47F05635:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x9140B6BF);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasValEccCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain
    {
        OrleansCodeGenOracleObserverKasValEccCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasValEccCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasValEccCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x9140B6BF);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasValEccCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x9140B6BF);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x9140B6BF):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xF5243F46):
                            return "BeginWorkAsync";
                        case unchecked((int)0xE3639566):
                            return "InitialSubscribe";
                        case unchecked((int)0xC73EB558):
                            return "HeartbeatSubscribe";
                        case (int)0x47F05635:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersEcc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xF5243F46), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE3639566), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC73EB558), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x47F05635, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain), (int)0x4948A721), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasValFfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x4948A721:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xD5B8BAD5):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersFfc)arguments[0]);
                        case (int)0x1D1D1E46:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>)arguments[0]);
                            return null;
                        case (int)0x3ECED656:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xEDBC9634):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x4948A721;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasValFfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain
    {
        OrleansCodeGenOracleObserverKasValFfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasValFfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasValFfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x4948A721;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasValFfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x4948A721;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x4948A721:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xD5B8BAD5):
                            return "BeginWorkAsync";
                        case (int)0x1D1D1E46:
                            return "InitialSubscribe";
                        case (int)0x3ECED656:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xEDBC9634):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersFfc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xD5B8BAD5), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1D1D1E46, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3ECED656, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEDBC9634), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain), unchecked((int)0xAFB5C94A)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasAftGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xAFB5C94A):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x689B89D7:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftParameters)arguments[0]);
                        case unchecked((int)0xD766671F):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xF2ACD8F5):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>)arguments[0]);
                            return null;
                        case (int)0x2FAE88A9:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xAFB5C94A);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain))]
    internal class OrleansCodeGenObserverKasAftGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain
    {
        OrleansCodeGenObserverKasAftGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasAftGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasAftGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xAFB5C94A);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasAftGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xAFB5C94A);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xAFB5C94A):
                {
                    switch (methodId)
                    {
                        case (int)0x689B89D7:
                            return "BeginWorkAsync";
                        case unchecked((int)0xD766671F):
                            return "InitialSubscribe";
                        case unchecked((int)0xF2ACD8F5):
                            return "HeartbeatSubscribe";
                        case (int)0x2FAE88A9:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x689B89D7, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD766671F), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF2ACD8F5), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2FAE88A9, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain), (int)0x6BF9844C), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasCompleteDeferredAftGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x6BF9844C:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x3E682677:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftDeferredParameters)arguments[0]);
                        case unchecked((int)0xAC6A541A):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x8410187:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x2C7737BA:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x6BF9844C;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain))]
    internal class OrleansCodeGenObserverKasCompleteDeferredAftGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain
    {
        OrleansCodeGenObserverKasCompleteDeferredAftGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasCompleteDeferredAftGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasCompleteDeferredAftGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x6BF9844C;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasCompleteDeferredAftGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x6BF9844C;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x6BF9844C:
                {
                    switch (methodId)
                    {
                        case (int)0x3E682677:
                            return "BeginWorkAsync";
                        case unchecked((int)0xAC6A541A):
                            return "InitialSubscribe";
                        case (int)0x8410187:
                            return "HeartbeatSubscribe";
                        case (int)0x2C7737BA:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftDeferredParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x3E682677, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAC6A541A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x8410187, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2C7737BA, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain), unchecked((int)0x86F7A9CC)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasSscAftGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x86F7A9CC):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain)grain);
                    switch (methodId)
                    {
                        case (int)0xFF557EF:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftParameters)arguments[0]);
                        case unchecked((int)0x96BB47DB):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA05BBFA5):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>)arguments[0]);
                            return null;
                        case (int)0x5334511C:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x86F7A9CC);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain))]
    internal class OrleansCodeGenObserverKasSscAftGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain
    {
        OrleansCodeGenObserverKasSscAftGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasSscAftGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasSscAftGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x86F7A9CC);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasSscAftGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x86F7A9CC);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x86F7A9CC):
                {
                    switch (methodId)
                    {
                        case (int)0xFF557EF:
                            return "BeginWorkAsync";
                        case unchecked((int)0x96BB47DB):
                            return "InitialSubscribe";
                        case unchecked((int)0xA05BBFA5):
                            return "HeartbeatSubscribe";
                        case (int)0x5334511C:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0xFF557EF, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x96BB47DB), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA05BBFA5), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5334511C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain), (int)0x3E0BCD2C), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasSscCompleteDeferredAftGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x3E0BCD2C:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x71BD5D44:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftDeferredParameters)arguments[0]);
                        case (int)0x52A2F234:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x95018F33):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x460F3435:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x3E0BCD2C;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain))]
    internal class OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain
    {
        OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x3E0BCD2C;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasSscCompleteDeferredAftGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x3E0BCD2C;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x3E0BCD2C:
                {
                    switch (methodId)
                    {
                        case (int)0x71BD5D44:
                            return "BeginWorkAsync";
                        case (int)0x52A2F234:
                            return "InitialSubscribe";
                        case unchecked((int)0x95018F33):
                            return "HeartbeatSubscribe";
                        case (int)0x460F3435:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftDeferredParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x71BD5D44, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x52A2F234, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x95018F33), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x460F3435, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain), (int)0x5D897992), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasSscValGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x5D897992:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x421EC474:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscValParameters)arguments[0]);
                        case (int)0x66628772:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xDFE3B5A7):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC38862F1):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x5D897992;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain))]
    internal class OrleansCodeGenObserverKasSscValGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain
    {
        OrleansCodeGenObserverKasSscValGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasSscValGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasSscValGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x5D897992;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasSscValGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x5D897992;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x5D897992:
                {
                    switch (methodId)
                    {
                        case (int)0x421EC474:
                            return "BeginWorkAsync";
                        case (int)0x66628772:
                            return "InitialSubscribe";
                        case unchecked((int)0xDFE3B5A7):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xC38862F1):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscValParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x421EC474, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x66628772, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xDFE3B5A7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC38862F1), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain), unchecked((int)0xDC7D9BC8)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasValGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xDC7D9BC8):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x31EB3FE3:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasValParameters)arguments[0]);
                        case (int)0x31161551:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>)arguments[0]);
                            return null;
                        case (int)0x57336A7A:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xBE82C864):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xDC7D9BC8);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain))]
    internal class OrleansCodeGenObserverKasValGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain
    {
        OrleansCodeGenObserverKasValGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasValGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasValGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xDC7D9BC8);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasValGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xDC7D9BC8);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xDC7D9BC8):
                {
                    switch (methodId)
                    {
                        case (int)0x31EB3FE3:
                            return "BeginWorkAsync";
                        case (int)0x31161551:
                            return "InitialSubscribe";
                        case (int)0x57336A7A:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xBE82C864):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasValParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x31EB3FE3, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x31161551, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x57336A7A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBE82C864), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain), (int)0x1FA7A291), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasSscAftIfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x1FA7A291:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x1536E1EA:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftParametersIfc)arguments[0]);
                        case unchecked((int)0xD9DD250B):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xAD1A79EE):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xC41A7848):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x1FA7A291;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain))]
    internal class OrleansCodeGenObserverKasSscAftIfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain
    {
        OrleansCodeGenObserverKasSscAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasSscAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasSscAftIfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x1FA7A291;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasSscAftIfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x1FA7A291;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x1FA7A291:
                {
                    switch (methodId)
                    {
                        case (int)0x1536E1EA:
                            return "BeginWorkAsync";
                        case unchecked((int)0xD9DD250B):
                            return "InitialSubscribe";
                        case unchecked((int)0xAD1A79EE):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xC41A7848):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftParametersIfc param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x1536E1EA, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD9DD250B), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAD1A79EE), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC41A7848), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain), (int)0x3A530D4F), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x3A530D4F:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x8D5175A0):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftDeferredParametersIfc)arguments[0]);
                        case unchecked((int)0x87C41A4A):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xB09A4541):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xE22279EA):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x3A530D4F;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain))]
    internal class OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain
    {
        OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x3A530D4F;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasSscCompleteDeferredAftIfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x3A530D4F;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x3A530D4F:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x8D5175A0):
                            return "BeginWorkAsync";
                        case unchecked((int)0x87C41A4A):
                            return "InitialSubscribe";
                        case unchecked((int)0xB09A4541):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xE22279EA):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftDeferredParametersIfc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x8D5175A0), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x87C41A4A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB09A4541), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE22279EA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain), unchecked((int)0xB0E1AE1B)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasSscValIfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xB0E1AE1B):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x978FD84F):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscValParametersIfc)arguments[0]);
                        case (int)0x24CD902E:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>)arguments[0]);
                            return null;
                        case (int)0x79544A57:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>)arguments[0]);
                            return null;
                        case (int)0x7776EA44:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xB0E1AE1B);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain))]
    internal class OrleansCodeGenObserverKasSscValIfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain
    {
        OrleansCodeGenObserverKasSscValIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasSscValIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasSscValIfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xB0E1AE1B);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasSscValIfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xB0E1AE1B);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xB0E1AE1B):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x978FD84F):
                            return "BeginWorkAsync";
                        case (int)0x24CD902E:
                            return "InitialSubscribe";
                        case (int)0x79544A57:
                            return "HeartbeatSubscribe";
                        case (int)0x7776EA44:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscValParametersIfc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x978FD84F), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x24CD902E, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x79544A57, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7776EA44, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain), (int)0x12E900A6), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasAftIfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x12E900A6:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x283003DF:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftParametersIfc)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair)arguments[1], (global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair)arguments[2]);
                        case unchecked((int)0x824D154E):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>)arguments[0]);
                            return null;
                        case unchecked((int)0xBEA9BC46):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>)arguments[0]);
                            return null;
                        case (int)0x479B9A2A:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x12E900A6;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain
    {
        OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x12E900A6;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasAftIfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x12E900A6;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x12E900A6:
                {
                    switch (methodId)
                    {
                        case (int)0x283003DF:
                            return "BeginWorkAsync";
                        case unchecked((int)0x824D154E):
                            return "InitialSubscribe";
                        case unchecked((int)0xBEA9BC46):
                            return "HeartbeatSubscribe";
                        case (int)0x479B9A2A:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftParametersIfc param0, global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair serverKeyPair1, global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair iutKeyPair2)
        {
            return base.InvokeMethodAsync<bool>((int)0x283003DF, new object[]{param0, serverKeyPair1, iutKeyPair2});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x824D154E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBEA9BC46), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x479B9A2A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain), unchecked((int)0xD9749FDC)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD9749FDC):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xCF298A8C):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftDeferredParametersIfc)arguments[0]);
                        case (int)0x6A4D8E3D:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case (int)0x6C4A6C10:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x991623A1):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD9749FDC);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain
    {
        OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD9749FDC);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasCompleteDeferredAftIfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD9749FDC);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD9749FDC):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xCF298A8C):
                            return "BeginWorkAsync";
                        case (int)0x6A4D8E3D:
                            return "InitialSubscribe";
                        case (int)0x6C4A6C10:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x991623A1):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftDeferredParametersIfc param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xCF298A8C), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6A4D8E3D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6C4A6C10, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x991623A1), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain), (int)0x63F377C5), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKasValIfcCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x63F377C5:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x803E26ED):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasValParametersIfc)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair)arguments[1], (global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair)arguments[2]);
                        case unchecked((int)0x87E6D01D):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>)arguments[0]);
                            return null;
                        case (int)0x3404DF40:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>)arguments[0]);
                            return null;
                        case unchecked((int)0x94A5A688):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x63F377C5;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain))]
    internal class OrleansCodeGenOracleObserverKasValIfcCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain
    {
        OrleansCodeGenOracleObserverKasValIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKasValIfcCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKasValIfcCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x63F377C5;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKasValIfcCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x63F377C5;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x63F377C5:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x803E26ED):
                            return "BeginWorkAsync";
                        case unchecked((int)0x87E6D01D):
                            return "InitialSubscribe";
                        case (int)0x3404DF40:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x94A5A688):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasValParametersIfc param0, global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair serverKeyPair1, global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair iutKeyPair2)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x803E26ED), new object[]{param0, serverKeyPair1, iutKeyPair2});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x87E6D01D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3404DF40, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x94A5A688), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain), (int)0x56C41321), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfAftHkdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x56C41321:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xAEEEC6A8):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfParameters)arguments[0]);
                        case unchecked((int)0xCABDCACC):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC7F162E8):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC7BC8227):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x56C41321;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain
    {
        OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x56C41321;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfAftHkdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x56C41321;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x56C41321:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xAEEEC6A8):
                            return "BeginWorkAsync";
                        case unchecked((int)0xCABDCACC):
                            return "InitialSubscribe";
                        case unchecked((int)0xC7F162E8):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xC7BC8227):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xAEEEC6A8), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCABDCACC), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC7F162E8), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC7BC8227), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain), (int)0x772085CC), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfAftOneStepCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x772085CC:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x635EF1A7:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepParameters)arguments[0]);
                        case unchecked((int)0x8D3DCBF7):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xF3359220):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92F65ABA):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x772085CC;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain
    {
        OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x772085CC;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfAftOneStepCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x772085CC;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x772085CC:
                {
                    switch (methodId)
                    {
                        case (int)0x635EF1A7:
                            return "BeginWorkAsync";
                        case unchecked((int)0x8D3DCBF7):
                            return "InitialSubscribe";
                        case unchecked((int)0xF3359220):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92F65ABA):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x635EF1A7, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8D3DCBF7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF3359220), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92F65ABA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain), unchecked((int)0xEF73CF4F)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xEF73CF4F):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x48100F38:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterParameters)arguments[0]);
                        case (int)0x52D0B4B:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xDCACFB12):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>)arguments[0]);
                            return null;
                        case (int)0x3D5394F0:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xEF73CF4F);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain
    {
        OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xEF73CF4F);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfAftOneStepNoCounterCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xEF73CF4F);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xEF73CF4F):
                {
                    switch (methodId)
                    {
                        case (int)0x48100F38:
                            return "BeginWorkAsync";
                        case (int)0x52D0B4B:
                            return "InitialSubscribe";
                        case unchecked((int)0xDCACFB12):
                            return "HeartbeatSubscribe";
                        case (int)0x3D5394F0:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x48100F38, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x52D0B4B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xDCACFB12), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3D5394F0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain), unchecked((int)0xED194D72)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xED194D72):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7CE89049:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepParameters)arguments[0]);
                        case (int)0x3DF19BE:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xB8B5C7C9):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>)arguments[0]);
                            return null;
                        case (int)0x30687C15:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xED194D72);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain
    {
        OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xED194D72);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfAftTwoStepCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xED194D72);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xED194D72):
                {
                    switch (methodId)
                    {
                        case (int)0x7CE89049:
                            return "BeginWorkAsync";
                        case (int)0x3DF19BE:
                            return "InitialSubscribe";
                        case unchecked((int)0xB8B5C7C9):
                            return "HeartbeatSubscribe";
                        case (int)0x30687C15:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7CE89049, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3DF19BE, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB8B5C7C9), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x30687C15, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain), (int)0x1C29A655), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfValHkdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x1C29A655:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x3D864BE1:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValHkdfParameters)arguments[0]);
                        case unchecked((int)0x9F59C833):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xBA8BF2E4):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>)arguments[0]);
                            return null;
                        case (int)0x7C06425:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x1C29A655;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain
    {
        OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x1C29A655;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfValHkdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x1C29A655;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x1C29A655:
                {
                    switch (methodId)
                    {
                        case (int)0x3D864BE1:
                            return "BeginWorkAsync";
                        case unchecked((int)0x9F59C833):
                            return "InitialSubscribe";
                        case unchecked((int)0xBA8BF2E4):
                            return "HeartbeatSubscribe";
                        case (int)0x7C06425:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValHkdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x3D864BE1, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x9F59C833), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xBA8BF2E4), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7C06425, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain), unchecked((int)0xC333F376)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfValOneStepCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC333F376):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6FE2A54B:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepParameters)arguments[0]);
                        case unchecked((int)0x97BE7224):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC5A78CA1):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>)arguments[0]);
                            return null;
                        case (int)0x57F5E670:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC333F376);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain
    {
        OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC333F376);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfValOneStepCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC333F376);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC333F376):
                {
                    switch (methodId)
                    {
                        case (int)0x6FE2A54B:
                            return "BeginWorkAsync";
                        case unchecked((int)0x97BE7224):
                            return "InitialSubscribe";
                        case unchecked((int)0xC5A78CA1):
                            return "HeartbeatSubscribe";
                        case (int)0x57F5E670:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6FE2A54B, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x97BE7224), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC5A78CA1), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x57F5E670, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain), (int)0x45D7A2A7), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x45D7A2A7:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x897BF321):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterParameters)arguments[0]);
                        case (int)0x41D891FE:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>)arguments[0]);
                            return null;
                        case (int)0x659C7940:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>)arguments[0]);
                            return null;
                        case (int)0x166276C3:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x45D7A2A7;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain
    {
        OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x45D7A2A7;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfValOneStepNoCounterCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x45D7A2A7;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x45D7A2A7:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x897BF321):
                            return "BeginWorkAsync";
                        case (int)0x41D891FE:
                            return "InitialSubscribe";
                        case (int)0x659C7940:
                            return "HeartbeatSubscribe";
                        case (int)0x166276C3:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x897BF321), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x41D891FE, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x659C7940, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x166276C3, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain), (int)0x66CDEF87), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverKasKdfValTwoStepCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x66CDEF87:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x5575B481:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepParameters)arguments[0]);
                        case unchecked((int)0xEB818C9F):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>)arguments[0]);
                            return null;
                        case (int)0x452E835C:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>)arguments[0]);
                            return null;
                        case (int)0x5AD06863:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x66CDEF87;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain))]
    internal class OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain
    {
        OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x66CDEF87;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverKasKdfValTwoStepCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x66CDEF87;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x66CDEF87:
                {
                    switch (methodId)
                    {
                        case (int)0x5575B481:
                            return "BeginWorkAsync";
                        case unchecked((int)0xEB818C9F):
                            return "InitialSubscribe";
                        case (int)0x452E835C:
                            return "HeartbeatSubscribe";
                        case (int)0x5AD06863:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x5575B481, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEB818C9F), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x452E835C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5AD06863, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain), unchecked((int)0x84AE1ED1)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverTlsKdfv13GrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x84AE1ED1):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xD2ED9C1A):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfv13Parameters)arguments[0]);
                        case unchecked((int)0xF8F3F791):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>)arguments[0]);
                            return null;
                        case unchecked((int)0xB5DE3DA8):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>)arguments[0]);
                            return null;
                        case (int)0x4E56CA27:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x84AE1ED1);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain))]
    internal class OrleansCodeGenObserverTlsKdfv13GrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain
    {
        OrleansCodeGenObserverTlsKdfv13GrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverTlsKdfv13GrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverTlsKdfv13GrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x84AE1ED1);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverTlsKdfv13Grain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x84AE1ED1);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x84AE1ED1):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xD2ED9C1A):
                            return "BeginWorkAsync";
                        case unchecked((int)0xF8F3F791):
                            return "InitialSubscribe";
                        case unchecked((int)0xB5DE3DA8):
                            return "HeartbeatSubscribe";
                        case (int)0x4E56CA27:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfv13Parameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xD2ED9C1A), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF8F3F791), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB5DE3DA8), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4E56CA27, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain), (int)0x1446601A), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x1446601A:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x8DBA8381):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX942Parameters)arguments[0]);
                        case (int)0x6A63E707:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xE5A749A3):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xB05A382D):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x1446601A;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain
    {
        OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x1446601A;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAnsiX942KdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x1446601A;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x1446601A:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x8DBA8381):
                            return "BeginWorkAsync";
                        case (int)0x6A63E707:
                            return "InitialSubscribe";
                        case unchecked((int)0xE5A749A3):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xB05A382D):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX942Parameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x8DBA8381), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6A63E707, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE5A749A3), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB05A382D), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain), unchecked((int)0xC1781892)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC1781892):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xBB417701):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX963Parameters)arguments[0]);
                        case (int)0x19A5676:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>)arguments[0]);
                            return null;
                        case (int)0x54BFF2C5:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>)arguments[0]);
                            return null;
                        case (int)0x7B88B2B3:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC1781892);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain
    {
        OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC1781892);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverAnsiX963KdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC1781892);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC1781892):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xBB417701):
                            return "BeginWorkAsync";
                        case (int)0x19A5676:
                            return "InitialSubscribe";
                        case (int)0x54BFF2C5:
                            return "HeartbeatSubscribe";
                        case (int)0x7B88B2B3:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX963Parameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xBB417701), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x19A5676, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x54BFF2C5, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7B88B2B3, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain), unchecked((int)0xEA52744A)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverHkdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xEA52744A):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x9C0317DA):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HkdfParameters)arguments[0]);
                        case unchecked((int)0xE26433B2):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>)arguments[0]);
                            return null;
                        case (int)0x351451CA:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>)arguments[0]);
                            return null;
                        case (int)0x4C1095FD:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xEA52744A);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverHkdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain
    {
        OrleansCodeGenOracleObserverHkdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverHkdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverHkdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xEA52744A);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverHkdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xEA52744A);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xEA52744A):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x9C0317DA):
                            return "BeginWorkAsync";
                        case unchecked((int)0xE26433B2):
                            return "InitialSubscribe";
                        case (int)0x351451CA:
                            return "HeartbeatSubscribe";
                        case (int)0x4C1095FD:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HkdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x9C0317DA), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE26433B2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x351451CA, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4C1095FD, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain), (int)0x9142503), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverIkeV1KdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x9142503:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xBC38666F):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV1KdfParameters)arguments[0]);
                        case (int)0x7314F23C:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xFC6389CA):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x983FA7F9):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x9142503;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain
    {
        OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x9142503;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverIkeV1KdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x9142503;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x9142503:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xBC38666F):
                            return "BeginWorkAsync";
                        case (int)0x7314F23C:
                            return "InitialSubscribe";
                        case unchecked((int)0xFC6389CA):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x983FA7F9):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV1KdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xBC38666F), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7314F23C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xFC6389CA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x983FA7F9), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain), (int)0xC72294B), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverIkeV2KdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0xC72294B:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x931B81EC):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV2KdfParameters)arguments[0]);
                        case (int)0x6C734821:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xF379368A):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xE2959954):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0xC72294B;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain
    {
        OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0xC72294B;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverIkeV2KdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0xC72294B;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0xC72294B:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x931B81EC):
                            return "BeginWorkAsync";
                        case (int)0x6C734821:
                            return "InitialSubscribe";
                        case unchecked((int)0xF379368A):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xE2959954):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV2KdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x931B81EC), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6C734821, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF379368A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE2959954), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain), unchecked((int)0xD1AE8742)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD1AE8742):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x922329A2):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KdfParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult)arguments[1]);
                        case unchecked((int)0xB2036679):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>)arguments[0]);
                            return null;
                        case (int)0x564C855F:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xAB73D174):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD1AE8742);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain))]
    internal class OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain
    {
        OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD1AE8742);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKdfCompleteDeferredCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD1AE8742);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD1AE8742):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x922329A2):
                            return "BeginWorkAsync";
                        case unchecked((int)0xB2036679):
                            return "InitialSubscribe";
                        case (int)0x564C855F:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xAB73D174):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KdfParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x922329A2), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB2036679), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x564C855F, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAB73D174), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain), unchecked((int)0xEBD14374)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKdfDeferredCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xEBD14374):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xE907AE1C):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KdfParameters)arguments[0]);
                        case unchecked((int)0xB2036679):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>)arguments[0]);
                            return null;
                        case (int)0x564C855F:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xAB73D174):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xEBD14374);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain))]
    internal class OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain
    {
        OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xEBD14374);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKdfDeferredCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xEBD14374);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xEBD14374):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xE907AE1C):
                            return "BeginWorkAsync";
                        case unchecked((int)0xB2036679):
                            return "InitialSubscribe";
                        case (int)0x564C855F:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xAB73D174):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xE907AE1C), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB2036679), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x564C855F, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAB73D174), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain), (int)0x9F24D8F), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverPbKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x9F24D8F:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x7C85B4D3:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.PbKdfParameters)arguments[0]);
                        case unchecked((int)0xDE04FE48):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xCE130A98):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>)arguments[0]);
                            return null;
                        case (int)0x18D4107B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x9F24D8F;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverPbKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain
    {
        OrleansCodeGenOracleObserverPbKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverPbKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverPbKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x9F24D8F;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverPbKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x9F24D8F;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x9F24D8F:
                {
                    switch (methodId)
                    {
                        case (int)0x7C85B4D3:
                            return "BeginWorkAsync";
                        case unchecked((int)0xDE04FE48):
                            return "InitialSubscribe";
                        case unchecked((int)0xCE130A98):
                            return "HeartbeatSubscribe";
                        case (int)0x18D4107B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.PbKdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x7C85B4D3, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xDE04FE48), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCE130A98), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x18D4107B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain), (int)0x20146A8B), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverSnmpKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x20146A8B:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xA7108F53):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SnmpKdfParameters)arguments[0]);
                        case (int)0x60C3160B:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xEB63CC27):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>)arguments[0]);
                            return null;
                        case (int)0x49E63ABC:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x20146A8B;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain
    {
        OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x20146A8B;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverSnmpKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x20146A8B;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x20146A8B:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xA7108F53):
                            return "BeginWorkAsync";
                        case (int)0x60C3160B:
                            return "InitialSubscribe";
                        case unchecked((int)0xEB63CC27):
                            return "HeartbeatSubscribe";
                        case (int)0x49E63ABC:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SnmpKdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xA7108F53), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x60C3160B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEB63CC27), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x49E63ABC, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain), (int)0x4A55DCAD), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverSrtpKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x4A55DCAD:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x177E0327:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SrtpKdfParameters)arguments[0]);
                        case (int)0x68AE4D76:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>)arguments[0]);
                            return null;
                        case (int)0x22A08821:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xF117872A):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x4A55DCAD;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain
    {
        OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x4A55DCAD;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverSrtpKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x4A55DCAD;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x4A55DCAD:
                {
                    switch (methodId)
                    {
                        case (int)0x177E0327:
                            return "BeginWorkAsync";
                        case (int)0x68AE4D76:
                            return "InitialSubscribe";
                        case (int)0x22A08821:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xF117872A):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SrtpKdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x177E0327, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x68AE4D76, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x22A08821, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF117872A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain), unchecked((int)0xEE11E54F)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverSshKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xEE11E54F):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xDE4FB9AB):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SshKdfParameters)arguments[0]);
                        case unchecked((int)0xCA10CAE2):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>)arguments[0]);
                            return null;
                        case (int)0x215D538A:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>)arguments[0]);
                            return null;
                        case (int)0x140AF821:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xEE11E54F);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverSshKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain
    {
        OrleansCodeGenOracleObserverSshKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverSshKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverSshKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xEE11E54F);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverSshKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xEE11E54F);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xEE11E54F):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xDE4FB9AB):
                            return "BeginWorkAsync";
                        case unchecked((int)0xCA10CAE2):
                            return "InitialSubscribe";
                        case (int)0x215D538A:
                            return "HeartbeatSubscribe";
                        case (int)0x140AF821:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SshKdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xDE4FB9AB), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCA10CAE2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x215D538A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x140AF821, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain), unchecked((int)0xD5B6FD80)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD5B6FD80):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x88A49119):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfParameters)arguments[0]);
                        case (int)0x271A1A46:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC0A6A985):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xE7E9C053):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD5B6FD80);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain
    {
        OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD5B6FD80);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTlsEmsKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD5B6FD80);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD5B6FD80):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x88A49119):
                            return "BeginWorkAsync";
                        case (int)0x271A1A46:
                            return "InitialSubscribe";
                        case unchecked((int)0xC0A6A985):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xE7E9C053):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x88A49119), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x271A1A46, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC0A6A985), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE7E9C053), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain), (int)0x706918CE), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTlsKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x706918CE:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x88A49119):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfParameters)arguments[0]);
                        case (int)0x271A1A46:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC0A6A985):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xE7E9C053):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x706918CE;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverTlsKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain
    {
        OrleansCodeGenOracleObserverTlsKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTlsKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTlsKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x706918CE;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTlsKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x706918CE;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x706918CE:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x88A49119):
                            return "BeginWorkAsync";
                        case (int)0x271A1A46:
                            return "InitialSubscribe";
                        case unchecked((int)0xC0A6A985):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xE7E9C053):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x88A49119), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x271A1A46, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC0A6A985), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE7E9C053), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain), unchecked((int)0xE92DCDB5)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTpmKdfCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xE92DCDB5):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xBCC98FA8):
                            return await casted.BeginWorkAsync();
                        case (int)0x6B474753:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xFFFAC4EA):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>)arguments[0]);
                            return null;
                        case (int)0x78BA817B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xE92DCDB5);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain))]
    internal class OrleansCodeGenOracleObserverTpmKdfCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain
    {
        OrleansCodeGenOracleObserverTpmKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTpmKdfCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTpmKdfCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xE92DCDB5);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTpmKdfCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xE92DCDB5);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xE92DCDB5):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xBCC98FA8):
                            return "BeginWorkAsync";
                        case (int)0x6B474753:
                            return "InitialSubscribe";
                        case unchecked((int)0xFFFAC4EA):
                            return "HeartbeatSubscribe";
                        case (int)0x78BA817B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain.BeginWorkAsync()
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xBCC98FA8), null);
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6B474753, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xFFFAC4EA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x78BA817B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain), unchecked((int)0xD63AF3B4)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKeyWrapCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xD63AF3B4):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x5B24F263:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KeyWrapParameters)arguments[0]);
                        case (int)0x4B6A742E:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>)arguments[0]);
                            return null;
                        case (int)0x7AA75F54:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA1FE2483):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xD63AF3B4);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain))]
    internal class OrleansCodeGenOracleObserverKeyWrapCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain
    {
        OrleansCodeGenOracleObserverKeyWrapCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKeyWrapCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKeyWrapCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xD63AF3B4);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKeyWrapCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xD63AF3B4);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xD63AF3B4):
                {
                    switch (methodId)
                    {
                        case (int)0x5B24F263:
                            return "BeginWorkAsync";
                        case (int)0x4B6A742E:
                            return "InitialSubscribe";
                        case (int)0x7AA75F54:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xA1FE2483):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KeyWrapParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x5B24F263, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4B6A742E, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7AA75F54, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA1FE2483), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain), (int)0x676DE841), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverLmsKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x676DE841:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x380FCE03:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsKeyParameters)arguments[0]);
                        case unchecked((int)0xD2359317):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA092C7ED):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>)arguments[0]);
                            return null;
                        case (int)0x4DEF8C00:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x676DE841;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverLmsKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain
    {
        OrleansCodeGenOracleObserverLmsKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverLmsKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverLmsKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x676DE841;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverLmsKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x676DE841;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x676DE841:
                {
                    switch (methodId)
                    {
                        case (int)0x380FCE03:
                            return "BeginWorkAsync";
                        case unchecked((int)0xD2359317):
                            return "InitialSubscribe";
                        case unchecked((int)0xA092C7ED):
                            return "HeartbeatSubscribe";
                        case (int)0x4DEF8C00:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsKeyParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x380FCE03, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD2359317), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA092C7ED), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x4DEF8C00, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain), unchecked((int)0xF2AF91BD)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverLmsMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xF2AF91BD):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6F1AAD42:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters)arguments[0]);
                        case unchecked((int)0x8CE4AA58):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x7300EBAA:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x5AB542DF:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xF2AF91BD);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverLmsMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain
    {
        OrleansCodeGenOracleObserverLmsMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverLmsMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverLmsMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xF2AF91BD);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverLmsMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xF2AF91BD);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xF2AF91BD):
                {
                    switch (methodId)
                    {
                        case (int)0x6F1AAD42:
                            return "BeginWorkAsync";
                        case unchecked((int)0x8CE4AA58):
                            return "InitialSubscribe";
                        case (int)0x7300EBAA:
                            return "HeartbeatSubscribe";
                        case (int)0x5AB542DF:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6F1AAD42, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x8CE4AA58), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7300EBAA, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x5AB542DF, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain), (int)0x79F12DB), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverLmsSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x79F12DB:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x6F1AAD42:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters)arguments[0]);
                        case unchecked((int)0xAFB2E16F):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC4AFF892):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x6CD6E9B7:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x79F12DB;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x79F12DB;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverLmsSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x79F12DB;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x79F12DB:
                {
                    switch (methodId)
                    {
                        case (int)0x6F1AAD42:
                            return "BeginWorkAsync";
                        case unchecked((int)0xAFB2E16F):
                            return "InitialSubscribe";
                        case unchecked((int)0xC4AFF892):
                            return "HeartbeatSubscribe";
                        case (int)0x6CD6E9B7:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x6F1AAD42, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAFB2E16F), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC4AFF892), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6CD6E9B7, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain), unchecked((int)0xDA2810B7)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xDA2810B7):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xAE23D37B):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult)arguments[1], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult)arguments[2]);
                        case (int)0x55A5CFCB:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x3A492EE6:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x649183D1:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xDA2810B7);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain
    {
        OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xDA2810B7);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverLmsVerifySignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xDA2810B7);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xDA2810B7):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xAE23D37B):
                            return "BeginWorkAsync";
                        case (int)0x55A5CFCB:
                            return "InitialSubscribe";
                        case (int)0x3A492EE6:
                            return "HeartbeatSubscribe";
                        case (int)0x649183D1:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult key1, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult badKey2)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xAE23D37B), new object[]{param0, key1, badKey2});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x55A5CFCB, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3A492EE6, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x649183D1, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult>>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain), unchecked((int)0xAAB606C6)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverCmacCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xAAB606C6):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xD8ECE5F4):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CmacParameters)arguments[0]);
                        case unchecked((int)0xD04DA7AF):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>)arguments[0]);
                            return null;
                        case (int)0x269F45B:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>)arguments[0]);
                            return null;
                        case (int)0x792E4BAC:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xAAB606C6);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain))]
    internal class OrleansCodeGenOracleObserverCmacCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain
    {
        OrleansCodeGenOracleObserverCmacCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverCmacCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverCmacCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xAAB606C6);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverCmacCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xAAB606C6);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xAAB606C6):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xD8ECE5F4):
                            return "BeginWorkAsync";
                        case unchecked((int)0xD04DA7AF):
                            return "InitialSubscribe";
                        case (int)0x269F45B:
                            return "HeartbeatSubscribe";
                        case (int)0x792E4BAC:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CmacParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xD8ECE5F4), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD04DA7AF), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x269F45B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x792E4BAC, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain), unchecked((int)0xE9DE431E)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverHmacCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xE9DE431E):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xFA8A96C9):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HmacParameters)arguments[0]);
                        case unchecked((int)0xD04DA7AF):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>)arguments[0]);
                            return null;
                        case (int)0x269F45B:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>)arguments[0]);
                            return null;
                        case (int)0x792E4BAC:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xE9DE431E);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain))]
    internal class OrleansCodeGenOracleObserverHmacCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain
    {
        OrleansCodeGenOracleObserverHmacCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverHmacCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverHmacCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xE9DE431E);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverHmacCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xE9DE431E);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xE9DE431E):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xFA8A96C9):
                            return "BeginWorkAsync";
                        case unchecked((int)0xD04DA7AF):
                            return "InitialSubscribe";
                        case (int)0x269F45B:
                            return "HeartbeatSubscribe";
                        case (int)0x792E4BAC:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HmacParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xFA8A96C9), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD04DA7AF), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x269F45B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x792E4BAC, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain), (int)0x7EACA2C3), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverKmacCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x7EACA2C3:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x5C93657:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KmacParameters)arguments[0]);
                        case (int)0x734B6333:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>)arguments[0]);
                            return null;
                        case (int)0x7939411C:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>)arguments[0]);
                            return null;
                        case (int)0x6580C7E9:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x7EACA2C3;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain))]
    internal class OrleansCodeGenOracleObserverKmacCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain
    {
        OrleansCodeGenOracleObserverKmacCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverKmacCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverKmacCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x7EACA2C3;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverKmacCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x7EACA2C3;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x7EACA2C3:
                {
                    switch (methodId)
                    {
                        case (int)0x5C93657:
                            return "BeginWorkAsync";
                        case (int)0x734B6333:
                            return "InitialSubscribe";
                        case (int)0x7939411C:
                            return "HeartbeatSubscribe";
                        case (int)0x6580C7E9:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KmacParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x5C93657, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x734B6333, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7939411C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6580C7E9, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain), unchecked((int)0xABFAF23D)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xABFAF23D):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xD187FB0E):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult)arguments[1]);
                        case unchecked((int)0xEB35A7FB):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        case (int)0x309156A0:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xCB4276B2):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xABFAF23D);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain
    {
        OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xABFAF23D);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xABFAF23D);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xABFAF23D):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xD187FB0E):
                            return "BeginWorkAsync";
                        case unchecked((int)0xEB35A7FB):
                            return "InitialSubscribe";
                        case (int)0x309156A0:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xCB4276B2):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xD187FB0E), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEB35A7FB), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x309156A0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCB4276B2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain), (int)0x43303507), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x43303507:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x252EFD6D:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaKeyParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult)arguments[1]);
                        case unchecked((int)0xEBA516F8):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>)arguments[0]);
                            return null;
                        case (int)0x61189D6D:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92BC7F80):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x43303507;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain
    {
        OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x43303507;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaCompleteDeferredKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x43303507;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x43303507:
                {
                    switch (methodId)
                    {
                        case (int)0x252EFD6D:
                            return "BeginWorkAsync";
                        case unchecked((int)0xEBA516F8):
                            return "InitialSubscribe";
                        case (int)0x61189D6D:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92BC7F80):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaKeyParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>((int)0x252EFD6D, new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEBA516F8), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x61189D6D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92BC7F80), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain), (int)0x738C2EEE), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x738C2EEE:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xA9BCB71E):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult)arguments[1]);
                        case (int)0x6E946A1A:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x545F0F50:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x6DC76E6B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x738C2EEE;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x738C2EEE;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaCompleteDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x738C2EEE;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x738C2EEE:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xA9BCB71E):
                            return "BeginWorkAsync";
                        case (int)0x6E946A1A:
                            return "InitialSubscribe";
                        case (int)0x545F0F50:
                            return "HeartbeatSubscribe";
                        case (int)0x6DC76E6B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xA9BCB71E), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6E946A1A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x545F0F50, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6DC76E6B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain), (int)0x65C848C7), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x65C848C7:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x1F785D9D:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrivateKeyModes)arguments[1]);
                        case unchecked((int)0xEBA516F8):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>)arguments[0]);
                            return null;
                        case (int)0x61189D6D:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>)arguments[0]);
                            return null;
                        case unchecked((int)0x92BC7F80):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x65C848C7;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain
    {
        OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x65C848C7;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaCompleteKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x65C848C7;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x65C848C7:
                {
                    switch (methodId)
                    {
                        case (int)0x1F785D9D:
                            return "BeginWorkAsync";
                        case unchecked((int)0xEBA516F8):
                            return "InitialSubscribe";
                        case (int)0x61189D6D:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0x92BC7F80):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult param0, global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrivateKeyModes keyMode1)
        {
            return base.InvokeMethodAsync<bool>((int)0x1F785D9D, new object[]{param0, keyMode1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEBA516F8), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x61189D6D, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x92BC7F80), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain), (int)0x65590817), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x65590817:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x2AF1D5DB:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyResult)arguments[1]);
                        case unchecked((int)0xEB35A7FB):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        case (int)0x309156A0:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xCB4276B2):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x65590817;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain
    {
        OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x65590817;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaDecryptionPrimitiveCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x65590817;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x65590817:
                {
                    switch (methodId)
                    {
                        case (int)0x2AF1D5DB:
                            return "BeginWorkAsync";
                        case unchecked((int)0xEB35A7FB):
                            return "InitialSubscribe";
                        case (int)0x309156A0:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xCB4276B2):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters param0, global::NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyResult passingKey1)
        {
            return base.InvokeMethodAsync<bool>((int)0x2AF1D5DB, new object[]{param0, passingKey1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEB35A7FB), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x309156A0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCB4276B2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain), unchecked((int)0x8FA2556A)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x8FA2556A):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x60D674BB:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters)arguments[0]);
                        case unchecked((int)0xEB35A7FB):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        case (int)0x309156A0:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xCB4276B2):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x8FA2556A);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain
    {
        OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x8FA2556A);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x8FA2556A);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x8FA2556A):
                {
                    switch (methodId)
                    {
                        case (int)0x60D674BB:
                            return "BeginWorkAsync";
                        case unchecked((int)0xEB35A7FB):
                            return "InitialSubscribe";
                        case (int)0x309156A0:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xCB4276B2):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x60D674BB, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEB35A7FB), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x309156A0, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xCB4276B2), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain), unchecked((int)0xCE29C97C)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xCE29C97C):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x34D03FB:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters)arguments[0]);
                        case (int)0x67D92E96:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x1A5F8C68:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xB6173BFA):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xCE29C97C);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xCE29C97C);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaDeferredSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xCE29C97C);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xCE29C97C):
                {
                    switch (methodId)
                    {
                        case (int)0x34D03FB:
                            return "BeginWorkAsync";
                        case (int)0x67D92E96:
                            return "InitialSubscribe";
                        case (int)0x1A5F8C68:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xB6173BFA):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x34D03FB, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x67D92E96, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1A5F8C68, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB6173BFA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain), unchecked((int)0xA6666C2C)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xA6666C2C):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0x8263D0ED):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaKeyParameters)arguments[0]);
                        case unchecked((int)0xAB14B56E):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xF536D831):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xE4EF1AFA):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xA6666C2C);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain
    {
        OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xA6666C2C);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaGeneratePrimesCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xA6666C2C);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xA6666C2C):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0x8263D0ED):
                            return "BeginWorkAsync";
                        case unchecked((int)0xAB14B56E):
                            return "InitialSubscribe";
                        case unchecked((int)0xF536D831):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xE4EF1AFA):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaKeyParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0x8263D0ED), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xAB14B56E), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xF536D831), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE4EF1AFA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain), (int)0x25F8A490), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaSignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x25F8A490:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x34D03FB:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters)arguments[0]);
                        case (int)0x67D92E96:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>)arguments[0]);
                            return null;
                        case (int)0x1A5F8C68:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xB6173BFA):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x25F8A490;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain
    {
        OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x25F8A490;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaSignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x25F8A490;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x25F8A490:
                {
                    switch (methodId)
                    {
                        case (int)0x34D03FB:
                            return "BeginWorkAsync";
                        case (int)0x67D92E96:
                            return "InitialSubscribe";
                        case (int)0x1A5F8C68:
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xB6173BFA):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x34D03FB, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x67D92E96, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1A5F8C68, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB6173BFA), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain), (int)0x20ED3284), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x20ED3284:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xBCEECECF):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignaturePrimitiveParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult)arguments[1]);
                        case (int)0x2A9790B4:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA472911A):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>)arguments[0]);
                            return null;
                        case (int)0x62858116:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x20ED3284;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain
    {
        OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x20ED3284;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaSignaturePrimitiveCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x20ED3284;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x20ED3284:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xBCEECECF):
                            return "BeginWorkAsync";
                        case (int)0x2A9790B4:
                            return "InitialSubscribe";
                        case unchecked((int)0xA472911A):
                            return "HeartbeatSubscribe";
                        case (int)0x62858116:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignaturePrimitiveParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult key1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xBCEECECF), new object[]{param0, key1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x2A9790B4, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA472911A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x62858116, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain), unchecked((int)0xB8F9CB6E)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xB8F9CB6E):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xFE786434):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult)arguments[0]);
                        case unchecked((int)0x9021FFE8):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>)arguments[0]);
                            return null;
                        case (int)0x21A18673:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>)arguments[0]);
                            return null;
                        case (int)0x41AFD26E:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xB8F9CB6E);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain
    {
        OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xB8F9CB6E);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaVerifyKeyCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xB8F9CB6E);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xB8F9CB6E):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xFE786434):
                            return "BeginWorkAsync";
                        case unchecked((int)0x9021FFE8):
                            return "InitialSubscribe";
                        case (int)0x21A18673:
                            return "HeartbeatSubscribe";
                        case (int)0x41AFD26E:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xFE786434), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0x9021FFE8), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x21A18673, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x41AFD26E, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult>>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain), unchecked((int)0xE8A4FA98)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xE8A4FA98):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x34D03FB:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters)arguments[0]);
                        case (int)0x6E946A1A:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x545F0F50:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>)arguments[0]);
                            return null;
                        case (int)0x6DC76E6B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xE8A4FA98);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain))]
    internal class OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain
    {
        OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xE8A4FA98);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverRsaVerifySignatureCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xE8A4FA98);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xE8A4FA98):
                {
                    switch (methodId)
                    {
                        case (int)0x34D03FB:
                            return "BeginWorkAsync";
                        case (int)0x6E946A1A:
                            return "InitialSubscribe";
                        case (int)0x545F0F50:
                            return "HeartbeatSubscribe";
                        case (int)0x6DC76E6B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x34D03FB, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6E946A1A, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x545F0F50, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6DC76E6B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult>>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain), (int)0x71F1C04), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenObserverSafePrimesKeyVerGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x71F1C04:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xC9D5A80E):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SafePrimesKeyVerParameters)arguments[0]);
                        case unchecked((int)0xE24893C7):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>)arguments[0]);
                            return null;
                        case (int)0x7752D93C:
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>)arguments[0]);
                            return null;
                        case (int)0x8C55ABE:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x71F1C04;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain))]
    internal class OrleansCodeGenObserverSafePrimesKeyVerGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain
    {
        OrleansCodeGenObserverSafePrimesKeyVerGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenObserverSafePrimesKeyVerGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenObserverSafePrimesKeyVerGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x71F1C04;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IObserverSafePrimesKeyVerGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x71F1C04;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x71F1C04:
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xC9D5A80E):
                            return "BeginWorkAsync";
                        case unchecked((int)0xE24893C7):
                            return "InitialSubscribe";
                        case (int)0x7752D93C:
                            return "HeartbeatSubscribe";
                        case (int)0x8C55ABE:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SafePrimesKeyVerParameters param0)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xC9D5A80E), new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xE24893C7), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x7752D93C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x8C55ABE, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult>>() : observer0});
        }
    }
}

namespace NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain), (int)0x5A57342A), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTdesCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x5A57342A:
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x723AFB58:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters)arguments[0]);
                        case (int)0x3AC32045:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA9217D1A):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        case (int)0x6C316D5B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x5A57342A;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain))]
    internal class OrleansCodeGenOracleObserverTdesCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain
    {
        OrleansCodeGenOracleObserverTdesCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTdesCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTdesCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x5A57342A;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTdesCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x5A57342A;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x5A57342A:
                {
                    switch (methodId)
                    {
                        case (int)0x723AFB58:
                            return "BeginWorkAsync";
                        case (int)0x3AC32045:
                            return "InitialSubscribe";
                        case unchecked((int)0xA9217D1A):
                            return "HeartbeatSubscribe";
                        case (int)0x6C316D5B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x723AFB58, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3AC32045, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA9217D1A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6C316D5B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain), unchecked((int)0xC7F25C76)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC7F25C76):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x23541F91:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters>)arguments[0]);
                        case (int)0x3AC32045:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA9217D1A):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        case (int)0x6C316D5B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC7F25C76);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain))]
    internal class OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain
    {
        OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC7F25C76);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTdesCompleteDeferredCounterCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC7F25C76);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC7F25C76):
                {
                    switch (methodId)
                    {
                        case (int)0x23541F91:
                            return "BeginWorkAsync";
                        case (int)0x3AC32045:
                            return "InitialSubscribe";
                        case unchecked((int)0xA9217D1A):
                            return "HeartbeatSubscribe";
                        case (int)0x6C316D5B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters> param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x23541F91, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3AC32045, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA9217D1A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6C316D5B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain), unchecked((int)0xC3B18B06)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xC3B18B06):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain)grain);
                    switch (methodId)
                    {
                        case unchecked((int)0xAF4F14C4):
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters)arguments[0], (global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult)arguments[1]);
                        case unchecked((int)0xB74BDFD9):
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xEFD50D1C):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xC213BC8B):
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xC3B18B06);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain))]
    internal class OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain
    {
        OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xC3B18B06);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTdesCounterExtractIvsCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xC3B18B06);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xC3B18B06):
                {
                    switch (methodId)
                    {
                        case unchecked((int)0xAF4F14C4):
                            return "BeginWorkAsync";
                        case unchecked((int)0xB74BDFD9):
                            return "InitialSubscribe";
                        case unchecked((int)0xEFD50D1C):
                            return "HeartbeatSubscribe";
                        case unchecked((int)0xC213BC8B):
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters param0, global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult fullParam1)
        {
            return base.InvokeMethodAsync<bool>(unchecked((int)0xAF4F14C4), new object[]{param0, fullParam1});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xB74BDFD9), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xEFD50D1C), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xC213BC8B), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain), unchecked((int)0x9C948DD5)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0x9C948DD5):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x23541F91:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters>)arguments[0]);
                        case (int)0x3AC32045:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        case unchecked((int)0xA9217D1A):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        case (int)0x6C316D5B:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0x9C948DD5);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain))]
    internal class OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain
    {
        OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0x9C948DD5);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTdesDeferredCounterCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0x9C948DD5);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0x9C948DD5):
                {
                    switch (methodId)
                    {
                        case (int)0x23541F91:
                            return "BeginWorkAsync";
                        case (int)0x3AC32045:
                            return "InitialSubscribe";
                        case unchecked((int)0xA9217D1A):
                            return "HeartbeatSubscribe";
                        case (int)0x6C316D5B:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters> param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x23541F91, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3AC32045, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xA9217D1A), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x6C316D5B, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>() : observer0});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain), unchecked((int)0xA46E1B72)), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOracleObserverTdesMctCaseGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case unchecked((int)0xA46E1B72):
                {
                    var casted = ((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain)grain);
                    switch (methodId)
                    {
                        case (int)0x723AFB58:
                            return await casted.BeginWorkAsync((global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters)arguments[0]);
                        case (int)0x3137565C:
                            await casted.InitialSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>)arguments[0]);
                            return null;
                        case unchecked((int)0xD80C3931):
                            await casted.HeartbeatSubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>)arguments[0]);
                            return null;
                        case (int)0x1D29B074:
                            await casted.Unsubscribe((global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => unchecked((int)0xA46E1B72);
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain))]
    internal class OrleansCodeGenOracleObserverTdesMctCaseGrainReference : global::Orleans.Runtime.GrainReference, global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain
    {
        OrleansCodeGenOracleObserverTdesMctCaseGrainReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenOracleObserverTdesMctCaseGrainReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenOracleObserverTdesMctCaseGrainReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => unchecked((int)0xA46E1B72);
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IOracleObserverTdesMctCaseGrain";
        public override bool IsCompatible(int interfaceId) => interfaceId == unchecked((int)0xA46E1B72);
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case unchecked((int)0xA46E1B72):
                {
                    switch (methodId)
                    {
                        case (int)0x723AFB58:
                            return "BeginWorkAsync";
                        case (int)0x3137565C:
                            return "InitialSubscribe";
                        case unchecked((int)0xD80C3931):
                            return "HeartbeatSubscribe";
                        case (int)0x1D29B074:
                            return "Unsubscribe";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<bool> global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain.BeginWorkAsync(global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters param0)
        {
            return base.InvokeMethodAsync<bool>((int)0x723AFB58, new object[]{param0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>.InitialSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x3137565C, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>.HeartbeatSubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>(unchecked((int)0xD80C3931), new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>>() : observer0});
        }

        global::System.Threading.Tasks.Task global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>.Unsubscribe(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>> observer0)
        {
            global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(observer0);
            return base.InvokeMethodAsync<object>((int)0x1D29B074, new object[]{observer0 is global::Orleans.Grain ? observer0.AsReference<global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult<global::NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult>>>() : observer0});
        }
    }
}

namespace OrleansGeneratedCode
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
    internal sealed class OrleansCodeGenNIST_CVP_ACVTS_Libraries_Orleans_Grains_InterfacesFeaturePopulator : global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Metadata.GrainInterfaceFeature>, global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Metadata.GrainClassFeature>, global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Serialization.SerializerFeature>
    {
        public void Populate(global::Orleans.Metadata.GrainInterfaceFeature feature)
        {
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmCaseGrainMethodInvoker), (int)0x986C57C));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainMethodInvoker), (int)0x65AF47A6));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainMethodInvoker), (int)0x753CBF5A));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainMethodInvoker), (int)0xCA86D7B));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainMethodInvoker), (int)0x174F542F));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainMethodInvoker), (int)0x360B4D24));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmCaseGrainMethodInvoker), (int)0x60241CB5));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmSivCaseGrainMethodInvoker), unchecked((int)0xDA51A64E)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesXpnCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesXpnCaseGrainMethodInvoker), unchecked((int)0xDA35282D)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverAesCounterRfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverAesCounterRfcCaseGrainMethodInvoker), unchecked((int)0xBDBF966C)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainMethodInvoker), unchecked((int)0xAB585D10)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCaseGrainMethodInvoker), (int)0xD2F12FF));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainMethodInvoker), unchecked((int)0xFE0335B8)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainMethodInvoker), (int)0x2C26CBBF));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainMethodInvoker), unchecked((int)0xC956B6B4)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesFfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesFfCaseGrainMethodInvoker), (int)0x5B608943));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesMctCaseGrainMethodInvoker), unchecked((int)0xB242BC1E)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesWithPayloadCaseGrainMethodInvoker), unchecked((int)0xD6CF06DF)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesXtsCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesXtsCaseGrainMethodInvoker), (int)0x309DE510));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeCaseGrainMethodInvoker), (int)0x49CD297D));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeMctCaseGrainMethodInvoker), unchecked((int)0xE50E54FC)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverBlockCipherDfCaseGrainMethodInvoker), (int)0x16F371C9));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverDrbgCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverDrbgCaseGrainMethodInvoker), (int)0x4B7A2DFF));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverHashDfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverHashDfCaseGrainMethodInvoker), (int)0x4A6FF6EE));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainMethodInvoker), unchecked((int)0xF874F20F)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainMethodInvoker), (int)0x16DF585C));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainMethodInvoker), unchecked((int)0xD234C263)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGCaseGrainMethodInvoker), unchecked((int)0xF754F5EA)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGVerifyCaseGrainMethodInvoker), unchecked((int)0xF45EC530)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaKeyCaseGrainMethodInvoker), unchecked((int)0x97B3A49F)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqCaseGrainMethodInvoker), unchecked((int)0xB3A498F4)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainMethodInvoker), unchecked((int)0x93809FD5)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaSignatureCaseGrainMethodInvoker), unchecked((int)0xCA7C6727)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenObserverEcdsaDomainParameterGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenObserverEcdsaDomainParameterGrainMethodInvoker), unchecked((int)0xC0DB96B4)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainMethodInvoker), (int)0x2FE7262C));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainMethodInvoker), (int)0x1B91922A));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainMethodInvoker), (int)0x6A0E0A0B));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaKeyCaseGrainMethodInvoker), (int)0x2E7E502));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainMethodInvoker), (int)0x128A5138));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainMethodInvoker), unchecked((int)0x91424479)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainMethodInvoker), (int)0x398E7CEF));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainMethodInvoker), unchecked((int)0xDB5A66F1)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainMethodInvoker), (int)0x6F967BA3));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainMethodInvoker), unchecked((int)0xD3985AC0)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainMethodInvoker), (int)0x1CB3276C));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaKeyCaseGrainMethodInvoker), (int)0x43B48D92));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainMethodInvoker), (int)0x16B6F0A));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainMethodInvoker), unchecked((int)0xF4AEB1AB)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureCaseGrainMethodInvoker), unchecked((int)0xE1DDB059)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainMethodInvoker), unchecked((int)0xF1B9A61F)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainMethodInvoker), (int)0x7543F9C1));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashCaseGrainMethodInvoker), unchecked((int)0xE9E7DDEC)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashMctCaseGrainMethodInvoker), unchecked((int)0xD906AED3)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3CaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3CaseGrainMethodInvoker), unchecked((int)0xBF6BD808)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3MctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3MctCaseGrainMethodInvoker), unchecked((int)0x802A7CFA)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaCaseGrainMethodInvoker), unchecked((int)0xC7D110FD)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShakeMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShakeMctCaseGrainMethodInvoker), unchecked((int)0xFA81A46F)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaLdtCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaLdtCaseGrainMethodInvoker), (int)0x3A4D4857));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaMctCaseGrainMethodInvoker), unchecked((int)0xD67EDAAF)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashCaseGrainMethodInvoker), (int)0x60996148));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashMctCaseGrainMethodInvoker), (int)0x44B16454));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver<>), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OrleansCodeGenGrainObserverReference<>), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OrleansCodeGenGrainObserverMethodInvoker<>), (int)0x33791DAA));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.OrleansCodeGenOracleKasKcAftCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.OrleansCodeGenOracleKasKcAftCaseGrainMethodInvoker), unchecked((int)0x8319AE72)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftEccCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftEccCaseGrainMethodInvoker), (int)0x6C1629C0));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftFfcCaseGrainMethodInvoker), (int)0x49D99135));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainMethodInvoker), (int)0x6D5F0FEA));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainMethodInvoker), unchecked((int)0xC497A893)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCaseGrainMethodInvoker), (int)0x3D8DB3AB));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainMethodInvoker), unchecked((int)0xD9C21431)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValEccCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValEccCaseGrainMethodInvoker), unchecked((int)0x9140B6BF)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValFfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValFfcCaseGrainMethodInvoker), (int)0x4948A721));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasAftGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasAftGrainMethodInvoker), unchecked((int)0xAFB5C94A)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasCompleteDeferredAftGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasCompleteDeferredAftGrainMethodInvoker), (int)0x6BF9844C));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscAftGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscAftGrainMethodInvoker), unchecked((int)0x86F7A9CC)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscCompleteDeferredAftGrainMethodInvoker), (int)0x3E0BCD2C));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscValGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscValGrainMethodInvoker), (int)0x5D897992));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasValGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasValGrainMethodInvoker), unchecked((int)0xDC7D9BC8)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscAftIfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscAftIfcCaseGrainMethodInvoker), (int)0x1FA7A291));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainMethodInvoker), (int)0x3A530D4F));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscValIfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscValIfcCaseGrainMethodInvoker), unchecked((int)0xB0E1AE1B)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasAftIfcCaseGrainMethodInvoker), (int)0x12E900A6));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainMethodInvoker), unchecked((int)0xD9749FDC)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasValIfcCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasValIfcCaseGrainMethodInvoker), (int)0x63F377C5));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftHkdfCaseGrainMethodInvoker), (int)0x56C41321));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepCaseGrainMethodInvoker), (int)0x772085CC));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainMethodInvoker), unchecked((int)0xEF73CF4F)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainMethodInvoker), unchecked((int)0xED194D72)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValHkdfCaseGrainMethodInvoker), (int)0x1C29A655));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepCaseGrainMethodInvoker), unchecked((int)0xC333F376)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainMethodInvoker), (int)0x45D7A2A7));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValTwoStepCaseGrainMethodInvoker), (int)0x66CDEF87));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenObserverTlsKdfv13GrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenObserverTlsKdfv13GrainMethodInvoker), unchecked((int)0x84AE1ED1)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainMethodInvoker), (int)0x1446601A));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainMethodInvoker), unchecked((int)0xC1781892)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverHkdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverHkdfCaseGrainMethodInvoker), unchecked((int)0xEA52744A)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV1KdfCaseGrainMethodInvoker), (int)0x9142503));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV2KdfCaseGrainMethodInvoker), (int)0xC72294B));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainMethodInvoker), unchecked((int)0xD1AE8742)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfDeferredCaseGrainMethodInvoker), unchecked((int)0xEBD14374)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverPbKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverPbKdfCaseGrainMethodInvoker), (int)0x9F24D8F));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSnmpKdfCaseGrainMethodInvoker), (int)0x20146A8B));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSrtpKdfCaseGrainMethodInvoker), (int)0x4A55DCAD));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSshKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSshKdfCaseGrainMethodInvoker), unchecked((int)0xEE11E54F)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainMethodInvoker), unchecked((int)0xD5B6FD80)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsKdfCaseGrainMethodInvoker), (int)0x706918CE));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTpmKdfCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTpmKdfCaseGrainMethodInvoker), unchecked((int)0xE92DCDB5)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.OrleansCodeGenOracleObserverKeyWrapCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.OrleansCodeGenOracleObserverKeyWrapCaseGrainMethodInvoker), unchecked((int)0xD63AF3B4)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsKeyCaseGrainMethodInvoker), (int)0x676DE841));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsMctCaseGrainMethodInvoker), unchecked((int)0xF2AF91BD)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsSignatureCaseGrainMethodInvoker), (int)0x79F12DB));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainMethodInvoker), unchecked((int)0xDA2810B7)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverCmacCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverCmacCaseGrainMethodInvoker), unchecked((int)0xAAB606C6)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverHmacCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverHmacCaseGrainMethodInvoker), unchecked((int)0xE9DE431E)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverKmacCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverKmacCaseGrainMethodInvoker), (int)0x7EACA2C3));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainMethodInvoker), unchecked((int)0xABFAF23D)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainMethodInvoker), (int)0x43303507));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainMethodInvoker), (int)0x738C2EEE));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainMethodInvoker), (int)0x65C848C7));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainMethodInvoker), (int)0x65590817));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainMethodInvoker), unchecked((int)0x8FA2556A)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainMethodInvoker), unchecked((int)0xCE29C97C)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainMethodInvoker), unchecked((int)0xA6666C2C)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignatureCaseGrainMethodInvoker), (int)0x25F8A490));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainMethodInvoker), (int)0x20ED3284));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainMethodInvoker), unchecked((int)0xB8F9CB6E)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainMethodInvoker), unchecked((int)0xE8A4FA98)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.OrleansCodeGenObserverSafePrimesKeyVerGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.OrleansCodeGenObserverSafePrimesKeyVerGrainMethodInvoker), (int)0x71F1C04));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCaseGrainMethodInvoker), (int)0x5A57342A));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainMethodInvoker), unchecked((int)0xC7F25C76)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainMethodInvoker), unchecked((int)0xC3B18B06)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainMethodInvoker), unchecked((int)0x9C948DD5)));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesMctCaseGrainReference), typeof(NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesMctCaseGrainMethodInvoker), unchecked((int)0xA46E1B72)));
        }

        public void Populate(global::Orleans.Metadata.GrainClassFeature feature)
        {
        }

        public void Populate(global::Orleans.Serialization.SerializerFeature feature)
        {
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmCaseGrain");
            feature.AddKnownType("System.Threading.Tasks.Task`1", "Task`1'1");
            feature.AddKnownType("System.Threading.Tasks.Task", "Task");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AeadParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCcmEcmaCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredGcmCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AeadResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesCompleteDeferredXpnCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredGcmCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesDeferredXpnCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesGcmSivCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.IOracleObserverAesXpnCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCcmEcmaCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredGcmCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesCompleteDeferredXpnCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredGcmCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesDeferredXpnCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmSivCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmSivCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesGcmSivCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesXpnCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesXpnCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesXpnCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aead.OrleansCodeGenOracleObserverAesXpnCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverAesCounterRfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters`1,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CounterParameters`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IObserverCompleteDeferredAesCounterRfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesWithPayloadParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesWithPayloadParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCompleteDeferredCounterCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesCounterExtractIvsCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesDeferredCounterCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesFfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesFfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesFfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesWithPayloadCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.IOracleObserverAesXtsCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesXtsParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AesXtsParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverAesCounterRfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverAesCounterRfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverAesCounterRfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverAesCounterRfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenObserverCompleteDeferredAesCounterRfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCompleteDeferredCounterCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesCounterExtractIvsCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesDeferredCounterCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesFfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesFfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesFfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesFfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesWithPayloadCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesWithPayloadCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesWithPayloadCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesXtsCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesXtsCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesXtsCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Aes.OrleansCodeGenOracleObserverAesXtsCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CShakeParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CShakeParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.IOracleObserverCShakeMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Cshake.OrleansCodeGenOracleObserverCShakeMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverBlockCipherDfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverDrbgCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.DrbgParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.DrbgParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.IOracleObserverHashDfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaWrapperParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaWrapperParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverBlockCipherDfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverBlockCipherDfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverBlockCipherDfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverDrbgCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverDrbgCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverDrbgCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverDrbgCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverHashDfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverHashDfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverHashDfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Drbg.OrleansCodeGenOracleObserverHashDfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaKeyParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaKeyParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaKeyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaCompleteDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaSignatureParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.DsaDomainParametersParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DsaDomainParametersResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaGVerifyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaPqVerifyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.IOracleObserverDsaSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaCompleteDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGVerifyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGVerifyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaGVerifyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaPqVerifyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Dsa.OrleansCodeGenOracleObserverDsaSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IObserverEcdsaDomainParameterGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.EcdsaCurveParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.EcdsaCurveParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaKeyParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaKeyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaCompleteDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EcdsaSignatureParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EcdsaSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifyKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.IOracleObserverEcdsaVerifySignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenObserverEcdsaDomainParameterGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenObserverEcdsaDomainParameterGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenObserverEcdsaDomainParameterGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenObserverEcdsaDomainParameterGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaCompleteDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifyKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Ecdsa.OrleansCodeGenOracleObserverEcdsaVerifySignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaKeyParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaKeyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaCompleteDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaSignatureParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EddsaSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureBitFlipCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaMessageBitFlipCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaMessageParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.EddsaMessageParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureBitFlipCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifyKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.IOracleObserverEddsaVerifySignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaCompleteDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureBitFlipCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaMessageBitFlipCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureBitFlipCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifyKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Eddsa.OrleansCodeGenOracleObserverEddsaVerifySignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Enums.GrainState,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Enums.GrainState");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Exceptions.InitialValuesInvalidException,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Exceptions.InitialValuesInvalidException");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Exceptions.OriginalClusterNodeSuicideException,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Exceptions.OriginalClusterNodeSuicideException");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ParallelHashParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ParallelHashParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverParallelHashMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3CaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverSha3MctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShakeMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShakeParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShakeParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaLdtCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaLargeDataParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.ShaLargeDataParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverShaMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TupleHashParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TupleHashParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.IOracleObserverTupleHashMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverParallelHashMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3CaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3CaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3CaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3CaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3MctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3MctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3MctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverSha3MctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShakeMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShakeMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShakeMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShakeMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaLdtCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaLdtCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaLdtCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaLdtCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverShaMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Hash.OrleansCodeGenOracleObserverTupleHashMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainInterfaceMarker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainInterfaceMarker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable`1,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObservable`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver`1,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IGrainObserver`1'1");
            feature.AddKnownType("System.Exception", "Exception");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IObserverResult`1,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.IObserverResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.IOracleKasKcAftCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.KeyConfirmation.KasKcAftParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.KeyConfirmation.KasKcAftParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.OrleansCodeGenOracleKasKcAftCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.OrleansCodeGenOracleKasKcAftCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.OrleansCodeGenOracleKasKcAftCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.KeyConfirmation.OrleansCodeGenOracleKasKcAftCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftEccCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersEcc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersBase,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasAftFfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersFfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftParametersFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftEccCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersEcc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersBase,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasCompleteDeferredAftFfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersFfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasAftDeferredParametersFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasEccComponentCompleteDeferredCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValEccCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersEcc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersBase,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.IOracleObserverKasValFfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersFfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar1.KasValParametersFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftEccCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftEccCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftEccCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftEccCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftFfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftFfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasAftFfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftEccCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasCompleteDeferredAftFfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasEccComponentCompleteDeferredCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValEccCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValEccCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValEccCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValEccCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValFfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValFfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValFfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar1.OrleansCodeGenOracleObserverKasValFfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasAftGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasParametersBase,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasParametersBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasCompleteDeferredAftGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftDeferredParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasAftDeferredParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscAftGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscCompleteDeferredAftGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftDeferredParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscAftDeferredParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasSscValGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscValParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasSscValParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.IObserverKasValGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasValParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.KasValParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasAftGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasAftGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasAftGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasAftGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasCompleteDeferredAftGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasCompleteDeferredAftGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasCompleteDeferredAftGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasCompleteDeferredAftGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscAftGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscAftGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscAftGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscAftGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscCompleteDeferredAftGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscCompleteDeferredAftGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscCompleteDeferredAftGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscValGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscValGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscValGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasSscValGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasValGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasValGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasValGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Ar3.OrleansCodeGenObserverKasValGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscAftIfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftParametersIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscCompleteDeferredAftIfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftDeferredParametersIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscAftDeferredParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IObserverKasSscValIfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscValParametersIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasSscValParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasAftIfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftParametersIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasCompleteDeferredAftIfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftDeferredParametersIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasAftDeferredParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.IOracleObserverKasValIfcCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasValParametersIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Br2.KasValParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscAftIfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscAftIfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscAftIfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscAftIfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscCompleteDeferredAftIfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscValIfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscValIfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscValIfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenObserverKasSscValIfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasAftIfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasAftIfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasAftIfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasCompleteDeferredAftIfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasValIfcCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasValIfcCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasValIfcCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Br2.OrleansCodeGenOracleObserverKasValIfcCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftHkdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftOneStepNoCounterCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfAftTwoStepCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValHkdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValHkdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValHkdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValOneStepNoCounterCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.IObserverKasKdfValTwoStepCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftHkdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftHkdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftHkdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftOneStepNoCounterCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfAftTwoStepCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValHkdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValHkdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValHkdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValOneStepNoCounterCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValTwoStepCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValTwoStepCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kas.Sp800_56Cr1.OrleansCodeGenObserverKasKdfValTwoStepCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IObserverTlsKdfv13Grain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfv13Parameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfv13Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX942KdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX942Parameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX942Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverAnsiX963KdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX963Parameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.AnsiX963Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverHkdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HkdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HkdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV1KdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV1KdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV1KdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverIkeV2KdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV2KdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.IkeV2KdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfCompleteDeferredCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverKdfDeferredCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverPbKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.PbKdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.PbKdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSnmpKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SnmpKdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SnmpKdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSrtpKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SrtpKdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SrtpKdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverSshKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SshKdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SshKdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsEmsKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TlsKdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTlsKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.IOracleObserverTpmKdfCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenObserverTlsKdfv13GrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenObserverTlsKdfv13GrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenObserverTlsKdfv13GrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenObserverTlsKdfv13GrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX942KdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverAnsiX963KdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverHkdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverHkdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverHkdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverHkdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV1KdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV1KdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV1KdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV2KdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV2KdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverIkeV2KdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfCompleteDeferredCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfDeferredCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfDeferredCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverKdfDeferredCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverPbKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverPbKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverPbKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverPbKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSnmpKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSnmpKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSnmpKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSrtpKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSrtpKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSrtpKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSshKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSshKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSshKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverSshKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsEmsKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTlsKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTpmKdfCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTpmKdfCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTpmKdfCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Kdf.OrleansCodeGenOracleObserverTpmKdfCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.IOracleObserverKeyWrapCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KeyWrapParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KeyWrapParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.OrleansCodeGenOracleObserverKeyWrapCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.OrleansCodeGenOracleObserverKeyWrapCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.OrleansCodeGenOracleObserverKeyWrapCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.KeyWrap.OrleansCodeGenOracleObserverKeyWrapCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsKeyParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsKeyParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.LmsSignatureParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.IOracleObserverLmsVerifySignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsKeyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Lms.OrleansCodeGenOracleObserverLmsVerifySignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverCmacCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CmacParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.CmacParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverHmacCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HmacParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.HmacParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.IOracleObserverKmacCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KmacParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.KmacParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverCmacCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverCmacCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverCmacCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverCmacCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverHmacCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverHmacCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverHmacCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverHmacCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverKmacCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverKmacCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverKmacCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Mac.OrleansCodeGenOracleObserverKmacCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OracleGrainObserver`1,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OracleGrainObserver`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaDecryptionPrimitiveParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaDecryptionPrimitiveResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaKeyParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaKeyParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaKeyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignatureParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaCompleteKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrivateKeyModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrivateKeyModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDecryptionPrimitiveCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredDecryptionPrimitiveCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaDeferredSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaGeneratePrimesCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaSignaturePrimitiveCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignaturePrimitiveParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.RsaSignaturePrimitiveParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifyKeyCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.IOracleObserverRsaVerifySignatureCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredDecryptionPrimitiveCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaCompleteKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDecryptionPrimitiveCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredDecryptionPrimitiveCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaDeferredSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaGeneratePrimesCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaSignaturePrimitiveCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifyKeyCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Rsa.OrleansCodeGenOracleObserverRsaVerifySignatureCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.IObserverSafePrimesKeyVerGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SafePrimesKeyVerParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SafePrimesKeyVerParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.OrleansCodeGenObserverSafePrimesKeyVerGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.OrleansCodeGenObserverSafePrimesKeyVerGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.OrleansCodeGenObserverSafePrimesKeyVerGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.SafePrimes.OrleansCodeGenObserverSafePrimesKeyVerGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.TdesParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCompleteDeferredCounterCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesCounterExtractIvsCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TdesResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesDeferredCounterCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.IOracleObserverTdesMctCaseGrain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCompleteDeferredCounterCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesCounterExtractIvsCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesDeferredCounterCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesMctCaseGrainMethodInvoker,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesMctCaseGrainMethodInvoker");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesMctCaseGrainReference,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.Tdes.OrleansCodeGenOracleObserverTdesMctCaseGrainReference");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OrleansCodeGenGrainObserverMethodInvoker`1,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OrleansCodeGenGrainObserverMethodInvoker`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OrleansCodeGenGrainObserverReference`1,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces.OrleansCodeGenGrainObserverReference`1'1");
            feature.AddKnownType("OrleansGeneratedCode.OrleansCodeGenNIST_CVP_ACVTS_Libraries_Orleans_Grains_InterfacesFeaturePopulator,NIST.CVP.ACVTS.Libraries.Orleans.Grains.Interfaces", "OrleansGeneratedCode.OrleansCodeGenNIST_CVP_ACVTS_Libraries_Orleans_Grains_InterfacesFeaturePopulator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.BitString,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.BitString");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.BlockCipherModesOfOperation,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.BlockCipherModesOfOperation");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.BlockCipherDirections,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.BlockCipherDirections");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.AlgoMode,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.AlgoMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Domain.MathDomain,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Domain.MathDomain");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.HashFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.HashFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Enums.DrbgMechanism,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Enums.DrbgMechanism");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Enums.DrbgMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Enums.DrbgMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.HashFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.HashFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcKeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcKeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.DsaSignatureDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.DsaSignatureDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcSignature,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcSignature");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.Enums.PrimeGenMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.Enums.PrimeGenMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.Enums.GeneratorGenMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.Enums.GeneratorGenMode");
            feature.AddKnownType("System.Numerics.BigInteger", "BigInteger");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.DomainSeed,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.DomainSeed");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.Counter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.Counter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.Curve,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.Curve");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EcdsaKeyDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EcdsaKeyDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccKeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccKeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EcdsaSignatureDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EcdsaSignatureDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.NonceProviderTypes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.NonceProviderTypes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccSignature,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccSignature");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.Enums.Curve,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.Enums.Curve");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EddsaKeyDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EddsaKeyDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdKeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdKeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EddsaSignatureDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.EddsaSignatureDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdSignature,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdSignature");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.HashFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.HashFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.LargeBitString.ExpansionMode,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.LargeBitString.ExpansionMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.HashFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.HashFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasKcDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasKcDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyAgreementRole,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyAgreementRole");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyConfirmationDirection,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyConfirmationDirection");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyConfirmationRole,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyConfirmationRole");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyAgreementMacType,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyAgreementMacType");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.EccScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.EccScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.EccParameterSet,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.EccParameterSet");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.FfcScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.FfcScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.FfcParameterSet,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.FfcParameterSet");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasValTestDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasValTestDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaKeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaKeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Enums.KasScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Enums.KasScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Enums.KasAlgorithm,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Enums.KasAlgorithm");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaDomainParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaDomainParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Enums.KasDpGeneration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Enums.KasDpGeneration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Helpers.SchemeKeyNonceGenRequirement,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Helpers.SchemeKeyNonceGenRequirement");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfParameter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfParameter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.MacParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.MacParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.Enums.HashFunctions,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.Enums.HashFunctions");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasSscTestCaseExpectation,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasSscTestCaseExpectation");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.MacConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.MacConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.SscIfcScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.SscIfcScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.IfcKeyGenerationMethod,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.IfcKeyGenerationMethod");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.IfcScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.IfcScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.KtsConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.KtsConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.PublicKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.PublicKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.PrivateKeyBase,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.PrivateKeyBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.KtsParameter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.KtsParameter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasIfcValTestDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasIfcValTestDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.HkdfConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.HkdfConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.HkdfMultiExpansionConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.HkdfMultiExpansionConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.OneStepConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.OneStepConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.OneStepNoCounterConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.OneStepNoCounterConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.TwoStepConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.TwoStepConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.TwoStepMultiExpansionConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.TwoStepMultiExpansionConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasKdfTestCaseDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.KasKdfTestCaseDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.Enums.TlsModes1_3,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.Enums.TlsModes1_3");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.Enums.AnsiX942Types,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.Enums.AnsiX942Types");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.Enums.AuthenticationMethods,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.Enums.AuthenticationMethods");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Enums.KdfModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Enums.KdfModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Enums.MacModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Enums.MacModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Enums.CounterLocations,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Enums.CounterLocations");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.Enums.Cipher,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.Enums.Cipher");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.Enums.TlsModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.Enums.TlsModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.KeyWrap.Enums.KeyWrapType,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.KeyWrap.Enums.KeyWrapType");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.LmsSignatureDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.LmsSignatureDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssKeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssKeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.CMAC.Enums.CmacTypes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.CMAC.Enums.CmacTypes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.ModeValues,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.ModeValues");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.DigestSizes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.DigestSizes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeGenModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeGenModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PublicExponentModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PublicExponentModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeTestModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeTestModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.Fips186Standard,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.Fips186Standard");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.AuxiliaryResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.AuxiliaryResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.SignatureModifications,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.SignatureModifications");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.SignatureSchemes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.SignatureSchemes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PssMaskTypes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PssMaskTypes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.SafePrimes.Enums.SafePrime,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.SafePrimes.Enums.SafePrime");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.SafePrimesKeyDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.SafePrimesKeyDisposition");
            feature.AddKnownType("System.Collections.BitArray", "BitArray");
            feature.AddKnownType("System.Collections.Generic.List`1", "List`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Domain.IDomainSegment,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Domain.IDomainSegment");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccPoint,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccPoint");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasHashAlg,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasHashAlg");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.FixedInfoEncoding,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.FixedInfoEncoding");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.MacSaltMethod,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.MacSaltMethod");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasKdfOneStepAuxFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasKdfOneStepAuxFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssPrivateKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssPrivateKey");
            feature.AddKnownType("Autofac.ContainerBuilder,Autofac", "Autofac.ContainerBuilder");
            feature.AddKnownType("Autofac.ContainerBuilderResources,Autofac", "Autofac.ContainerBuilderResources");
            feature.AddKnownType("Autofac.IComponentContext,Autofac", "Autofac.IComponentContext");
            feature.AddKnownType("Autofac.IContainer,Autofac", "Autofac.IContainer");
            feature.AddKnownType("Autofac.ILifetimeScope,Autofac", "Autofac.ILifetimeScope");
            feature.AddKnownType("Autofac.IStartable,Autofac", "Autofac.IStartable");
            feature.AddKnownType("Autofac.Module,Autofac", "Autofac.Module");
            feature.AddKnownType("Autofac.ModuleResources,Autofac", "Autofac.ModuleResources");
            feature.AddKnownType("Autofac.NamedParameter,Autofac", "Autofac.NamedParameter");
            feature.AddKnownType("Autofac.PositionalParameter,Autofac", "Autofac.PositionalParameter");
            feature.AddKnownType("Autofac.PropertyWiringOptions,Autofac", "Autofac.PropertyWiringOptions");
            feature.AddKnownType("Autofac.RegistrationExtensionsResources,Autofac", "Autofac.RegistrationExtensionsResources");
            feature.AddKnownType("Autofac.ResolutionExtensionsResources,Autofac", "Autofac.ResolutionExtensionsResources");
            feature.AddKnownType("Autofac.ResolveRequest,Autofac", "Autofac.ResolveRequest");
            feature.AddKnownType("Autofac.TypedParameter,Autofac", "Autofac.TypedParameter");
            feature.AddKnownType("Autofac.TypeExtensionsResources,Autofac", "Autofac.TypeExtensionsResources");
            feature.AddKnownType("Autofac.Builder.BuildCallbackService,Autofac", "Autofac.Builder.BuildCallbackService");
            feature.AddKnownType("Autofac.Builder.BuildCallbackServiceResources,Autofac", "Autofac.Builder.BuildCallbackServiceResources");
            feature.AddKnownType("Autofac.Builder.ConcreteReflectionActivatorData,Autofac", "Autofac.Builder.ConcreteReflectionActivatorData");
            feature.AddKnownType("Autofac.Builder.ContainerBuildOptions,Autofac", "Autofac.Builder.ContainerBuildOptions");
            feature.AddKnownType("Autofac.Builder.DeferredCallback,Autofac", "Autofac.Builder.DeferredCallback");
            feature.AddKnownType("Autofac.Builder.DynamicRegistrationStyle,Autofac", "Autofac.Builder.DynamicRegistrationStyle");
            feature.AddKnownType("Autofac.Builder.IConcreteActivatorData,Autofac", "Autofac.Builder.IConcreteActivatorData");
            feature.AddKnownType("Autofac.Builder.IHideObjectMembers,Autofac", "Autofac.Builder.IHideObjectMembers");
            feature.AddKnownType("Autofac.Builder.IRegistrationBuilder`3,Autofac", "Autofac.Builder.IRegistrationBuilder`3'3");
            feature.AddKnownType("Autofac.Builder.MetadataConfiguration`1,Autofac", "Autofac.Builder.MetadataConfiguration`1'1");
            feature.AddKnownType("Autofac.Builder.ReflectionActivatorData,Autofac", "Autofac.Builder.ReflectionActivatorData");
            feature.AddKnownType("Autofac.Builder.RegistrationBuilder`3,Autofac", "Autofac.Builder.RegistrationBuilder`3'3");
            feature.AddKnownType("Autofac.Builder.RegistrationBuilderResources,Autofac", "Autofac.Builder.RegistrationBuilderResources");
            feature.AddKnownType("Autofac.Builder.RegistrationData,Autofac", "Autofac.Builder.RegistrationData");
            feature.AddKnownType("Autofac.Builder.SimpleActivatorData,Autofac", "Autofac.Builder.SimpleActivatorData");
            feature.AddKnownType("Autofac.Builder.SingleRegistrationStyle,Autofac", "Autofac.Builder.SingleRegistrationStyle");
            feature.AddKnownType("Autofac.Core.ActivatedEventArgs`1,Autofac", "Autofac.Core.ActivatedEventArgs`1'1");
            feature.AddKnownType("Autofac.Core.ActivatingEventArgs`1,Autofac", "Autofac.Core.ActivatingEventArgs`1'1");
            feature.AddKnownType("Autofac.Core.DefaultPropertySelector,Autofac", "Autofac.Core.DefaultPropertySelector");
            feature.AddKnownType("Autofac.Core.DelegatePropertySelector,Autofac", "Autofac.Core.DelegatePropertySelector");
            feature.AddKnownType("Autofac.Core.IPropertySelector,Autofac", "Autofac.Core.IPropertySelector");
            feature.AddKnownType("Autofac.Core.AutoActivateService,Autofac", "Autofac.Core.AutoActivateService");
            feature.AddKnownType("Autofac.Core.ComponentRegisteredEventArgs,Autofac", "Autofac.Core.ComponentRegisteredEventArgs");
            feature.AddKnownType("Autofac.Core.ConstantParameter,Autofac", "Autofac.Core.ConstantParameter");
            feature.AddKnownType("Autofac.Core.Container,Autofac", "Autofac.Core.Container");
            feature.AddKnownType("Autofac.Core.ContainerResources,Autofac", "Autofac.Core.ContainerResources");
            feature.AddKnownType("Autofac.Core.DependencyResolutionException,Autofac", "Autofac.Core.DependencyResolutionException");
            feature.AddKnownType("Autofac.Core.Disposer,Autofac", "Autofac.Core.Disposer");
            feature.AddKnownType("Autofac.Core.DisposerResources,Autofac", "Autofac.Core.DisposerResources");
            feature.AddKnownType("Autofac.Core.IActivatedEventArgs`1,Autofac", "Autofac.Core.IActivatedEventArgs`1'1");
            feature.AddKnownType("Autofac.Core.IActivatingEventArgs`1,Autofac", "Autofac.Core.IActivatingEventArgs`1'1");
            feature.AddKnownType("Autofac.Core.IComponentLifetime,Autofac", "Autofac.Core.IComponentLifetime");
            feature.AddKnownType("Autofac.Core.IComponentRegistration,Autofac", "Autofac.Core.IComponentRegistration");
            feature.AddKnownType("Autofac.Core.IComponentRegistry,Autofac", "Autofac.Core.IComponentRegistry");
            feature.AddKnownType("Autofac.Core.IComponentRegistryServices,Autofac", "Autofac.Core.IComponentRegistryServices");
            feature.AddKnownType("Autofac.Core.IDisposer,Autofac", "Autofac.Core.IDisposer");
            feature.AddKnownType("Autofac.Core.IInstanceActivator,Autofac", "Autofac.Core.IInstanceActivator");
            feature.AddKnownType("Autofac.Core.IModule,Autofac", "Autofac.Core.IModule");
            feature.AddKnownType("Autofac.Core.ImplicitRegistrationSource,Autofac", "Autofac.Core.ImplicitRegistrationSource");
            feature.AddKnownType("Autofac.Core.ImplicitRegistrationSourceResources,Autofac", "Autofac.Core.ImplicitRegistrationSourceResources");
            feature.AddKnownType("Autofac.Core.InstanceOwnership,Autofac", "Autofac.Core.InstanceOwnership");
            feature.AddKnownType("Autofac.Core.InstanceSharing,Autofac", "Autofac.Core.InstanceSharing");
            feature.AddKnownType("Autofac.Core.IRegistrationSource,Autofac", "Autofac.Core.IRegistrationSource");
            feature.AddKnownType("Autofac.Core.IServiceWithType,Autofac", "Autofac.Core.IServiceWithType");
            feature.AddKnownType("Autofac.Core.ISharingLifetimeScope,Autofac", "Autofac.Core.ISharingLifetimeScope");
            feature.AddKnownType("Autofac.Core.KeyedService,Autofac", "Autofac.Core.KeyedService");
            feature.AddKnownType("Autofac.Core.NamedPropertyParameter,Autofac", "Autofac.Core.NamedPropertyParameter");
            feature.AddKnownType("Autofac.Core.Parameter,Autofac", "Autofac.Core.Parameter");
            feature.AddKnownType("Autofac.Core.PreparingEventArgs,Autofac", "Autofac.Core.PreparingEventArgs");
            feature.AddKnownType("Autofac.Core.RegistrationSourceAddedEventArgs,Autofac", "Autofac.Core.RegistrationSourceAddedEventArgs");
            feature.AddKnownType("Autofac.Core.ResolvedParameter,Autofac", "Autofac.Core.ResolvedParameter");
            feature.AddKnownType("Autofac.Core.SelfComponentRegistration,Autofac", "Autofac.Core.SelfComponentRegistration");
            feature.AddKnownType("Autofac.Core.Service,Autofac", "Autofac.Core.Service");
            feature.AddKnownType("Autofac.Core.ServiceRegistration,Autofac", "Autofac.Core.ServiceRegistration");
            feature.AddKnownType("Autofac.Core.ServiceResources,Autofac", "Autofac.Core.ServiceResources");
            feature.AddKnownType("Autofac.Core.TypedService,Autofac", "Autofac.Core.TypedService");
            feature.AddKnownType("Autofac.Core.UniqueService,Autofac", "Autofac.Core.UniqueService");
            feature.AddKnownType("Autofac.Core.Activators.InstanceActivator,Autofac", "Autofac.Core.Activators.InstanceActivator");
            feature.AddKnownType("Autofac.Core.Activators.InstanceActivatorResources,Autofac", "Autofac.Core.Activators.InstanceActivatorResources");
            feature.AddKnownType("Autofac.Core.Activators.Delegate.DelegateActivator,Autofac", "Autofac.Core.Activators.Delegate.DelegateActivator");
            feature.AddKnownType("Autofac.Core.Activators.Delegate.DelegateActivatorResources,Autofac", "Autofac.Core.Activators.Delegate.DelegateActivatorResources");
            feature.AddKnownType("Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator,Autofac", "Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator");
            feature.AddKnownType("Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources,Autofac", "Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.AutowiringParameter,Autofac", "Autofac.Core.Activators.Reflection.AutowiringParameter");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.BoundConstructor,Autofac", "Autofac.Core.Activators.Reflection.BoundConstructor");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.BoundConstructorResources,Autofac", "Autofac.Core.Activators.Reflection.BoundConstructorResources");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.ConstructorBinder,Autofac", "Autofac.Core.Activators.Reflection.ConstructorBinder");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.DefaultConstructorFinder,Autofac", "Autofac.Core.Activators.Reflection.DefaultConstructorFinder");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.DefaultValueParameter,Autofac", "Autofac.Core.Activators.Reflection.DefaultValueParameter");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac", "Autofac.Core.Activators.Reflection.IConstructorFinder");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.IConstructorSelector,Autofac", "Autofac.Core.Activators.Reflection.IConstructorSelector");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector,Autofac", "Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources,Autofac", "Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.MostParametersConstructorSelector,Autofac", "Autofac.Core.Activators.Reflection.MostParametersConstructorSelector");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources,Autofac", "Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.NoConstructorsFoundException,Autofac", "Autofac.Core.Activators.Reflection.NoConstructorsFoundException");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources,Autofac", "Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.ReflectionActivator,Autofac", "Autofac.Core.Activators.Reflection.ReflectionActivator");
            feature.AddKnownType("Autofac.Core.Activators.Reflection.ReflectionActivatorResources,Autofac", "Autofac.Core.Activators.Reflection.ReflectionActivatorResources");
            feature.AddKnownType("Autofac.Core.Lifetime.CurrentScopeLifetime,Autofac", "Autofac.Core.Lifetime.CurrentScopeLifetime");
            feature.AddKnownType("Autofac.Core.Lifetime.LifetimeScope,Autofac", "Autofac.Core.Lifetime.LifetimeScope");
            feature.AddKnownType("Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs,Autofac", "Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs");
            feature.AddKnownType("Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs,Autofac", "Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs");
            feature.AddKnownType("Autofac.Core.Lifetime.LifetimeScopeResources,Autofac", "Autofac.Core.Lifetime.LifetimeScopeResources");
            feature.AddKnownType("Autofac.Core.Lifetime.MatchingScopeLifetime,Autofac", "Autofac.Core.Lifetime.MatchingScopeLifetime");
            feature.AddKnownType("Autofac.Core.Lifetime.MatchingScopeLifetimeResources,Autofac", "Autofac.Core.Lifetime.MatchingScopeLifetimeResources");
            feature.AddKnownType("Autofac.Core.Lifetime.RootScopeLifetime,Autofac", "Autofac.Core.Lifetime.RootScopeLifetime");
            feature.AddKnownType("Autofac.Core.Pipeline.ResolvePipeline,Autofac", "Autofac.Core.Pipeline.ResolvePipeline");
            feature.AddKnownType("Autofac.Core.Registration.ComponentNotRegisteredException,Autofac", "Autofac.Core.Registration.ComponentNotRegisteredException");
            feature.AddKnownType("Autofac.Core.Registration.ComponentNotRegisteredExceptionResources,Autofac", "Autofac.Core.Registration.ComponentNotRegisteredExceptionResources");
            feature.AddKnownType("Autofac.Core.Registration.ComponentPipelineBuildingArgs,Autofac", "Autofac.Core.Registration.ComponentPipelineBuildingArgs");
            feature.AddKnownType("Autofac.Core.Registration.ComponentRegistration,Autofac", "Autofac.Core.Registration.ComponentRegistration");
            feature.AddKnownType("Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator,Autofac", "Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator");
            feature.AddKnownType("Autofac.Core.Registration.ComponentRegistrationResources,Autofac", "Autofac.Core.Registration.ComponentRegistrationResources");
            feature.AddKnownType("Autofac.Core.Registration.ComponentRegistry,Autofac", "Autofac.Core.Registration.ComponentRegistry");
            feature.AddKnownType("Autofac.Core.Registration.ComponentRegistryBuilder,Autofac", "Autofac.Core.Registration.ComponentRegistryBuilder");
            feature.AddKnownType("Autofac.Core.Registration.DefaultRegisteredServicesTracker,Autofac", "Autofac.Core.Registration.DefaultRegisteredServicesTracker");
            feature.AddKnownType("Autofac.Core.Registration.ExternalComponentRegistration,Autofac", "Autofac.Core.Registration.ExternalComponentRegistration");
            feature.AddKnownType("Autofac.Core.Registration.ExternalComponentRegistration+NoOpActivator,Autofac", "Autofac.Core.Registration.NoOpActivator");
            feature.AddKnownType("Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource,Autofac", "Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource");
            feature.AddKnownType("Autofac.Core.Registration.ExternalRegistrySource,Autofac", "Autofac.Core.Registration.ExternalRegistrySource");
            feature.AddKnownType("Autofac.Core.Registration.IComponentRegistryBuilder,Autofac", "Autofac.Core.Registration.IComponentRegistryBuilder");
            feature.AddKnownType("Autofac.Core.Registration.IModuleRegistrar,Autofac", "Autofac.Core.Registration.IModuleRegistrar");
            feature.AddKnownType("Autofac.Core.Registration.IRegisteredServicesTracker,Autofac", "Autofac.Core.Registration.IRegisteredServicesTracker");
            feature.AddKnownType("Autofac.Core.Registration.IServiceMiddlewareSource,Autofac", "Autofac.Core.Registration.IServiceMiddlewareSource");
            feature.AddKnownType("Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar,Autofac", "Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar");
            feature.AddKnownType("Autofac.Core.Registration.ISourceRegistrar,Autofac", "Autofac.Core.Registration.ISourceRegistrar");
            feature.AddKnownType("Autofac.Core.Registration.ModuleRegistrar,Autofac", "Autofac.Core.Registration.ModuleRegistrar");
            feature.AddKnownType("Autofac.Core.Registration.RegistrationOptions,Autofac", "Autofac.Core.Registration.RegistrationOptions");
            feature.AddKnownType("Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker,Autofac", "Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker");
            feature.AddKnownType("Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar,Autofac", "Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar");
            feature.AddKnownType("Autofac.Core.Registration.ServiceRegistrationInfo,Autofac", "Autofac.Core.Registration.ServiceRegistrationInfo");
            feature.AddKnownType("Autofac.Core.Registration.ServiceRegistrationInfoResources,Autofac", "Autofac.Core.Registration.ServiceRegistrationInfoResources");
            feature.AddKnownType("Autofac.Core.Registration.ServiceWithTypeMiddlewareSource,Autofac", "Autofac.Core.Registration.ServiceWithTypeMiddlewareSource");
            feature.AddKnownType("Autofac.Core.Registration.SourceRegistrar,Autofac", "Autofac.Core.Registration.SourceRegistrar");
            feature.AddKnownType("Autofac.Core.Resolving.ComponentActivationResources,Autofac", "Autofac.Core.Resolving.ComponentActivationResources");
            feature.AddKnownType("Autofac.Core.Resolving.IDependencyTrackingResolveOperation,Autofac", "Autofac.Core.Resolving.IDependencyTrackingResolveOperation");
            feature.AddKnownType("Autofac.Core.Resolving.IResolveOperation,Autofac", "Autofac.Core.Resolving.IResolveOperation");
            feature.AddKnownType("Autofac.Core.Resolving.ResolveOperation,Autofac", "Autofac.Core.Resolving.ResolveOperation");
            feature.AddKnownType("Autofac.Core.Resolving.ResolveOperationBeginningEventArgs,Autofac", "Autofac.Core.Resolving.ResolveOperationBeginningEventArgs");
            feature.AddKnownType("Autofac.Core.Resolving.ResolveOperationEndingEventArgs,Autofac", "Autofac.Core.Resolving.ResolveOperationEndingEventArgs");
            feature.AddKnownType("Autofac.Core.Resolving.ResolveOperationResources,Autofac", "Autofac.Core.Resolving.ResolveOperationResources");
            feature.AddKnownType("Autofac.Core.Resolving.ResolveRequestBeginningEventArgs,Autofac", "Autofac.Core.Resolving.ResolveRequestBeginningEventArgs");
            feature.AddKnownType("Autofac.Core.Resolving.ResolveRequestCompletingEventArgs,Autofac", "Autofac.Core.Resolving.ResolveRequestCompletingEventArgs");
            feature.AddKnownType("Autofac.Core.Resolving.SegmentedStack`1,Autofac", "Autofac.Core.Resolving.SegmentedStack`1'1");
            feature.AddKnownType("Autofac.Core.Resolving.SegmentedStack`1+StackSegment,Autofac", "Autofac.Core.Resolving.StackSegment'1");
            feature.AddKnownType("Autofac.Core.Resolving.SegmentedStack`1+Enumerator,Autofac", "Autofac.Core.Resolving.Enumerator'1");
            feature.AddKnownType("Autofac.Core.Resolving.SegmentedStackResources,Autofac", "Autofac.Core.Resolving.SegmentedStackResources");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages,Autofac", "Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.CoreEventMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.CoreEventMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.DelegateMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.DelegateMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.MiddlewareMessages,Autofac", "Autofac.Core.Resolving.Middleware.MiddlewareMessages");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.SharingMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.SharingMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.StartableMiddleware,Autofac", "Autofac.Core.Resolving.Middleware.StartableMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Middleware.ResolveEventType,Autofac", "Autofac.Core.Resolving.Middleware.ResolveEventType");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext,Autofac", "Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac", "Autofac.Core.Resolving.Pipeline.IResolveMiddleware");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.IResolvePipeline,Autofac", "Autofac.Core.Resolving.Pipeline.IResolvePipeline");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac", "Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration,Autofac", "Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode,Autofac", "Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator,Autofac", "Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.PipelinePhase,Autofac", "Autofac.Core.Resolving.Pipeline.PipelinePhase");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.PipelineType,Autofac", "Autofac.Core.Resolving.Pipeline.PipelineType");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder,Autofac", "Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages,Autofac", "Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages");
            feature.AddKnownType("Autofac.Core.Resolving.Pipeline.ResolveRequestContext,Autofac", "Autofac.Core.Resolving.Pipeline.ResolveRequestContext");
            feature.AddKnownType("Autofac.Diagnostics.DefaultDiagnosticTracer,Autofac", "Autofac.Diagnostics.DefaultDiagnosticTracer");
            feature.AddKnownType("Autofac.Diagnostics.DefaultDiagnosticTracer+IndentingStringBuilder,Autofac", "Autofac.Diagnostics.IndentingStringBuilder");
            feature.AddKnownType("Autofac.Diagnostics.DiagnosticTracerBase,Autofac", "Autofac.Diagnostics.DiagnosticTracerBase");
            feature.AddKnownType("Autofac.Diagnostics.MiddlewareDiagnosticData,Autofac", "Autofac.Diagnostics.MiddlewareDiagnosticData");
            feature.AddKnownType("Autofac.Diagnostics.OperationDiagnosticTracerBase`1,Autofac", "Autofac.Diagnostics.OperationDiagnosticTracerBase`1'1");
            feature.AddKnownType("Autofac.Diagnostics.OperationFailureDiagnosticData,Autofac", "Autofac.Diagnostics.OperationFailureDiagnosticData");
            feature.AddKnownType("Autofac.Diagnostics.OperationStartDiagnosticData,Autofac", "Autofac.Diagnostics.OperationStartDiagnosticData");
            feature.AddKnownType("Autofac.Diagnostics.OperationSuccessDiagnosticData,Autofac", "Autofac.Diagnostics.OperationSuccessDiagnosticData");
            feature.AddKnownType("Autofac.Diagnostics.OperationTraceCompletedArgs`1,Autofac", "Autofac.Diagnostics.OperationTraceCompletedArgs`1'1");
            feature.AddKnownType("Autofac.Diagnostics.RequestDiagnosticData,Autofac", "Autofac.Diagnostics.RequestDiagnosticData");
            feature.AddKnownType("Autofac.Diagnostics.RequestFailureDiagnosticData,Autofac", "Autofac.Diagnostics.RequestFailureDiagnosticData");
            feature.AddKnownType("Autofac.Diagnostics.TracerMessages,Autofac", "Autofac.Diagnostics.TracerMessages");
            feature.AddKnownType("Autofac.Features.AttributeFilters.KeyFilterAttribute,Autofac", "Autofac.Features.AttributeFilters.KeyFilterAttribute");
            feature.AddKnownType("Autofac.Features.AttributeFilters.MetadataFilterAttribute,Autofac", "Autofac.Features.AttributeFilters.MetadataFilterAttribute");
            feature.AddKnownType("Autofac.Features.AttributeFilters.ParameterFilterAttribute,Autofac", "Autofac.Features.AttributeFilters.ParameterFilterAttribute");
            feature.AddKnownType("Autofac.Features.Collections.CollectionRegistrationSource,Autofac", "Autofac.Features.Collections.CollectionRegistrationSource");
            feature.AddKnownType("Autofac.Features.Collections.CollectionRegistrationSourceResources,Autofac", "Autofac.Features.Collections.CollectionRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.Decorators.DecoratorContext,Autofac", "Autofac.Features.Decorators.DecoratorContext");
            feature.AddKnownType("Autofac.Features.Decorators.DecoratorMiddleware,Autofac", "Autofac.Features.Decorators.DecoratorMiddleware");
            feature.AddKnownType("Autofac.Features.Decorators.DecoratorService,Autofac", "Autofac.Features.Decorators.DecoratorService");
            feature.AddKnownType("Autofac.Features.Decorators.IDecoratorContext,Autofac", "Autofac.Features.Decorators.IDecoratorContext");
            feature.AddKnownType("Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource,Autofac", "Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource");
            feature.AddKnownType("Autofac.Features.GeneratedFactories.FactoryGenerator,Autofac", "Autofac.Features.GeneratedFactories.FactoryGenerator");
            feature.AddKnownType("Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData,Autofac", "Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData");
            feature.AddKnownType("Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource,Autofac", "Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource");
            feature.AddKnownType("Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources,Autofac", "Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.GeneratedFactories.ParameterMapping,Autofac", "Autofac.Features.GeneratedFactories.ParameterMapping");
            feature.AddKnownType("Autofac.Features.Indexed.IIndex`2,Autofac", "Autofac.Features.Indexed.IIndex`2'2");
            feature.AddKnownType("Autofac.Features.Indexed.KeyedServiceIndex`2,Autofac", "Autofac.Features.Indexed.KeyedServiceIndex`2'2");
            feature.AddKnownType("Autofac.Features.LazyDependencies.LazyRegistrationSource,Autofac", "Autofac.Features.LazyDependencies.LazyRegistrationSource");
            feature.AddKnownType("Autofac.Features.LazyDependencies.LazyRegistrationSourceResources,Autofac", "Autofac.Features.LazyDependencies.LazyRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource,Autofac", "Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource");
            feature.AddKnownType("Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources,Autofac", "Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac", "Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData");
            feature.AddKnownType("Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource,Autofac", "Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource");
            feature.AddKnownType("Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources,Autofac", "Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.Metadata.MetadataViewProviderResources,Autofac", "Autofac.Features.Metadata.MetadataViewProviderResources");
            feature.AddKnownType("Autofac.Features.Metadata.MetaRegistrationSource,Autofac", "Autofac.Features.Metadata.MetaRegistrationSource");
            feature.AddKnownType("Autofac.Features.Metadata.MetaRegistrationSourceResources,Autofac", "Autofac.Features.Metadata.MetaRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.Metadata.Meta`2,Autofac", "Autofac.Features.Metadata.Meta`2'2");
            feature.AddKnownType("Autofac.Features.Metadata.Meta`1,Autofac", "Autofac.Features.Metadata.Meta`1'1");
            feature.AddKnownType("Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource,Autofac", "Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources,Autofac", "Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources,Autofac", "Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericRegistrationSource,Autofac", "Autofac.Features.OpenGenerics.OpenGenericRegistrationSource");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources,Autofac", "Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources,Autofac", "Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources");
            feature.AddKnownType("Autofac.Features.OwnedInstances.InstancePerOwnedKey,Autofac", "Autofac.Features.OwnedInstances.InstancePerOwnedKey");
            feature.AddKnownType("Autofac.Features.OwnedInstances.Owned`1,Autofac", "Autofac.Features.OwnedInstances.Owned`1'1");
            feature.AddKnownType("Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource,Autofac", "Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource");
            feature.AddKnownType("Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources,Autofac", "Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources");
            feature.AddKnownType("Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource,Autofac", "Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource");
            feature.AddKnownType("Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources,Autofac", "Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources");
            feature.AddKnownType("Autofac.Features.Scanning.ScanningActivatorData,Autofac", "Autofac.Features.Scanning.ScanningActivatorData");
            feature.AddKnownType("Autofac.Features.Variance.ContravariantRegistrationSource,Autofac", "Autofac.Features.Variance.ContravariantRegistrationSource");
            feature.AddKnownType("Autofac.Util.AsyncReleaseAction`1,Autofac", "Autofac.Util.AsyncReleaseAction`1'1");
            feature.AddKnownType("Autofac.Util.Disposable,Autofac", "Autofac.Util.Disposable");
            feature.AddKnownType("Autofac.Util.EnforceResources,Autofac", "Autofac.Util.EnforceResources");
            feature.AddKnownType("Autofac.Util.FallbackDictionary`2,Autofac", "Autofac.Util.FallbackDictionary`2'2");
            feature.AddKnownType("Autofac.Util.FallbackDictionaryResources,Autofac", "Autofac.Util.FallbackDictionaryResources");
            feature.AddKnownType("Autofac.Util.ReflectionExtensionsResources,Autofac", "Autofac.Util.ReflectionExtensionsResources");
            feature.AddKnownType("Autofac.Util.ReleaseAction`1,Autofac", "Autofac.Util.ReleaseAction`1'1");
            feature.AddKnownType("Autofac.Util.ValidatedNotNullAttribute,Autofac", "Autofac.Util.ValidatedNotNullAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Autofac", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.RuntimeBinderException,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.RuntimeBinderException");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.CSharp", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Configuration.Abstractions", "Microsoft.Extensions.Configuration.IConfiguration");
            feature.AddKnownType("Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Configuration.Abstractions", "Microsoft.Extensions.Configuration.IConfigurationBuilder");
            feature.AddKnownType("Microsoft.Extensions.Configuration.IConfigurationProvider,Microsoft.Extensions.Configuration.Abstractions", "Microsoft.Extensions.Configuration.IConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.IConfigurationRoot,Microsoft.Extensions.Configuration.Abstractions", "Microsoft.Extensions.Configuration.IConfigurationRoot");
            feature.AddKnownType("Microsoft.Extensions.Configuration.IConfigurationSection,Microsoft.Extensions.Configuration.Abstractions", "Microsoft.Extensions.Configuration.IConfigurationSection");
            feature.AddKnownType("Microsoft.Extensions.Configuration.IConfigurationSource,Microsoft.Extensions.Configuration.Abstractions", "Microsoft.Extensions.Configuration.IConfigurationSource");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Configuration.Binder", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.Configuration.BinderOptions,Microsoft.Extensions.Configuration.Binder", "Microsoft.Extensions.Configuration.BinderOptions");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Configuration", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ChainedConfigurationProvider,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ChainedConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ChainedConfigurationSource,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ChainedConfigurationSource");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ConfigurationBuilder,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ConfigurationBuilder");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ConfigurationKeyComparer,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ConfigurationKeyComparer");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ConfigurationProvider,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ConfigurationReloadToken,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ConfigurationReloadToken");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ConfigurationRoot,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ConfigurationRoot");
            feature.AddKnownType("Microsoft.Extensions.Configuration.ConfigurationSection,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.ConfigurationSection");
            feature.AddKnownType("Microsoft.Extensions.Configuration.StreamConfigurationProvider,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.StreamConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.StreamConfigurationSource,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.StreamConfigurationSource");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource,Microsoft.Extensions.Configuration", "Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Configuration.FileExtensions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.Configuration.FileConfigurationProvider,Microsoft.Extensions.Configuration.FileExtensions", "Microsoft.Extensions.Configuration.FileConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.FileConfigurationSource,Microsoft.Extensions.Configuration.FileExtensions", "Microsoft.Extensions.Configuration.FileConfigurationSource");
            feature.AddKnownType("Microsoft.Extensions.Configuration.FileLoadExceptionContext,Microsoft.Extensions.Configuration.FileExtensions", "Microsoft.Extensions.Configuration.FileLoadExceptionContext");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Configuration.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Json.JsonConfigurationFileParser,Microsoft.Extensions.Configuration.Json", "Microsoft.Extensions.Configuration.Json.JsonConfigurationFileParser");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider,Microsoft.Extensions.Configuration.Json", "Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Json.JsonConfigurationSource,Microsoft.Extensions.Configuration.Json", "Microsoft.Extensions.Configuration.Json.JsonConfigurationSource");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider,Microsoft.Extensions.Configuration.Json", "Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider");
            feature.AddKnownType("Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationSource,Microsoft.Extensions.Configuration.Json", "Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationSource");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.IServiceCollection");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1'1");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.IServiceScope,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.IServiceScope");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.IServiceScopeFactory");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ISupportRequiredService,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.ISupportRequiredService");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceDescriptor,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.ServiceDescriptor");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.ServiceLifetime");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.ConstructorMatcher");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute");
            feature.AddKnownType("Microsoft.Extensions.Internal.ParameterDefaultValue,Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.Internal.ParameterDefaultValue");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute", "DynamicallyAccessedMembersAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes", "DynamicallyAccessedMemberTypes");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute", "UnconditionalSuppressMessageAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.DependencyInjection", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.CallSiteJsonFormatter,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.CallSiteJsonFormatter");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.CallSiteJsonFormatter+CallSiteFormatterContext,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.CallSiteFormatterContext");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSource,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSource");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSourceExtensions+NodeCountingVisitor,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.NodeCountingVisitor");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceCollection,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceCollection");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceProvider,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceProvider");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceProviderOptions,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceProviderOptions");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain+ChainItemInfo,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ChainItemInfo");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory+ServiceDescriptorCacheItem,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceDescriptorCacheItem");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteKind,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteKind");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteResultCacheLocation,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteResultCacheLocation");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator+CallSiteValidatorState,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidatorState");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2'2");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.CompiledServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.CompiledServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstantCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstantCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionResolverBuilder,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionResolverBuilder");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionsServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionsServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScopeFactoryCallSite,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScopeFactoryCallSite");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.StackGuard,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.StackGuard");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitCallSiteAnalysisResult,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitCallSiteAnalysisResult");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitCallSiteAnalyzer,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitCallSiteAnalyzer");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder+ILEmitResolverBuilderRuntimeContext,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilderRuntimeContext");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder+GeneratedMethod,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.GeneratedMethod");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilderContext,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilderContext");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitServiceProviderEngine,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitServiceProviderEngine");
            feature.AddKnownType("Microsoft.Extensions.Internal.ParameterDefaultValue,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Internal.ParameterDefaultValue");
            feature.AddKnownType("Microsoft.Extensions.Internal.TypeNameHelper+DisplayNameOptions,Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Internal.DisplayNameOptions");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.IDirectoryContents,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.IDirectoryContents");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.IFileInfo,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.IFileInfo");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.IFileProvider,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.IFileProvider");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.NotFoundDirectoryContents,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.NotFoundDirectoryContents");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.NotFoundFileInfo,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.NotFoundFileInfo");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.NullChangeToken,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.NullChangeToken");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.NullFileProvider,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.NullFileProvider");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.EmptyDisposable,Microsoft.Extensions.FileProviders.Abstractions", "Microsoft.Extensions.FileProviders.EmptyDisposable");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.FileProviders.Physical", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.IPollingChangeToken,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.IPollingChangeToken");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.PhysicalFileProvider,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.PhysicalFileProvider");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.EmptyDisposable,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.EmptyDisposable");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.ExclusionFilters,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.ExclusionFilters");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.Clock,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.Clock");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.IClock,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.IClock");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher+ChangeTokenInfo,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.ChangeTokenInfo");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken");
            feature.AddKnownType("Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken,Microsoft.Extensions.FileProviders.Physical", "Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Matcher,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Matcher");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.ILinearPattern,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.ILinearPattern");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.InMemoryFileInfo,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.InMemoryFileInfo");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.IPattern,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.IPattern");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.IRaggedPattern,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.IRaggedPattern");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternTestResult,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternTestResult");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.CurrentPathSegment,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.CurrentPathSegment");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.ParentPathSegment,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.ParentPathSegment");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.RecursiveWildcardSegment,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.RecursiveWildcardSegment");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContext`1,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContext`1'1");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinear,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinear");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinear+FrameData,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinear.FrameData");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearExclude,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearExclude");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearInclude,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearInclude");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged+FrameData,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged.FrameData");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedExclude,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedExclude");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedInclude,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedInclude");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.PatternBuilder,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.PatternBuilder");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.PatternBuilder+LinearPattern,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.LinearPattern");
            feature.AddKnownType("Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.PatternBuilder+RaggedPattern,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.RaggedPattern");
            feature.AddKnownType("Microsoft.Extensions.Internal.HashCodeCombiner,Microsoft.Extensions.FileSystemGlobbing", "Microsoft.Extensions.Internal.HashCodeCombiner");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Http", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.DefaultHttpClientBuilder,Microsoft.Extensions.Http", "Microsoft.Extensions.DependencyInjection.DefaultHttpClientBuilder");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.HttpClientMappingRegistry,Microsoft.Extensions.Http", "Microsoft.Extensions.DependencyInjection.HttpClientMappingRegistry");
            feature.AddKnownType("Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,Microsoft.Extensions.Http", "Microsoft.Extensions.DependencyInjection.IHttpClientBuilder");
            feature.AddKnownType("Microsoft.Extensions.Http.ActiveHandlerTrackingEntry,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.ActiveHandlerTrackingEntry");
            feature.AddKnownType("Microsoft.Extensions.Http.DefaultHttpClientFactory,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.DefaultHttpClientFactory");
            feature.AddKnownType("Microsoft.Extensions.Http.DefaultHttpMessageHandlerBuilder,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.DefaultHttpMessageHandlerBuilder");
            feature.AddKnownType("Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1'1");
            feature.AddKnownType("Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1+Cache,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1'1.Cache'1");
            feature.AddKnownType("Microsoft.Extensions.Http.ExpiredHandlerTrackingEntry,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.ExpiredHandlerTrackingEntry");
            feature.AddKnownType("Microsoft.Extensions.Http.HttpClientFactoryOptions,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.HttpClientFactoryOptions");
            feature.AddKnownType("Microsoft.Extensions.Http.HttpMessageHandlerBuilder,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.HttpMessageHandlerBuilder");
            feature.AddKnownType("Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter");
            feature.AddKnownType("Microsoft.Extensions.Http.ITypedHttpClientFactory`1,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.ITypedHttpClientFactory`1'1");
            feature.AddKnownType("Microsoft.Extensions.Http.LifetimeTrackingHttpMessageHandler,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.LifetimeTrackingHttpMessageHandler");
            feature.AddKnownType("Microsoft.Extensions.Http.LoggingHttpMessageHandlerBuilderFilter,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.LoggingHttpMessageHandlerBuilderFilter");
            feature.AddKnownType("Microsoft.Extensions.Http.Logging.HttpHeadersLogValue,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.Logging.HttpHeadersLogValue");
            feature.AddKnownType("Microsoft.Extensions.Http.Logging.HttpHeadersLogValue+Kind,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.Logging.Microsoft.Extensions.Http.Logging.HttpHeadersLogValue.Kind");
            feature.AddKnownType("Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler");
            feature.AddKnownType("Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler,Microsoft.Extensions.Http", "Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler");
            feature.AddKnownType("Microsoft.Extensions.Internal.TypeNameHelper+DisplayNameOptions,Microsoft.Extensions.Http", "Microsoft.Extensions.Internal.DisplayNameOptions");
            feature.AddKnownType("Microsoft.Extensions.Internal.ValueStopwatch,Microsoft.Extensions.Http", "Microsoft.Extensions.Internal.ValueStopwatch");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute", "DynamicallyAccessedMembersAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes", "DynamicallyAccessedMemberTypes");
            feature.AddKnownType("System.Net.Http.IHttpClientFactory", "IHttpClientFactory");
            feature.AddKnownType("System.Net.Http.IHttpMessageHandlerFactory", "IHttpMessageHandlerFactory");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Logging.Abstractions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.Internal.TypeNameHelper+DisplayNameOptions,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Internal.DisplayNameOptions");
            feature.AddKnownType("Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.EventId");
            feature.AddKnownType("Microsoft.Extensions.Logging.FormattedLogValues,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.FormattedLogValues");
            feature.AddKnownType("Microsoft.Extensions.Logging.IExternalScopeProvider,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.IExternalScopeProvider");
            feature.AddKnownType("Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.ILogger");
            feature.AddKnownType("Microsoft.Extensions.Logging.ILogger`1,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.ILogger`1'1");
            feature.AddKnownType("Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.ILoggerFactory");
            feature.AddKnownType("Microsoft.Extensions.Logging.ILoggerProvider,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.ILoggerProvider");
            feature.AddKnownType("Microsoft.Extensions.Logging.ISupportExternalScope,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.ISupportExternalScope");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerExternalScopeProvider,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LoggerExternalScopeProvider");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerExternalScopeProvider+Scope,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Scope");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues`1,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues`1'1");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues`2,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues`2'2");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues`3,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues`3'3");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues`4,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues`4'4");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues`5,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues`5'5");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerMessage+LogValues`6,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValues`6'6");
            feature.AddKnownType("Microsoft.Extensions.Logging.Logger`1,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Logger`1'1");
            feature.AddKnownType("Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogLevel");
            feature.AddKnownType("Microsoft.Extensions.Logging.LogValuesFormatter,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.LogValuesFormatter");
            feature.AddKnownType("Microsoft.Extensions.Logging.NullExternalScopeProvider,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.NullExternalScopeProvider");
            feature.AddKnownType("Microsoft.Extensions.Logging.NullScope,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.NullScope");
            feature.AddKnownType("Microsoft.Extensions.Logging.Abstractions.LogEntry`1,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Abstractions.LogEntry`1'1");
            feature.AddKnownType("Microsoft.Extensions.Logging.Abstractions.NullLogger,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Abstractions.NullLogger");
            feature.AddKnownType("Microsoft.Extensions.Logging.Abstractions.NullLogger`1,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Abstractions.NullLogger`1'1");
            feature.AddKnownType("Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory");
            feature.AddKnownType("Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider,Microsoft.Extensions.Logging.Abstractions", "Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.Extensions.Logging.ActivityTrackingOptions,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.ActivityTrackingOptions");
            feature.AddKnownType("Microsoft.Extensions.Logging.DefaultLoggerLevelConfigureOptions,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.DefaultLoggerLevelConfigureOptions");
            feature.AddKnownType("Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.ILoggingBuilder");
            feature.AddKnownType("Microsoft.Extensions.Logging.Logger,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.Logger");
            feature.AddKnownType("Microsoft.Extensions.Logging.Logger+Scope,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.Scope");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactory,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerFactory");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactory+ProviderRegistration,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.ProviderRegistration");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactory+DisposingLoggerFactory,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.DisposingLoggerFactory");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactoryOptions,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerFactoryOptions");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactoryScopeProvider,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerFactoryScopeProvider");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactoryScopeProvider+Scope,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.Scope");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFactoryScopeProvider+ActivityLogScope,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.ActivityLogScope");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFilterOptions,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerFilterOptions");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerFilterRule,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerFilterRule");
            feature.AddKnownType("Microsoft.Extensions.Logging.MessageLogger,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.MessageLogger");
            feature.AddKnownType("Microsoft.Extensions.Logging.ScopeLogger,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.ScopeLogger");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerInformation,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerInformation");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggerRuleSelector,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggerRuleSelector");
            feature.AddKnownType("Microsoft.Extensions.Logging.LoggingBuilder,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.LoggingBuilder");
            feature.AddKnownType("Microsoft.Extensions.Logging.ProviderAliasAttribute,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.ProviderAliasAttribute");
            feature.AddKnownType("Microsoft.Extensions.Logging.StaticFilterOptionsMonitor,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.StaticFilterOptionsMonitor");
            feature.AddKnownType("Microsoft.Extensions.Logging.NullExternalScopeProvider,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.NullExternalScopeProvider");
            feature.AddKnownType("Microsoft.Extensions.Logging.NullScope,Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.NullScope");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigurationChangeTokenSource`1,Microsoft.Extensions.Options.ConfigurationExtensions", "Microsoft.Extensions.Options.ConfigurationChangeTokenSource`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureFromConfigurationOptions`1,Microsoft.Extensions.Options.ConfigurationExtensions", "Microsoft.Extensions.Options.ConfigureFromConfigurationOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.NamedConfigureFromConfigurationOptions`1,Microsoft.Extensions.Options.ConfigurationExtensions", "Microsoft.Extensions.Options.NamedConfigureFromConfigurationOptions`1'1");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Extensions.Options", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureNamedOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureNamedOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureNamedOptions`2,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureNamedOptions`2'2");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureNamedOptions`3,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureNamedOptions`3'3");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureNamedOptions`4,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureNamedOptions`4'4");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureNamedOptions`5,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureNamedOptions`5'5");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureNamedOptions`6,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureNamedOptions`6'6");
            feature.AddKnownType("Microsoft.Extensions.Options.ConfigureOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ConfigureOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IConfigureNamedOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IConfigureNamedOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IConfigureOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IConfigureOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IOptionsChangeTokenSource`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IOptionsChangeTokenSource`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IOptionsFactory`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IOptionsFactory`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IOptionsMonitor`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IOptionsMonitor`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IOptionsMonitorCache`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IOptionsMonitorCache`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IOptionsSnapshot`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IOptionsSnapshot`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IPostConfigureOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IPostConfigureOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.IValidateOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.IValidateOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsBuilder`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsBuilder`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsCache`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsCache`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsFactory`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsFactory`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsManager`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsManager`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsMonitor`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsMonitor`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsMonitor`1+ChangeTrackerDisposable,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ChangeTrackerDisposable'1");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsValidationException,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsValidationException");
            feature.AddKnownType("Microsoft.Extensions.Options.OptionsWrapper`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.OptionsWrapper`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.PostConfigureOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.PostConfigureOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.PostConfigureOptions`2,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.PostConfigureOptions`2'2");
            feature.AddKnownType("Microsoft.Extensions.Options.PostConfigureOptions`3,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.PostConfigureOptions`3'3");
            feature.AddKnownType("Microsoft.Extensions.Options.PostConfigureOptions`4,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.PostConfigureOptions`4'4");
            feature.AddKnownType("Microsoft.Extensions.Options.PostConfigureOptions`5,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.PostConfigureOptions`5'5");
            feature.AddKnownType("Microsoft.Extensions.Options.PostConfigureOptions`6,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.PostConfigureOptions`6'6");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptions`1,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptions`1'1");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptions`2,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptions`2'2");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptions`3,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptions`3'3");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptions`4,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptions`4'4");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptions`5,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptions`5'5");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptions`6,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptions`6'6");
            feature.AddKnownType("Microsoft.Extensions.Options.ValidateOptionsResult,Microsoft.Extensions.Options", "Microsoft.Extensions.Options.ValidateOptionsResult");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.Extensions.Internal.HashCodeCombiner,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Internal.HashCodeCombiner");
            feature.AddKnownType("Microsoft.Extensions.Primitives.CancellationChangeToken,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.CancellationChangeToken");
            feature.AddKnownType("Microsoft.Extensions.Primitives.CancellationChangeToken+NullDisposable,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.NullDisposable");
            feature.AddKnownType("Microsoft.Extensions.Primitives.ChangeToken+ChangeTokenRegistration`1,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.ChangeTokenRegistration`1'1");
            feature.AddKnownType("Microsoft.Extensions.Primitives.ChangeToken+ChangeTokenRegistration`1+NoopDisposable,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.NoopDisposable'1");
            feature.AddKnownType("Microsoft.Extensions.Primitives.CompositeChangeToken,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.CompositeChangeToken");
            feature.AddKnownType("Microsoft.Extensions.Primitives.IChangeToken,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.IChangeToken");
            feature.AddKnownType("Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.StringSegment");
            feature.AddKnownType("Microsoft.Extensions.Primitives.StringSegmentComparer,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.StringSegmentComparer");
            feature.AddKnownType("Microsoft.Extensions.Primitives.StringTokenizer,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.StringTokenizer");
            feature.AddKnownType("Microsoft.Extensions.Primitives.StringTokenizer+Enumerator,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.Microsoft.Extensions.Primitives.StringTokenizer.Enumerator");
            feature.AddKnownType("Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.StringValues");
            feature.AddKnownType("Microsoft.Extensions.Primitives.StringValues+Enumerator,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.Microsoft.Extensions.Primitives.StringValues.Enumerator");
            feature.AddKnownType("Microsoft.Extensions.Primitives.ExceptionArgument,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.ExceptionArgument");
            feature.AddKnownType("Microsoft.Extensions.Primitives.ExceptionResource,Microsoft.Extensions.Primitives", "Microsoft.Extensions.Primitives.ExceptionResource");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.VisualBasic.Core", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.AppWinStyle,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.AppWinStyle");
            feature.AddKnownType("Microsoft.VisualBasic.CallType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CallType");
            feature.AddKnownType("Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Collection");
            feature.AddKnownType("Microsoft.VisualBasic.ComClassAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.ComClassAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompareMethod,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompareMethod");
            feature.AddKnownType("Microsoft.VisualBasic.Constants,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Constants");
            feature.AddKnownType("Microsoft.VisualBasic.ControlChars,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.ControlChars");
            feature.AddKnownType("Microsoft.VisualBasic.Conversion,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Conversion");
            feature.AddKnownType("Microsoft.VisualBasic.DateAndTime,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DateAndTime");
            feature.AddKnownType("Microsoft.VisualBasic.DateFormat,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DateFormat");
            feature.AddKnownType("Microsoft.VisualBasic.DateInterval,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DateInterval");
            feature.AddKnownType("Microsoft.VisualBasic.DueDate,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DueDate");
            feature.AddKnownType("Microsoft.VisualBasic.ErrObject,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.ErrObject");
            feature.AddKnownType("Microsoft.VisualBasic.FileAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.FileSystem,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileSystem");
            feature.AddKnownType("Microsoft.VisualBasic.Financial,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Financial");
            feature.AddKnownType("Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FirstDayOfWeek");
            feature.AddKnownType("Microsoft.VisualBasic.FirstWeekOfYear,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FirstWeekOfYear");
            feature.AddKnownType("Microsoft.VisualBasic.HideModuleNameAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.HideModuleNameAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.Information,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Information");
            feature.AddKnownType("Microsoft.VisualBasic.Interaction,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Interaction");
            feature.AddKnownType("Microsoft.VisualBasic.MsgBoxResult,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.MsgBoxResult");
            feature.AddKnownType("Microsoft.VisualBasic.MsgBoxStyle,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.MsgBoxStyle");
            feature.AddKnownType("Microsoft.VisualBasic.MyGroupCollectionAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.MyGroupCollectionAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.OpenAccess");
            feature.AddKnownType("Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.OpenMode");
            feature.AddKnownType("Microsoft.VisualBasic.OpenShare,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.OpenShare");
            feature.AddKnownType("Microsoft.VisualBasic.SpcInfo,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.SpcInfo");
            feature.AddKnownType("Microsoft.VisualBasic.Strings,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Strings");
            feature.AddKnownType("Microsoft.VisualBasic.TabInfo,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.TabInfo");
            feature.AddKnownType("Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.TriState");
            feature.AddKnownType("Microsoft.VisualBasic.VariantType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VariantType");
            feature.AddKnownType("Microsoft.VisualBasic.VBFixedArrayAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VBFixedArrayAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.VBFixedStringAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VBFixedStringAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.VBMath,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VBMath");
            feature.AddKnownType("Microsoft.VisualBasic.VbStrConv,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VbStrConv");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.BooleanType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.BooleanType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ByteType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ByteType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.CharArrayType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.CharArrayType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.CharType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.CharType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Conversions,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Conversions");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DateType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DateType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DecimalType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DecimalType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DoubleType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DoubleType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.IncompleteInitialization,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.IncompleteInitialization");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.IntegerType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.IntegerType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.LateBinding,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.LateBinding");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.LikeOperator,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.LikeOperator");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.LongType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.LongType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.NewLateBinding,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.NewLateBinding");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ObjectFlowControl,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ObjectFlowControl");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ObjectFlowControl+ForLoopControl,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ObjectType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ObjectType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Operators,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Operators");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.OptionTextAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.OptionTextAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ProjectData,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ProjectData");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ShortType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ShortType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.SingleType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.SingleType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.StringType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.StringType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Utils,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Utils");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Versioned,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Versioned");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.DeleteDirectoryOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.DeleteDirectoryOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.FieldType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.FieldType");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.FileSystem,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.FileSystem");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.MalformedLineException,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.MalformedLineException");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.RecycleOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.SearchOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.SearchOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.SpecialDirectories,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.SpecialDirectories");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.TextFieldParser,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.TextFieldParser");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.UICancelOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.UICancelOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.UIOption");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Win32.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.Win32Exception", "Win32Exception");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Newtonsoft.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Newtonsoft.Json.ConstructorHandling,Newtonsoft.Json", "Newtonsoft.Json.ConstructorHandling");
            feature.AddKnownType("Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json", "Newtonsoft.Json.DateFormatHandling");
            feature.AddKnownType("Newtonsoft.Json.DateParseHandling,Newtonsoft.Json", "Newtonsoft.Json.DateParseHandling");
            feature.AddKnownType("Newtonsoft.Json.DateTimeZoneHandling,Newtonsoft.Json", "Newtonsoft.Json.DateTimeZoneHandling");
            feature.AddKnownType("Newtonsoft.Json.DefaultJsonNameTable,Newtonsoft.Json", "Newtonsoft.Json.DefaultJsonNameTable");
            feature.AddKnownType("Newtonsoft.Json.DefaultJsonNameTable+Entry,Newtonsoft.Json", "Newtonsoft.Json.Entry");
            feature.AddKnownType("Newtonsoft.Json.DefaultValueHandling,Newtonsoft.Json", "Newtonsoft.Json.DefaultValueHandling");
            feature.AddKnownType("Newtonsoft.Json.FloatFormatHandling,Newtonsoft.Json", "Newtonsoft.Json.FloatFormatHandling");
            feature.AddKnownType("Newtonsoft.Json.FloatParseHandling,Newtonsoft.Json", "Newtonsoft.Json.FloatParseHandling");
            feature.AddKnownType("Newtonsoft.Json.Formatting,Newtonsoft.Json", "Newtonsoft.Json.Formatting");
            feature.AddKnownType("Newtonsoft.Json.IArrayPool`1,Newtonsoft.Json", "Newtonsoft.Json.IArrayPool`1'1");
            feature.AddKnownType("Newtonsoft.Json.IJsonLineInfo,Newtonsoft.Json", "Newtonsoft.Json.IJsonLineInfo");
            feature.AddKnownType("Newtonsoft.Json.JsonArrayAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonArrayAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonConstructorAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonConstructorAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonContainerAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonContainerAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonConverter,Newtonsoft.Json", "Newtonsoft.Json.JsonConverter");
            feature.AddKnownType("Newtonsoft.Json.JsonConverter`1,Newtonsoft.Json", "Newtonsoft.Json.JsonConverter`1'1");
            feature.AddKnownType("Newtonsoft.Json.JsonConverterAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonConverterAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonConverterCollection,Newtonsoft.Json", "Newtonsoft.Json.JsonConverterCollection");
            feature.AddKnownType("Newtonsoft.Json.JsonDictionaryAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonDictionaryAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonException,Newtonsoft.Json", "Newtonsoft.Json.JsonException");
            feature.AddKnownType("Newtonsoft.Json.JsonExtensionDataAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonExtensionDataAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonIgnoreAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonIgnoreAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonNameTable,Newtonsoft.Json", "Newtonsoft.Json.JsonNameTable");
            feature.AddKnownType("Newtonsoft.Json.JsonObjectAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonObjectAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonContainerType,Newtonsoft.Json", "Newtonsoft.Json.JsonContainerType");
            feature.AddKnownType("Newtonsoft.Json.JsonPosition,Newtonsoft.Json", "Newtonsoft.Json.JsonPosition");
            feature.AddKnownType("Newtonsoft.Json.JsonPropertyAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonPropertyAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonReader,Newtonsoft.Json", "Newtonsoft.Json.JsonReader");
            feature.AddKnownType("Newtonsoft.Json.JsonReader+State,Newtonsoft.Json", "Newtonsoft.Json.State");
            feature.AddKnownType("Newtonsoft.Json.JsonReaderException,Newtonsoft.Json", "Newtonsoft.Json.JsonReaderException");
            feature.AddKnownType("Newtonsoft.Json.JsonRequiredAttribute,Newtonsoft.Json", "Newtonsoft.Json.JsonRequiredAttribute");
            feature.AddKnownType("Newtonsoft.Json.JsonSerializationException,Newtonsoft.Json", "Newtonsoft.Json.JsonSerializationException");
            feature.AddKnownType("Newtonsoft.Json.JsonSerializer,Newtonsoft.Json", "Newtonsoft.Json.JsonSerializer");
            feature.AddKnownType("Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json", "Newtonsoft.Json.JsonSerializerSettings");
            feature.AddKnownType("Newtonsoft.Json.JsonTextReader,Newtonsoft.Json", "Newtonsoft.Json.JsonTextReader");
            feature.AddKnownType("Newtonsoft.Json.ReadType,Newtonsoft.Json", "Newtonsoft.Json.ReadType");
            feature.AddKnownType("Newtonsoft.Json.JsonTextWriter,Newtonsoft.Json", "Newtonsoft.Json.JsonTextWriter");
            feature.AddKnownType("Newtonsoft.Json.JsonToken,Newtonsoft.Json", "Newtonsoft.Json.JsonToken");
            feature.AddKnownType("Newtonsoft.Json.JsonValidatingReader,Newtonsoft.Json", "Newtonsoft.Json.JsonValidatingReader");
            feature.AddKnownType("Newtonsoft.Json.JsonValidatingReader+SchemaScope,Newtonsoft.Json", "Newtonsoft.Json.SchemaScope");
            feature.AddKnownType("Newtonsoft.Json.JsonWriter,Newtonsoft.Json", "Newtonsoft.Json.JsonWriter");
            feature.AddKnownType("Newtonsoft.Json.JsonWriter+State,Newtonsoft.Json", "Newtonsoft.Json.State");
            feature.AddKnownType("Newtonsoft.Json.JsonWriterException,Newtonsoft.Json", "Newtonsoft.Json.JsonWriterException");
            feature.AddKnownType("Newtonsoft.Json.MemberSerialization,Newtonsoft.Json", "Newtonsoft.Json.MemberSerialization");
            feature.AddKnownType("Newtonsoft.Json.MetadataPropertyHandling,Newtonsoft.Json", "Newtonsoft.Json.MetadataPropertyHandling");
            feature.AddKnownType("Newtonsoft.Json.MissingMemberHandling,Newtonsoft.Json", "Newtonsoft.Json.MissingMemberHandling");
            feature.AddKnownType("Newtonsoft.Json.NullValueHandling,Newtonsoft.Json", "Newtonsoft.Json.NullValueHandling");
            feature.AddKnownType("Newtonsoft.Json.ObjectCreationHandling,Newtonsoft.Json", "Newtonsoft.Json.ObjectCreationHandling");
            feature.AddKnownType("Newtonsoft.Json.PreserveReferencesHandling,Newtonsoft.Json", "Newtonsoft.Json.PreserveReferencesHandling");
            feature.AddKnownType("Newtonsoft.Json.ReferenceLoopHandling,Newtonsoft.Json", "Newtonsoft.Json.ReferenceLoopHandling");
            feature.AddKnownType("Newtonsoft.Json.Required,Newtonsoft.Json", "Newtonsoft.Json.Required");
            feature.AddKnownType("Newtonsoft.Json.StringEscapeHandling,Newtonsoft.Json", "Newtonsoft.Json.StringEscapeHandling");
            feature.AddKnownType("Newtonsoft.Json.TypeNameAssemblyFormatHandling,Newtonsoft.Json", "Newtonsoft.Json.TypeNameAssemblyFormatHandling");
            feature.AddKnownType("Newtonsoft.Json.TypeNameHandling,Newtonsoft.Json", "Newtonsoft.Json.TypeNameHandling");
            feature.AddKnownType("Newtonsoft.Json.WriteState,Newtonsoft.Json", "Newtonsoft.Json.WriteState");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonBinaryType,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonBinaryType");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonBinaryWriter,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonBinaryWriter");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonObjectId,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonObjectId");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonReader,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonReader");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonReader+BsonReaderState,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonReaderState");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonReader+ContainerContext,Newtonsoft.Json", "Newtonsoft.Json.Bson.ContainerContext");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonToken,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonToken");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonObject,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonObject");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonArray,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonArray");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonEmpty,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonEmpty");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonValue,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonValue");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonBoolean,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonBoolean");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonString,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonString");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonBinary,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonBinary");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonRegex,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonRegex");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonProperty,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonProperty");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonType,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonType");
            feature.AddKnownType("Newtonsoft.Json.Bson.BsonWriter,Newtonsoft.Json", "Newtonsoft.Json.Bson.BsonWriter");
            feature.AddKnownType("Newtonsoft.Json.Converters.BinaryConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.BinaryConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.BsonObjectIdConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.BsonObjectIdConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.CustomCreationConverter`1,Newtonsoft.Json", "Newtonsoft.Json.Converters.CustomCreationConverter`1'1");
            feature.AddKnownType("Newtonsoft.Json.Converters.DataSetConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.DataSetConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.DataTableConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.DataTableConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.DateTimeConverterBase,Newtonsoft.Json", "Newtonsoft.Json.Converters.DateTimeConverterBase");
            feature.AddKnownType("Newtonsoft.Json.Converters.DiscriminatedUnionConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.DiscriminatedUnionConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.DiscriminatedUnionConverter+Union,Newtonsoft.Json", "Newtonsoft.Json.Converters.Union");
            feature.AddKnownType("Newtonsoft.Json.Converters.DiscriminatedUnionConverter+UnionCase,Newtonsoft.Json", "Newtonsoft.Json.Converters.UnionCase");
            feature.AddKnownType("Newtonsoft.Json.Converters.EntityKeyMemberConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.EntityKeyMemberConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.ExpandoObjectConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.ExpandoObjectConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.IsoDateTimeConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.IsoDateTimeConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.JavaScriptDateTimeConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.JavaScriptDateTimeConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.KeyValuePairConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.KeyValuePairConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.RegexConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.RegexConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.StringEnumConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.StringEnumConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.UnixDateTimeConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.UnixDateTimeConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.VersionConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.VersionConverter");
            feature.AddKnownType("Newtonsoft.Json.Converters.XmlDocumentWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XmlDocumentWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XmlElementWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XmlElementWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XmlDeclarationWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XmlDeclarationWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XmlDocumentTypeWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XmlDocumentTypeWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XmlNodeWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XmlNodeWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.IXmlDocument,Newtonsoft.Json", "Newtonsoft.Json.Converters.IXmlDocument");
            feature.AddKnownType("Newtonsoft.Json.Converters.IXmlDeclaration,Newtonsoft.Json", "Newtonsoft.Json.Converters.IXmlDeclaration");
            feature.AddKnownType("Newtonsoft.Json.Converters.IXmlDocumentType,Newtonsoft.Json", "Newtonsoft.Json.Converters.IXmlDocumentType");
            feature.AddKnownType("Newtonsoft.Json.Converters.IXmlElement,Newtonsoft.Json", "Newtonsoft.Json.Converters.IXmlElement");
            feature.AddKnownType("Newtonsoft.Json.Converters.IXmlNode,Newtonsoft.Json", "Newtonsoft.Json.Converters.IXmlNode");
            feature.AddKnownType("Newtonsoft.Json.Converters.XDeclarationWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XDeclarationWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XDocumentTypeWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XDocumentTypeWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XDocumentWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XDocumentWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XTextWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XTextWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XCommentWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XCommentWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XProcessingInstructionWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XProcessingInstructionWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XContainerWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XContainerWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XObjectWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XObjectWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XAttributeWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XAttributeWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XElementWrapper,Newtonsoft.Json", "Newtonsoft.Json.Converters.XElementWrapper");
            feature.AddKnownType("Newtonsoft.Json.Converters.XmlNodeConverter,Newtonsoft.Json", "Newtonsoft.Json.Converters.XmlNodeConverter");
            feature.AddKnownType("Newtonsoft.Json.Linq.CommentHandling,Newtonsoft.Json", "Newtonsoft.Json.Linq.CommentHandling");
            feature.AddKnownType("Newtonsoft.Json.Linq.DuplicatePropertyNameHandling,Newtonsoft.Json", "Newtonsoft.Json.Linq.DuplicatePropertyNameHandling");
            feature.AddKnownType("Newtonsoft.Json.Linq.IJEnumerable`1,Newtonsoft.Json", "Newtonsoft.Json.Linq.IJEnumerable`1'1");
            feature.AddKnownType("Newtonsoft.Json.Linq.JArray,Newtonsoft.Json", "Newtonsoft.Json.Linq.JArray");
            feature.AddKnownType("Newtonsoft.Json.Linq.JConstructor,Newtonsoft.Json", "Newtonsoft.Json.Linq.JConstructor");
            feature.AddKnownType("Newtonsoft.Json.Linq.JContainer,Newtonsoft.Json", "Newtonsoft.Json.Linq.JContainer");
            feature.AddKnownType("Newtonsoft.Json.Linq.JEnumerable`1,Newtonsoft.Json", "Newtonsoft.Json.Linq.JEnumerable`1'1");
            feature.AddKnownType("Newtonsoft.Json.Linq.JObject,Newtonsoft.Json", "Newtonsoft.Json.Linq.JObject");
            feature.AddKnownType("Newtonsoft.Json.Linq.JObject+JObjectDynamicProxy,Newtonsoft.Json", "Newtonsoft.Json.Linq.JObjectDynamicProxy");
            feature.AddKnownType("Newtonsoft.Json.Linq.JProperty,Newtonsoft.Json", "Newtonsoft.Json.Linq.JProperty");
            feature.AddKnownType("Newtonsoft.Json.Linq.JProperty+JPropertyList,Newtonsoft.Json", "Newtonsoft.Json.Linq.JPropertyList");
            feature.AddKnownType("Newtonsoft.Json.Linq.JPropertyDescriptor,Newtonsoft.Json", "Newtonsoft.Json.Linq.JPropertyDescriptor");
            feature.AddKnownType("Newtonsoft.Json.Linq.JPropertyKeyedCollection,Newtonsoft.Json", "Newtonsoft.Json.Linq.JPropertyKeyedCollection");
            feature.AddKnownType("Newtonsoft.Json.Linq.JRaw,Newtonsoft.Json", "Newtonsoft.Json.Linq.JRaw");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonLoadSettings,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonLoadSettings");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonMergeSettings,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonMergeSettings");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonSelectSettings,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonSelectSettings");
            feature.AddKnownType("Newtonsoft.Json.Linq.JToken,Newtonsoft.Json", "Newtonsoft.Json.Linq.JToken");
            feature.AddKnownType("Newtonsoft.Json.Linq.JToken+LineInfoAnnotation,Newtonsoft.Json", "Newtonsoft.Json.Linq.LineInfoAnnotation");
            feature.AddKnownType("Newtonsoft.Json.Linq.JTokenEqualityComparer,Newtonsoft.Json", "Newtonsoft.Json.Linq.JTokenEqualityComparer");
            feature.AddKnownType("Newtonsoft.Json.Linq.JTokenReader,Newtonsoft.Json", "Newtonsoft.Json.Linq.JTokenReader");
            feature.AddKnownType("Newtonsoft.Json.Linq.JTokenType,Newtonsoft.Json", "Newtonsoft.Json.Linq.JTokenType");
            feature.AddKnownType("Newtonsoft.Json.Linq.JTokenWriter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JTokenWriter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JValue,Newtonsoft.Json", "Newtonsoft.Json.Linq.JValue");
            feature.AddKnownType("Newtonsoft.Json.Linq.JValue+JValueDynamicProxy,Newtonsoft.Json", "Newtonsoft.Json.Linq.JValueDynamicProxy");
            feature.AddKnownType("Newtonsoft.Json.Linq.LineInfoHandling,Newtonsoft.Json", "Newtonsoft.Json.Linq.LineInfoHandling");
            feature.AddKnownType("Newtonsoft.Json.Linq.MergeArrayHandling,Newtonsoft.Json", "Newtonsoft.Json.Linq.MergeArrayHandling");
            feature.AddKnownType("Newtonsoft.Json.Linq.MergeNullValueHandling,Newtonsoft.Json", "Newtonsoft.Json.Linq.MergeNullValueHandling");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.FieldFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.FieldFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.JPath,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.JPath");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.PathFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.PathFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.QueryOperator,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.QueryOperator");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.QueryExpression,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.QueryExpression");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.CompositeExpression,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.CompositeExpression");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.QueryFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.QueryFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.QueryScanFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.QueryScanFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.RootFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.RootFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.ScanFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.ScanFilter");
            feature.AddKnownType("Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter,Newtonsoft.Json", "Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchema");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaBuilder,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaBuilder");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaException,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaException");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaGenerator,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaGenerator");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaGenerator+TypeSchema,Newtonsoft.Json", "Newtonsoft.Json.Schema.TypeSchema");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaModel,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaModel");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaModelBuilder,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaModelBuilder");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaNode,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaNode");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaNodeCollection,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaNodeCollection");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaResolver,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaResolver");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaType,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaType");
            feature.AddKnownType("Newtonsoft.Json.Schema.JsonSchemaWriter,Newtonsoft.Json", "Newtonsoft.Json.Schema.JsonSchemaWriter");
            feature.AddKnownType("Newtonsoft.Json.Schema.UndefinedSchemaIdHandling,Newtonsoft.Json", "Newtonsoft.Json.Schema.UndefinedSchemaIdHandling");
            feature.AddKnownType("Newtonsoft.Json.Schema.ValidationEventArgs,Newtonsoft.Json", "Newtonsoft.Json.Schema.ValidationEventArgs");
            feature.AddKnownType("Newtonsoft.Json.Serialization.CamelCaseNamingStrategy,Newtonsoft.Json", "Newtonsoft.Json.Serialization.CamelCaseNamingStrategy");
            feature.AddKnownType("Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver,Newtonsoft.Json", "Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver");
            feature.AddKnownType("Newtonsoft.Json.Serialization.DefaultContractResolver,Newtonsoft.Json", "Newtonsoft.Json.Serialization.DefaultContractResolver");
            feature.AddKnownType("Newtonsoft.Json.Serialization.DefaultContractResolver+EnumerableDictionaryWrapper`2,Newtonsoft.Json", "Newtonsoft.Json.Serialization.EnumerableDictionaryWrapper`2'2");
            feature.AddKnownType("Newtonsoft.Json.Serialization.DefaultNamingStrategy,Newtonsoft.Json", "Newtonsoft.Json.Serialization.DefaultNamingStrategy");
            feature.AddKnownType("Newtonsoft.Json.Serialization.DefaultReferenceResolver,Newtonsoft.Json", "Newtonsoft.Json.Serialization.DefaultReferenceResolver");
            feature.AddKnownType("Newtonsoft.Json.Serialization.DefaultSerializationBinder,Newtonsoft.Json", "Newtonsoft.Json.Serialization.DefaultSerializationBinder");
            feature.AddKnownType("Newtonsoft.Json.Serialization.DiagnosticsTraceWriter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.DiagnosticsTraceWriter");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ErrorContext,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ErrorContext");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ErrorEventArgs,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ErrorEventArgs");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ExpressionValueProvider,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ExpressionValueProvider");
            feature.AddKnownType("Newtonsoft.Json.Serialization.IAttributeProvider,Newtonsoft.Json", "Newtonsoft.Json.Serialization.IAttributeProvider");
            feature.AddKnownType("Newtonsoft.Json.Serialization.IContractResolver,Newtonsoft.Json", "Newtonsoft.Json.Serialization.IContractResolver");
            feature.AddKnownType("Newtonsoft.Json.Serialization.IReferenceResolver,Newtonsoft.Json", "Newtonsoft.Json.Serialization.IReferenceResolver");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ISerializationBinder,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ISerializationBinder");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ITraceWriter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ITraceWriter");
            feature.AddKnownType("Newtonsoft.Json.Serialization.IValueProvider,Newtonsoft.Json", "Newtonsoft.Json.Serialization.IValueProvider");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonArrayContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonArrayContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonContainerContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonContainerContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonContractType,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonContractType");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonDictionaryContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonDictionaryContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonDynamicContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonDynamicContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonFormatterConverter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonFormatterConverter");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonISerializableContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonISerializableContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonLinqContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonLinqContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonObjectContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonObjectContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonPrimitiveContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonPrimitiveContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonProperty");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonPropertyCollection,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonPropertyCollection");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerInternalBase,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonSerializerInternalBase");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerInternalBase+ReferenceEqualsEqualityComparer,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ReferenceEqualsEqualityComparer");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerInternalReader,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonSerializerInternalReader");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerInternalReader+PropertyPresence,Newtonsoft.Json", "Newtonsoft.Json.Serialization.PropertyPresence");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerInternalReader+CreatorPropertyContext,Newtonsoft.Json", "Newtonsoft.Json.Serialization.CreatorPropertyContext");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerInternalWriter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonSerializerInternalWriter");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonSerializerProxy,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonSerializerProxy");
            feature.AddKnownType("Newtonsoft.Json.Serialization.JsonStringContract,Newtonsoft.Json", "Newtonsoft.Json.Serialization.JsonStringContract");
            feature.AddKnownType("Newtonsoft.Json.Serialization.KebabCaseNamingStrategy,Newtonsoft.Json", "Newtonsoft.Json.Serialization.KebabCaseNamingStrategy");
            feature.AddKnownType("Newtonsoft.Json.Serialization.MemoryTraceWriter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.MemoryTraceWriter");
            feature.AddKnownType("Newtonsoft.Json.Serialization.NamingStrategy,Newtonsoft.Json", "Newtonsoft.Json.Serialization.NamingStrategy");
            feature.AddKnownType("Newtonsoft.Json.Serialization.OnErrorAttribute,Newtonsoft.Json", "Newtonsoft.Json.Serialization.OnErrorAttribute");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ReflectionAttributeProvider,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ReflectionAttributeProvider");
            feature.AddKnownType("Newtonsoft.Json.Serialization.ReflectionValueProvider,Newtonsoft.Json", "Newtonsoft.Json.Serialization.ReflectionValueProvider");
            feature.AddKnownType("Newtonsoft.Json.Serialization.SerializationBinderAdapter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.SerializationBinderAdapter");
            feature.AddKnownType("Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy,Newtonsoft.Json", "Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy");
            feature.AddKnownType("Newtonsoft.Json.Serialization.TraceJsonReader,Newtonsoft.Json", "Newtonsoft.Json.Serialization.TraceJsonReader");
            feature.AddKnownType("Newtonsoft.Json.Serialization.TraceJsonWriter,Newtonsoft.Json", "Newtonsoft.Json.Serialization.TraceJsonWriter");
            feature.AddKnownType("Newtonsoft.Json.Utilities.Base64Encoder,Newtonsoft.Json", "Newtonsoft.Json.Utilities.Base64Encoder");
            feature.AddKnownType("Newtonsoft.Json.Utilities.BidirectionalDictionary`2,Newtonsoft.Json", "Newtonsoft.Json.Utilities.BidirectionalDictionary`2'2");
            feature.AddKnownType("Newtonsoft.Json.Utilities.IWrappedCollection,Newtonsoft.Json", "Newtonsoft.Json.Utilities.IWrappedCollection");
            feature.AddKnownType("Newtonsoft.Json.Utilities.CollectionWrapper`1,Newtonsoft.Json", "Newtonsoft.Json.Utilities.CollectionWrapper`1'1");
            feature.AddKnownType("Newtonsoft.Json.Utilities.PrimitiveTypeCode,Newtonsoft.Json", "Newtonsoft.Json.Utilities.PrimitiveTypeCode");
            feature.AddKnownType("Newtonsoft.Json.Utilities.TypeInformation,Newtonsoft.Json", "Newtonsoft.Json.Utilities.TypeInformation");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ParseResult,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ParseResult");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ConvertUtils+ConvertResult,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ConvertResult");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ParserTimeZone,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ParserTimeZone");
            feature.AddKnownType("Newtonsoft.Json.Utilities.DateTimeParser,Newtonsoft.Json", "Newtonsoft.Json.Utilities.DateTimeParser");
            feature.AddKnownType("Newtonsoft.Json.Utilities.IWrappedDictionary,Newtonsoft.Json", "Newtonsoft.Json.Utilities.IWrappedDictionary");
            feature.AddKnownType("Newtonsoft.Json.Utilities.DictionaryWrapper`2,Newtonsoft.Json", "Newtonsoft.Json.Utilities.DictionaryWrapper`2'2");
            feature.AddKnownType("Newtonsoft.Json.Utilities.DictionaryWrapper`2+DictionaryEnumerator`2,Newtonsoft.Json", "Newtonsoft.Json.Utilities.DictionaryEnumerator`2'4");
            feature.AddKnownType("Newtonsoft.Json.Utilities.DynamicProxy`1,Newtonsoft.Json", "Newtonsoft.Json.Utilities.DynamicProxy`1'1");
            feature.AddKnownType("Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1,Newtonsoft.Json", "Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1'1");
            feature.AddKnownType("Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1+GetBinderAdapter,Newtonsoft.Json", "Newtonsoft.Json.Utilities.GetBinderAdapter'1");
            feature.AddKnownType("Newtonsoft.Json.Utilities.NoThrowGetBinderMember,Newtonsoft.Json", "Newtonsoft.Json.Utilities.NoThrowGetBinderMember");
            feature.AddKnownType("Newtonsoft.Json.Utilities.NoThrowSetBinderMember,Newtonsoft.Json", "Newtonsoft.Json.Utilities.NoThrowSetBinderMember");
            feature.AddKnownType("Newtonsoft.Json.Utilities.NoThrowExpressionVisitor,Newtonsoft.Json", "Newtonsoft.Json.Utilities.NoThrowExpressionVisitor");
            feature.AddKnownType("Newtonsoft.Json.Utilities.EnumInfo,Newtonsoft.Json", "Newtonsoft.Json.Utilities.EnumInfo");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory+ByRefParameter,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ByRefParameter");
            feature.AddKnownType("Newtonsoft.Json.Utilities.FSharpFunction,Newtonsoft.Json", "Newtonsoft.Json.Utilities.FSharpFunction");
            feature.AddKnownType("Newtonsoft.Json.Utilities.FSharpUtils,Newtonsoft.Json", "Newtonsoft.Json.Utilities.FSharpUtils");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ImmutableCollectionsUtils+ImmutableCollectionTypeInfo,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ImmutableCollectionTypeInfo");
            feature.AddKnownType("Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory,Newtonsoft.Json", "Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ReflectionDelegateFactory,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ReflectionDelegateFactory");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ReflectionMember,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ReflectionMember");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ReflectionObject,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ReflectionObject");
            feature.AddKnownType("Newtonsoft.Json.Utilities.StringBuffer,Newtonsoft.Json", "Newtonsoft.Json.Utilities.StringBuffer");
            feature.AddKnownType("Newtonsoft.Json.Utilities.StringReference,Newtonsoft.Json", "Newtonsoft.Json.Utilities.StringReference");
            feature.AddKnownType("Newtonsoft.Json.Utilities.StringUtils+SeparatedCaseState,Newtonsoft.Json", "Newtonsoft.Json.Utilities.SeparatedCaseState");
            feature.AddKnownType("Newtonsoft.Json.Utilities.StructMultiKey`2,Newtonsoft.Json", "Newtonsoft.Json.Utilities.StructMultiKey`2'2");
            feature.AddKnownType("Newtonsoft.Json.Utilities.ThreadSafeStore`2,Newtonsoft.Json", "Newtonsoft.Json.Utilities.ThreadSafeStore`2'2");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.IRegisterInjections,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.IRegisterInjections");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.LimitedConcurrencyLevelTaskScheduler,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.LimitedConcurrencyLevelTaskScheduler");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Config.EnvironmentConfig,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Config.EnvironmentConfig");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Config.OrleansConfig,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Config.OrleansConfig");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Config.OrleansNodeConfig,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Config.OrleansNodeConfig");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Config.PoolConfig,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Config.PoolConfig");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Enums.Environments,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Enums.Environments");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Enums.StatusCode,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Enums.StatusCode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Interfaces.IDbConnectionFactory,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Interfaces.IDbConnectionFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Interfaces.IDbConnectionStringFactory,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Interfaces.IDbConnectionStringFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Services.DbConnectionStringFactory,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Services.DbConnectionStringFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Services.SqlDbConnectionFactory,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Services.SqlDbConnectionFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Common.Targets.SerilogTarget,NIST.CVP.ACVTS.Libraries.Common", "NIST.CVP.ACVTS.Libraries.Common.Targets.SerilogTarget");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.ICryptoParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.ICryptoParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.ICryptoResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.ICryptoResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.IPreSigVerMessageRandomizer,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.IPreSigVerMessageRandomizer");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.IPreSigVerMessageRandomizerBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.IPreSigVerMessageRandomizerBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersGenerateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersGenerateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersValidateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersValidateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDomainParametersValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsa`11,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsa`11'11");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaFactory`12,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaFactory`12'12");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaSignature,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaSignature");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaSignatureResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IDsaVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IKeyPairGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IKeyPairGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IKeyPairValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.IKeyPairValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersGenerateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersGenerateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersValidateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersValidateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccDomainParametersValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccKeyPairGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccKeyPairGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccKeyPairValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccKeyPairValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccSignatureResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.EccVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IDsaEcc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IDsaEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IDsaEccFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IDsaEccFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccCurve,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccCurve");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccCurveFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccCurveFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccNonceProvider,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccNonceProvider");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccNonceProviderFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IEccNonceProviderFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IFieldOperator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.IFieldOperator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.CurveType,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.CurveType");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.SecretGenerationMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Enums.SecretGenerationMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Helpers.CurveAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.ECC.Helpers.CurveAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersGenerateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersGenerateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersValidateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersValidateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdDomainParametersValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdKeyPairGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdKeyPairGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdKeyPairValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdKeyPairValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdPoint,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdPoint");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdPointEncoder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdPointEncoder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdSignatureResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.EdVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.ExtendedEdPoint,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.ExtendedEdPoint");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IDsaEd,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IDsaEd");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IDsaEdFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IDsaEdFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IEdwardsCurve,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IEdwardsCurve");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IEdwardsCurveFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.IEdwardsCurveFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.Enums.SecretGenerationMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.Enums.SecretGenerationMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.Helpers.CurveAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.Ed.Helpers.CurveAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersGenerateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersGenerateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersValidateRequest,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersValidateRequest");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcDomainParametersValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcKeyPairGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcKeyPairGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcKeyPairValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcKeyPairValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcSignatureResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.FfcVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.IDsaFfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.IDsaFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.IDsaFfcFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.IDsaFfcFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.GGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.GGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.GValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.GValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.IGGeneratorValidator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.IGGeneratorValidator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.IGGeneratorValidatorFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.GGeneratorValidators.IGGeneratorValidatorFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.IPQGeneratorValidator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.IPQGeneratorValidator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.IPQGeneratorValidatorFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.IPQGeneratorValidatorFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.PQGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.PQGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.PQValidateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.DSA.FFC.PQGeneratorValidators.PQValidateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.AlgoArrayResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.AlgoArrayResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssKeyPairGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssKeyPairGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssSignatureGenerateResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssSignatureGenerateResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssSignatureResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.HssVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.IHss,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.IHss");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.IHssFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.IHssFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.ILmsMct,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.ILmsMct");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmotsVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmotsVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmsKeyPair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmsKeyPair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmsPrivateKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmsPrivateKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmsVerificationResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.LmsVerificationResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.MCTResult`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.MCTResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Enums.LmsType,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Enums.LmsType");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Enums.LmotsType,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Enums.LmotsType");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Helpers.LmotsModeMapping,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Helpers.LmotsModeMapping");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Helpers.LmsModeMapping,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.LMS.Helpers.LmsModeMapping");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.AlgoArrayResponseKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.AlgoArrayResponseKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.AlgoArrayResponseSignature,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.AlgoArrayResponseSignature");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.DecryptionResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.DecryptionResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.EncryptionResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.EncryptionResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.IRsa,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.IRsa");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.IRsaVisitable,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.IRsaVisitable");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.IRsaVisitor,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.IRsaVisitor");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.ManyEncryptionResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.ManyEncryptionResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeGenFips186_4Modes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeGenFips186_4Modes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeTestFips186_4Modes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Enums.PrimeTestFips186_4Modes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.CrtKeyComposer,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.CrtKeyComposer");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.CrtPrivateKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.CrtPrivateKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IKeyBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IKeyBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IKeyComposerFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IKeyComposerFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IRsaKeyComposer,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IRsaKeyComposer");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IRsaPrivateKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.IRsaPrivateKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyComposerFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.KeyComposerFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.PrivateKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.PrivateKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.RsaKeyComposer,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Keys.RsaKeyComposer");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IFips186_2PrimeGenerator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IFips186_2PrimeGenerator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IFips186_4PrimeGenerator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IFips186_4PrimeGenerator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IFips186_5PrimeGenerator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IFips186_5PrimeGenerator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IPrimeGenerator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IPrimeGenerator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IPrimeGeneratorFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.IPrimeGeneratorFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.PrimeGeneratorParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.PrimeGeneratorParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.PrimeGeneratorResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.PrimeGeneratorResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.PrimePair,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.PrimePair");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.RsaPrimeGenException,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.PrimeGenerators.RsaPrimeGenException");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IMaskFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IMaskFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IMaskFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IMaskFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IPaddingFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IPaddingFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IPaddingScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.IPaddingScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.ISignatureBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.ISignatureBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.PaddingResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.PaddingResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.SignatureResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.SignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.VerifyResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Asymmetric.RSA.Signatures.VerifyResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.DrbgResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.DrbgResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.IDrbg,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.IDrbg");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.IDrbgFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.IDrbgFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.OtherInput,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.OtherInput");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.ConditioningComponents.IBlockCipherConditioningComponentFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.ConditioningComponents.IBlockCipherConditioningComponentFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.ConditioningComponents.IDrbgConditioningComponent,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.ConditioningComponents.IDrbgConditioningComponent");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.ConditioningComponents.IHashConditioningComponentFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.ConditioningComponents.IHashConditioningComponentFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Enums.DrbgStatus,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Enums.DrbgStatus");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Helpers.DrbgAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Helpers.DrbgAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Helpers.DrbgCounterAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Helpers.DrbgCounterAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Helpers.DrbgHashAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.DRBG.Helpers.DrbgHashAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.AlgoArrayResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.AlgoArrayResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.AlgoArrayResponseWithCustomization,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.AlgoArrayResponseWithCustomization");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.HashResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.HashResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.IShaMct,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.IShaMct");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.MctResult`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.MctResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKE,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKE");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKEFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKEFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKEWrapper,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKEWrapper");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKE_MCT,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.CSHAKE.ICSHAKE_MCT");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.MD5.IMd5,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.MD5.IMd5");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHash,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHash");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHashFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHashFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHashWrapper,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHashWrapper");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHash_MCT,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ParallelHash.IParallelHash_MCT");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.ISha,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.ISha");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.IShaFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.ShaWrapper.IShaFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.AlgoArrayResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.AlgoArrayResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHash,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHash");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHashFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHashFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHashWrapper,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHashWrapper");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHash_MCT,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.ITupleHash_MCT");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.MCTResultTuple`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.TupleHash.MCTResultTuple`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.ComputeKeyMacResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.ComputeKeyMacResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IEccDhComponent,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IEccDhComponent");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IIfcSecretKeyingMaterial,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IIfcSecretKeyingMaterial");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IKas`4,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IKas`4'4");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IKasIfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.IKasIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KasIfcResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KasIfcResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KasResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KasResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IIfcSecretKeyingMaterialBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IIfcSecretKeyingMaterialBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilder`4,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilder`4'4");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilderKdfKc`4,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilderKdfKc`4'4");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilderKdfNoKc`4,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilderKdfNoKc`4'4");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilderNoKdfNoKc`4,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasBuilderNoKdfNoKc`4'4");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasIfcBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IKasIfcBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IMacParametersBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.IMacParametersBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.ISchemeBuilder`4,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.ISchemeBuilder`4'4");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.ISchemeIfcBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Builders.ISchemeIfcBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasAssurance,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasAssurance");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasKdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KasKdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KdfHashMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KdfHashMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyAgreementKeyAttribute,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Enums.KeyAgreementKeyAttribute");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.FixedInfoParameter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.FixedInfoParameter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfo,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfo");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfoFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfoFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfoStrategy,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfoStrategy");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfoStrategyFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IFixedInfoStrategyFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IOtherInfo,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IOtherInfo");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IOtherInfoFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.IOtherInfoFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.PartyFixedInfo,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.PartyFixedInfo");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.PartyOtherInfo,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.FixedInfo.PartyOtherInfo");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Helpers.SchemeKeyNonceGenRequirement`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Helpers.SchemeKeyNonceGenRequirement`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmation,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmation");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmationFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmationFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmationMacDataCreator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmationMacDataCreator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmationParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.IKeyConfirmationParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.KeyConfirmationMacDetail,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KC.KeyConfirmationMacDetail");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.AuxFunction,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.AuxFunction");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.AuxFunctionNoCounter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.AuxFunctionNoCounter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansion,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansion");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionConfiguration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionConfiguration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionParameter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionParameter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfMultiExpansionIterationParameter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfMultiExpansionIterationParameter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionParameterVisitor,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionParameterVisitor");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionVisitor,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfMultiExpansionVisitor");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfParameterVisitor,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfParameterVisitor");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfVisitor,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.IKdfVisitor");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfMultiExpansionResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfMultiExpansionResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.KdfMultiExpansionParameterHkdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.KdfMultiExpansionParameterHkdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.KdfParameterHkdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfHkdf.KdfParameterHkdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV1.IkeV1Configuration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV1.IkeV1Configuration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV1.KdfParameterIkeV1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV1.KdfParameterIkeV1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV2.IkeV2Configuration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV2.IkeV2Configuration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV2.KdfParameterIkeV2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfIkeV2.KdfParameterIkeV2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.IKdfOneStep,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.IKdfOneStep");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.IKdfOneStepFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.IKdfOneStepFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.KdfParameterOneStep,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.KdfParameterOneStep");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.KdfParameterOneStepNoCounter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfOneStep.KdfParameterOneStepNoCounter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls10_11.KdfParameterTls10_11,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls10_11.KdfParameterTls10_11");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls10_11.Tls10_11Configuration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls10_11.Tls10_11Configuration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls12.KdfParameterTls12,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls12.KdfParameterTls12");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls12.Tls12Configuration,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTls12.Tls12Configuration");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.KdfMultiExpansionParameterTwoStep,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.KdfMultiExpansionParameterTwoStep");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.KdfParameterTwoStep,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.KDF.KdfTwoStep.KdfParameterTwoStep");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmation,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmation");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmationFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmationFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmationMacDataCreator,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmationMacDataCreator");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmationParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.NoKC.INoKeyConfirmationParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.SafePrimes.ISafePrimesGroupFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.SafePrimes.ISafePrimesGroupFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.SafePrimes.SafePrimesFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.SafePrimes.SafePrimesFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.IKasAlgoAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.IKasAlgoAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.IScheme`5,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.IScheme`5'5");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.ISchemeIfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.ISchemeIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.ISchemeParameters`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.ISchemeParameters`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.ISharedInformation`2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.ISharedInformation`2'2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.KasAlgoAttributesIfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.KasAlgoAttributesIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.KasDsaAlgoAttributesEcc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.KasDsaAlgoAttributesEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.KasDsaAlgoAttributesFfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.KasDsaAlgoAttributesFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.OtherPartySharedInformation`2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.OtherPartySharedInformation`2'2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersBase`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersBase`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersEcc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersFfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersIfc,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Scheme.SchemeParametersIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.IKas,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.IKas");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.IScheme,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.IScheme");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.ISecretKeyingMaterial,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.ISecretKeyingMaterial");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.KasAlgoAttributes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.KasAlgoAttributes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.KeyAgreementResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.KeyAgreementResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.SchemeParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.SchemeParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Builders.IKasBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Builders.IKasBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Builders.ISchemeBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Builders.ISchemeBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Builders.ISecretKeyingMaterialBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KAS.Sp800_56Ar3.Builders.ISecretKeyingMaterialBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.IKdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.IKdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.IKdfFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.IKdfFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.ConcatAns942Parameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.ConcatAns942Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.DerAns942Parameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.DerAns942Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.IAns942Parameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.IAns942Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.IAnsiX942,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.IAnsiX942");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.IAnsiX942Factory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.IAnsiX942Factory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.Enums.AnsiX942Oids,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX942.Enums.AnsiX942Oids");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX963.IAnsiX963,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX963.IAnsiX963");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX963.IAnsiX963Factory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX963.IAnsiX963Factory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX963.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.AnsiX963.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.IIkeV1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.IIkeV1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.IIkeV1Factory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.IIkeV1Factory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.IkeResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv1.IkeResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv2.IIkeV2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv2.IIkeV2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv2.IIkeV2Factory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv2.IIkeV2Factory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv2.IkeResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.IKEv2.IkeResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.PBKDF.IPbKdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.PBKDF.IPbKdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.PBKDF.IPbKdfFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.PBKDF.IPbKdfFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SNMP.ISnmp,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SNMP.ISnmp");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SNMP.ISnmpFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SNMP.ISnmpFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SNMP.SnmpResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SNMP.SnmpResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.ISrtp,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.ISrtp");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.ISrtpFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.ISrtpFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.SrtpResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SRTP.SrtpResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.ISsh,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.ISsh");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.ISshFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.ISshFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.OneWayResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.SSH.OneWayResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITlsKdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITlsKdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITlsKdfFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITlsKdfFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITLsKdfFactory_v1_3,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITLsKdfFactory_v1_3");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITlsKdf_v1_3,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.ITlsKdf_v1_3");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13FullResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13FullResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13EarlySecretResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13EarlySecretResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13HandshakeSecretResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13HandshakeSecretResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13MasterSecretResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TLS.TlsKdfV13MasterSecretResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TPM.ITpm,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TPM.ITpm");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TPM.ITpmFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TPM.ITpmFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TPM.KdfResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.Components.TPM.KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.HKDF.IHkdf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.HKDF.IHkdf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.HKDF.IHkdfFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KDF.HKDF.IHkdfFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IDiffieHellman`2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IDiffieHellman`2'2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IDiffieHellmanVisitor,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IDiffieHellmanVisitor");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IMqv`2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IMqv`2'2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IRsaSve,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IRsaSve");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IRsaSveBuilder,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.IRsaSveBuilder");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.SharedSecretResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.SharedSecretResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.SharedSecretWithEncryptedValueResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KES.SharedSecretWithEncryptedValueResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.IKtsFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.IKtsFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.IMgf,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.IMgf");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.IRsaOaep,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.KTS.IRsaOaep");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.IMac,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.IMac");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.MacResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.MacResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.CMAC.ICmac,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.CMAC.ICmac");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.CMAC.ICmacFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.CMAC.ICmacFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.HMAC.IFastHmacFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.HMAC.IFastHmacFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.HMAC.IHmac,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.HMAC.IHmac");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.HMAC.IHmacFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.HMAC.IHmacFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.KMAC.IKmac,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.KMAC.IKmac");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.KMAC.IKmacFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.KMAC.IKmacFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AlgoArrayResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AlgoArrayResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.IAlgoArrayResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.IAlgoArrayResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.ICounter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.ICounter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.ICounterFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.ICounterFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.IMCTResult`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.IMCTResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MCTResult`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MCTResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.SymmetricCipherAeadResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.SymmetricCipherAeadResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.SymmetricCipherResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.SymmetricCipherResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.SymmetricCounterResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.SymmetricCounterResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IAesFfInternals,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IAesFfInternals");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IAES_CCMInternals,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IAES_CCMInternals");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IAES_GCMInternals,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IAES_GCMInternals");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IRijndaelKeySchedule,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.IRijndaelKeySchedule");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.XtsKey,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.XtsKey");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataCFB1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataCFB1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataCFB128,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataCFB128");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataCFB8,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataCFB8");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KatDataCtr,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KatDataCtr");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataOFB,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.AES.KATs.KATDataOFB");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.CounterModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.CounterModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.ICounterModeBlockCipher,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.ICounterModeBlockCipher");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.ICounterModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.ICounterModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipher`1,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipher`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipherFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipherFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipherResult,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.IModeBlockCipherResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.ModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.ModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.AeadModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.AeadModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.IAeadModeBlockCipher,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.IAeadModeBlockCipher");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.IAeadModeBlockCipherFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.IAeadModeBlockCipherFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.IAeadModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Aead.IAeadModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.FfxModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.FfxModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.IFfxModeBlockCipher,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.IFfxModeBlockCipher");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.IFfxModeBlockCipherFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.IFfxModeBlockCipherFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.IFfxModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.Ffx.IFfxModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.IXtsModeBlockCipher,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.IXtsModeBlockCipher");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.IXtsModeBlockCipherFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.IXtsModeBlockCipherFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.IXtsModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.IXtsModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.XtsModeBlockCipherParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.BlockModes.XTS.XtsModeBlockCipherParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.AdditiveCounter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.AdditiveCounter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.CounterFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.CounterFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.SubtractiveCounter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.SubtractiveCounter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.Enums.CounterTypes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.Enums.CounterTypes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.Fakes.TestableCounter,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTR.Fakes.TestableCounter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTS.CiphertextStealingMode,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTS.CiphertextStealingMode");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTS.ICiphertextStealingTransform,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTS.ICiphertextStealingTransform");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTS.ICiphertextStealingTransformFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.CTS.ICiphertextStealingTransformFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.EngineInitParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.EngineInitParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.IBlockCipherEngine,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.IBlockCipherEngine");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.IBlockCipherEngineFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.IBlockCipherEngineFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.IBlockCipherEngineParameters,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Engines.IBlockCipherEngineParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.BlockCipherEngines,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.BlockCipherEngines");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.IvGenModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.IvGenModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.XtsTweakModes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.Enums.XtsTweakModes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.KeyWrap.IKeyWrap,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.KeyWrap.IKeyWrap");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.KeyWrap.IKeyWrapFactory,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.KeyWrap.IKeyWrapFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloFactoryAes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloFactoryAes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloFactoryTdes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloFactoryTdes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloKeyMakerAes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloKeyMakerAes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloKeyMakerTdes,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloKeyMakerTdes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloTester`2,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.MonteCarlo.IMonteCarloTester`2'2");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.TDES.AlgoArrayResponse,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.TDES.AlgoArrayResponse");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.TDES.TDESKeys,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.TDES.TDESKeys");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.TDES.Enums.KeyOptionValues,NIST.CVP.ACVTS.Libraries.Crypto.Common", "NIST.CVP.ACVTS.Libraries.Crypto.Common.Symmetric.TDES.Enums.KeyOptionValues");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Array2D,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Array2D");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Array3D,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Array3D");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.IRandom800_90,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.IRandom800_90");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.NonAdjacentBitString,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.NonAdjacentBitString");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.NumeralString,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.NumeralString");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Random800_90,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Random800_90");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.ShuffleQueue`1,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.ShuffleQueue`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.BigIntegerConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.BigIntegerConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.BitStringConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.BitStringConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.DomainConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.DomainConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.DomainConverter+RangeDomainModel,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.ConvertersSystemTextJson.RangeDomainModel");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Domain.RangeDomainSegment,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Domain.RangeDomainSegment");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Domain.RangeDomainSegmentOptions,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Domain.RangeDomainSegmentOptions");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Domain.RangeMinMax,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Domain.RangeMinMax");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Domain.ValueDomainSegment,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Domain.ValueDomainSegment");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProvider,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProvider");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderFactory,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingOnes,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingOnes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingOnesFactory,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingOnesFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingZeroes,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingZeroes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingZeroesFactory,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderLeadingZeroesFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderTypes,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.EntropyProviderTypes");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProvider,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProvider");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProviderFactory,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProviderFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProviderLeadingOnesFactory,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProviderLeadingOnesFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProviderLeadingZeroesFactory,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.IEntropyProviderLeadingZeroesFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.ITestableEntropyProvider,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.ITestableEntropyProvider");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Entropy.TestableEntropyProvider,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Entropy.TestableEntropyProvider");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.Exceptions.InvalidBitStringLengthException,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.Exceptions.InvalidBitStringLengthException");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BigIntegerConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BigIntegerConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BitstringBitLengthConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BitstringBitLengthConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BitstringBitLengthConverter+BitStringModel,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BitStringModel");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BitstringConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.JsonConverters.BitstringConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.JsonConverters.DomainConverter,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.JsonConverters.DomainConverter");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.JsonConverters.DomainConverter+RangeDomainModel,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.JsonConverters.RangeDomainModel");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Math.LargeBitString.LargeBitString,NIST.CVP.ACVTS.Libraries.Math", "NIST.CVP.ACVTS.Libraries.Math.LargeBitString.LargeBitString");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IFountain`1,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IFountain`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IOracle,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IOracle");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IOracleFactory,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IOracleFactory");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.IParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.DsaGDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.DsaGDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.DsaPQDisposition,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.DispositionTypes.DsaPQDisposition");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SafePrimesKeyGenParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.SafePrimesKeyGenParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Sha3Parameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Sha3Parameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.SafePrimeParameters,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ParameterTypes.Kas.Sp800_56Ar3.SafePrimeParameters");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AesXtsResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX942KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.AnsiX963KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CounterResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.CShakeResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.DrbgResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.EccDomainParametersResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.FfcDomainParametersResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.FfcDomainParametersResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HashResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.HkdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV1KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IkeV2KdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.IResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KeyWrapResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.KmacResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LargeDataHashResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.LmsSignatureResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MacResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult`1,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.MctResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.ParallelHashResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.PbKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaPrimeResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.RsaSignaturePrimitiveResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SafePrimesKeyVerResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SnmpKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SrtpKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.SshKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TlsKdfv13Result");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TpmKdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.TupleHashResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult`1,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.VerifyResult`1'1");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.KeyConfirmation.KasKcAftResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftDeferredResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultBase,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasAftResultFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentDeferredResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasEccComponentResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultBase,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultBase");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultEcc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar1.KasValResultFfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftDeferredResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasAftResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftDeferredResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscAftResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasSscValResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Ar3.KasValResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftDeferredResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasAftResultIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftDeferredResultIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscAftResultIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasSscValResultIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Br2.KasValResultIfc");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftHkdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepNoCounterResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftOneStepResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfAftTwoStepResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValHkdfResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepNoCounterResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValOneStepResult");
            feature.AddKnownType("NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult,NIST.CVP.ACVTS.Libraries.Oracle.Abstractions", "NIST.CVP.ACVTS.Libraries.Oracle.Abstractions.ResultTypes.Kas.Sp800_56Cr1.KasKdfValTwoStepResult");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("JetBrains.Annotations.CanBeNullAttribute,NLog", "JetBrains.Annotations.CanBeNullAttribute");
            feature.AddKnownType("JetBrains.Annotations.NotNullAttribute,NLog", "JetBrains.Annotations.NotNullAttribute");
            feature.AddKnownType("JetBrains.Annotations.ItemNotNullAttribute,NLog", "JetBrains.Annotations.ItemNotNullAttribute");
            feature.AddKnownType("JetBrains.Annotations.ItemCanBeNullAttribute,NLog", "JetBrains.Annotations.ItemCanBeNullAttribute");
            feature.AddKnownType("JetBrains.Annotations.StringFormatMethodAttribute,NLog", "JetBrains.Annotations.StringFormatMethodAttribute");
            feature.AddKnownType("JetBrains.Annotations.ValueProviderAttribute,NLog", "JetBrains.Annotations.ValueProviderAttribute");
            feature.AddKnownType("JetBrains.Annotations.InvokerParameterNameAttribute,NLog", "JetBrains.Annotations.InvokerParameterNameAttribute");
            feature.AddKnownType("JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute,NLog", "JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute");
            feature.AddKnownType("JetBrains.Annotations.ContractAnnotationAttribute,NLog", "JetBrains.Annotations.ContractAnnotationAttribute");
            feature.AddKnownType("JetBrains.Annotations.LocalizationRequiredAttribute,NLog", "JetBrains.Annotations.LocalizationRequiredAttribute");
            feature.AddKnownType("JetBrains.Annotations.CannotApplyEqualityOperatorAttribute,NLog", "JetBrains.Annotations.CannotApplyEqualityOperatorAttribute");
            feature.AddKnownType("JetBrains.Annotations.BaseTypeRequiredAttribute,NLog", "JetBrains.Annotations.BaseTypeRequiredAttribute");
            feature.AddKnownType("JetBrains.Annotations.UsedImplicitlyAttribute,NLog", "JetBrains.Annotations.UsedImplicitlyAttribute");
            feature.AddKnownType("JetBrains.Annotations.MeansImplicitUseAttribute,NLog", "JetBrains.Annotations.MeansImplicitUseAttribute");
            feature.AddKnownType("JetBrains.Annotations.ImplicitUseKindFlags,NLog", "JetBrains.Annotations.ImplicitUseKindFlags");
            feature.AddKnownType("JetBrains.Annotations.ImplicitUseTargetFlags,NLog", "JetBrains.Annotations.ImplicitUseTargetFlags");
            feature.AddKnownType("JetBrains.Annotations.PublicAPIAttribute,NLog", "JetBrains.Annotations.PublicAPIAttribute");
            feature.AddKnownType("JetBrains.Annotations.InstantHandleAttribute,NLog", "JetBrains.Annotations.InstantHandleAttribute");
            feature.AddKnownType("JetBrains.Annotations.PureAttribute,NLog", "JetBrains.Annotations.PureAttribute");
            feature.AddKnownType("JetBrains.Annotations.MustUseReturnValueAttribute,NLog", "JetBrains.Annotations.MustUseReturnValueAttribute");
            feature.AddKnownType("JetBrains.Annotations.ProvidesContextAttribute,NLog", "JetBrains.Annotations.ProvidesContextAttribute");
            feature.AddKnownType("JetBrains.Annotations.PathReferenceAttribute,NLog", "JetBrains.Annotations.PathReferenceAttribute");
            feature.AddKnownType("JetBrains.Annotations.SourceTemplateAttribute,NLog", "JetBrains.Annotations.SourceTemplateAttribute");
            feature.AddKnownType("JetBrains.Annotations.MacroAttribute,NLog", "JetBrains.Annotations.MacroAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute,NLog", "JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute,NLog", "JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute,NLog", "JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcMasterLocationFormatAttribute,NLog", "JetBrains.Annotations.AspMvcMasterLocationFormatAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute,NLog", "JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcViewLocationFormatAttribute,NLog", "JetBrains.Annotations.AspMvcViewLocationFormatAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcActionAttribute,NLog", "JetBrains.Annotations.AspMvcActionAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcAreaAttribute,NLog", "JetBrains.Annotations.AspMvcAreaAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcControllerAttribute,NLog", "JetBrains.Annotations.AspMvcControllerAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcMasterAttribute,NLog", "JetBrains.Annotations.AspMvcMasterAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcModelTypeAttribute,NLog", "JetBrains.Annotations.AspMvcModelTypeAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcPartialViewAttribute,NLog", "JetBrains.Annotations.AspMvcPartialViewAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcSuppressViewErrorAttribute,NLog", "JetBrains.Annotations.AspMvcSuppressViewErrorAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcDisplayTemplateAttribute,NLog", "JetBrains.Annotations.AspMvcDisplayTemplateAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcEditorTemplateAttribute,NLog", "JetBrains.Annotations.AspMvcEditorTemplateAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcTemplateAttribute,NLog", "JetBrains.Annotations.AspMvcTemplateAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcViewAttribute,NLog", "JetBrains.Annotations.AspMvcViewAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcViewComponentAttribute,NLog", "JetBrains.Annotations.AspMvcViewComponentAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcViewComponentViewAttribute,NLog", "JetBrains.Annotations.AspMvcViewComponentViewAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMvcActionSelectorAttribute,NLog", "JetBrains.Annotations.AspMvcActionSelectorAttribute");
            feature.AddKnownType("JetBrains.Annotations.HtmlElementAttributesAttribute,NLog", "JetBrains.Annotations.HtmlElementAttributesAttribute");
            feature.AddKnownType("JetBrains.Annotations.HtmlAttributeValueAttribute,NLog", "JetBrains.Annotations.HtmlAttributeValueAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorSectionAttribute,NLog", "JetBrains.Annotations.RazorSectionAttribute");
            feature.AddKnownType("JetBrains.Annotations.CollectionAccessAttribute,NLog", "JetBrains.Annotations.CollectionAccessAttribute");
            feature.AddKnownType("JetBrains.Annotations.CollectionAccessType,NLog", "JetBrains.Annotations.CollectionAccessType");
            feature.AddKnownType("JetBrains.Annotations.AssertionMethodAttribute,NLog", "JetBrains.Annotations.AssertionMethodAttribute");
            feature.AddKnownType("JetBrains.Annotations.AssertionConditionAttribute,NLog", "JetBrains.Annotations.AssertionConditionAttribute");
            feature.AddKnownType("JetBrains.Annotations.AssertionConditionType,NLog", "JetBrains.Annotations.AssertionConditionType");
            feature.AddKnownType("JetBrains.Annotations.TerminatesProgramAttribute,NLog", "JetBrains.Annotations.TerminatesProgramAttribute");
            feature.AddKnownType("JetBrains.Annotations.LinqTunnelAttribute,NLog", "JetBrains.Annotations.LinqTunnelAttribute");
            feature.AddKnownType("JetBrains.Annotations.NoEnumerationAttribute,NLog", "JetBrains.Annotations.NoEnumerationAttribute");
            feature.AddKnownType("JetBrains.Annotations.RegexPatternAttribute,NLog", "JetBrains.Annotations.RegexPatternAttribute");
            feature.AddKnownType("JetBrains.Annotations.NoReorderAttribute,NLog", "JetBrains.Annotations.NoReorderAttribute");
            feature.AddKnownType("JetBrains.Annotations.XamlItemsControlAttribute,NLog", "JetBrains.Annotations.XamlItemsControlAttribute");
            feature.AddKnownType("JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute,NLog", "JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspChildControlTypeAttribute,NLog", "JetBrains.Annotations.AspChildControlTypeAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspDataFieldAttribute,NLog", "JetBrains.Annotations.AspDataFieldAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspDataFieldsAttribute,NLog", "JetBrains.Annotations.AspDataFieldsAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspMethodPropertyAttribute,NLog", "JetBrains.Annotations.AspMethodPropertyAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspRequiredAttributeAttribute,NLog", "JetBrains.Annotations.AspRequiredAttributeAttribute");
            feature.AddKnownType("JetBrains.Annotations.AspTypePropertyAttribute,NLog", "JetBrains.Annotations.AspTypePropertyAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorImportNamespaceAttribute,NLog", "JetBrains.Annotations.RazorImportNamespaceAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorInjectionAttribute,NLog", "JetBrains.Annotations.RazorInjectionAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorDirectiveAttribute,NLog", "JetBrains.Annotations.RazorDirectiveAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorPageBaseTypeAttribute,NLog", "JetBrains.Annotations.RazorPageBaseTypeAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorHelperCommonAttribute,NLog", "JetBrains.Annotations.RazorHelperCommonAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorLayoutAttribute,NLog", "JetBrains.Annotations.RazorLayoutAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorWriteLiteralMethodAttribute,NLog", "JetBrains.Annotations.RazorWriteLiteralMethodAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorWriteMethodAttribute,NLog", "JetBrains.Annotations.RazorWriteMethodAttribute");
            feature.AddKnownType("JetBrains.Annotations.RazorWriteMethodParameterAttribute,NLog", "JetBrains.Annotations.RazorWriteMethodParameterAttribute");
            feature.AddKnownType("NLog.IIncludeContext,NLog", "NLog.IIncludeContext");
            feature.AddKnownType("NLog.IJsonConverter,NLog", "NLog.IJsonConverter");
            feature.AddKnownType("NLog.ILogger,NLog", "NLog.ILogger");
            feature.AddKnownType("NLog.ILoggerBase,NLog", "NLog.ILoggerBase");
            feature.AddKnownType("NLog.IObjectTypeTransformer,NLog", "NLog.IObjectTypeTransformer");
            feature.AddKnownType("NLog.ISuppress,NLog", "NLog.ISuppress");
            feature.AddKnownType("NLog.IValueFormatter,NLog", "NLog.IValueFormatter");
            feature.AddKnownType("NLog.LogEventInfo,NLog", "NLog.LogEventInfo");
            feature.AddKnownType("NLog.LogFactory`1,NLog", "NLog.LogFactory`1'1");
            feature.AddKnownType("NLog.LogFactory,NLog", "NLog.LogFactory");
            feature.AddKnownType("NLog.LogFactory+LoggerCacheKey,NLog", "NLog.LoggerCacheKey");
            feature.AddKnownType("NLog.LogFactory+LoggerCache,NLog", "NLog.LoggerCache");
            feature.AddKnownType("NLog.LogFactory+LogEnabler,NLog", "NLog.LogEnabler");
            feature.AddKnownType("NLog.Logger,NLog", "NLog.Logger");
            feature.AddKnownType("NLog.LogLevel,NLog", "NLog.LogLevel");
            feature.AddKnownType("NLog.MappedDiagnosticsContext+ItemRemover,NLog", "NLog.ItemRemover");
            feature.AddKnownType("NLog.MappedDiagnosticsLogicalContext+ItemRemover,NLog", "NLog.ItemRemover");
            feature.AddKnownType("NLog.MessageTemplateFormatMethodAttribute,NLog", "NLog.MessageTemplateFormatMethodAttribute");
            feature.AddKnownType("NLog.NestedDiagnosticsContext+StackPopper,NLog", "NLog.StackPopper");
            feature.AddKnownType("NLog.NestedDiagnosticsLogicalContext+INestedContext,NLog", "NLog.INestedContext");
            feature.AddKnownType("NLog.NestedDiagnosticsLogicalContext+NestedContext`1,NLog", "NLog.NestedContext`1'1");
            feature.AddKnownType("NLog.NLogConfigurationException,NLog", "NLog.NLogConfigurationException");
            feature.AddKnownType("NLog.NLogRuntimeException,NLog", "NLog.NLogRuntimeException");
            feature.AddKnownType("NLog.NLogTraceListener,NLog", "NLog.NLogTraceListener");
            feature.AddKnownType("NLog.NullLogger,NLog", "NLog.NullLogger");
            feature.AddKnownType("NLog.SetupSerializationBuilderExtensions+ObjectTypeTransformation`1,NLog", "NLog.ObjectTypeTransformation`1'1");
            feature.AddKnownType("NLog.SetupSerializationBuilderExtensions+ObjectTypeTransformation,NLog", "NLog.ObjectTypeTransformation");
            feature.AddKnownType("NLog.Attributes.LogLevelTypeConverter,NLog", "NLog.Attributes.LogLevelTypeConverter");
            feature.AddKnownType("NLog.Common.AsyncLogEventInfo,NLog", "NLog.Common.AsyncLogEventInfo");
            feature.AddKnownType("NLog.Common.IInternalLoggerContext,NLog", "NLog.Common.IInternalLoggerContext");
            feature.AddKnownType("NLog.Common.InternalLoggerMessageEventArgs,NLog", "NLog.Common.InternalLoggerMessageEventArgs");
            feature.AddKnownType("NLog.Common.LogEventInfoBuffer,NLog", "NLog.Common.LogEventInfoBuffer");
            feature.AddKnownType("NLog.Conditions.ConditionAndExpression,NLog", "NLog.Conditions.ConditionAndExpression");
            feature.AddKnownType("NLog.Conditions.ConditionEvaluationException,NLog", "NLog.Conditions.ConditionEvaluationException");
            feature.AddKnownType("NLog.Conditions.ConditionExpression,NLog", "NLog.Conditions.ConditionExpression");
            feature.AddKnownType("NLog.Conditions.ConditionLayoutExpression,NLog", "NLog.Conditions.ConditionLayoutExpression");
            feature.AddKnownType("NLog.Conditions.ConditionLevelExpression,NLog", "NLog.Conditions.ConditionLevelExpression");
            feature.AddKnownType("NLog.Conditions.ConditionLiteralExpression,NLog", "NLog.Conditions.ConditionLiteralExpression");
            feature.AddKnownType("NLog.Conditions.ConditionLoggerNameExpression,NLog", "NLog.Conditions.ConditionLoggerNameExpression");
            feature.AddKnownType("NLog.Conditions.ConditionMessageExpression,NLog", "NLog.Conditions.ConditionMessageExpression");
            feature.AddKnownType("NLog.Conditions.ConditionMethodAttribute,NLog", "NLog.Conditions.ConditionMethodAttribute");
            feature.AddKnownType("NLog.Conditions.ConditionMethodExpression,NLog", "NLog.Conditions.ConditionMethodExpression");
            feature.AddKnownType("NLog.Conditions.ConditionMethodsAttribute,NLog", "NLog.Conditions.ConditionMethodsAttribute");
            feature.AddKnownType("NLog.Conditions.ConditionNotExpression,NLog", "NLog.Conditions.ConditionNotExpression");
            feature.AddKnownType("NLog.Conditions.ConditionOrExpression,NLog", "NLog.Conditions.ConditionOrExpression");
            feature.AddKnownType("NLog.Conditions.ConditionParseException,NLog", "NLog.Conditions.ConditionParseException");
            feature.AddKnownType("NLog.Conditions.ConditionParser,NLog", "NLog.Conditions.ConditionParser");
            feature.AddKnownType("NLog.Conditions.ConditionRelationalExpression,NLog", "NLog.Conditions.ConditionRelationalExpression");
            feature.AddKnownType("NLog.Conditions.ConditionRelationalOperator,NLog", "NLog.Conditions.ConditionRelationalOperator");
            feature.AddKnownType("NLog.Conditions.ConditionTokenizer,NLog", "NLog.Conditions.ConditionTokenizer");
            feature.AddKnownType("NLog.Conditions.ConditionTokenizer+CharToTokenType,NLog", "NLog.Conditions.CharToTokenType");
            feature.AddKnownType("NLog.Conditions.ConditionTokenType,NLog", "NLog.Conditions.ConditionTokenType");
            feature.AddKnownType("NLog.Config.AdvancedAttribute,NLog", "NLog.Config.AdvancedAttribute");
            feature.AddKnownType("NLog.Config.AppDomainFixedOutputAttribute,NLog", "NLog.Config.AppDomainFixedOutputAttribute");
            feature.AddKnownType("NLog.Config.ArrayParameterAttribute,NLog", "NLog.Config.ArrayParameterAttribute");
            feature.AddKnownType("NLog.Config.AssemblyLoadingEventArgs,NLog", "NLog.Config.AssemblyLoadingEventArgs");
            feature.AddKnownType("NLog.Config.ConfigurationItemFactory,NLog", "NLog.Config.ConfigurationItemFactory");
            feature.AddKnownType("NLog.Config.DefaultParameterAttribute,NLog", "NLog.Config.DefaultParameterAttribute");
            feature.AddKnownType("NLog.Config.DynamicLogLevelFilter,NLog", "NLog.Config.DynamicLogLevelFilter");
            feature.AddKnownType("NLog.Config.DynamicRangeLevelFilter,NLog", "NLog.Config.DynamicRangeLevelFilter");
            feature.AddKnownType("NLog.Config.DynamicRangeLevelFilter+MinMaxLevels,NLog", "NLog.Config.MinMaxLevels");
            feature.AddKnownType("NLog.Config.ExceptionRenderingFormat,NLog", "NLog.Config.ExceptionRenderingFormat");
            feature.AddKnownType("NLog.Config.Factory`2,NLog", "NLog.Config.Factory`2'2");
            feature.AddKnownType("NLog.Config.LayoutRendererFactory,NLog", "NLog.Config.LayoutRendererFactory");
            feature.AddKnownType("NLog.Config.IFactory,NLog", "NLog.Config.IFactory");
            feature.AddKnownType("NLog.Config.IInstallable,NLog", "NLog.Config.IInstallable");
            feature.AddKnownType("NLog.Config.ILoggingConfigurationElement,NLog", "NLog.Config.ILoggingConfigurationElement");
            feature.AddKnownType("NLog.Config.ILoggingConfigurationLoader,NLog", "NLog.Config.ILoggingConfigurationLoader");
            feature.AddKnownType("NLog.Config.ILoggingRuleLevelFilter,NLog", "NLog.Config.ILoggingRuleLevelFilter");
            feature.AddKnownType("NLog.Config.INamedItemFactory`2,NLog", "NLog.Config.INamedItemFactory`2'2");
            feature.AddKnownType("NLog.Config.InstallationContext,NLog", "NLog.Config.InstallationContext");
            feature.AddKnownType("NLog.Config.IPropertyTypeConverter,NLog", "NLog.Config.IPropertyTypeConverter");
            feature.AddKnownType("NLog.Config.ISetupBuilder,NLog", "NLog.Config.ISetupBuilder");
            feature.AddKnownType("NLog.Config.ISetupExtensionsBuilder,NLog", "NLog.Config.ISetupExtensionsBuilder");
            feature.AddKnownType("NLog.Config.ISetupInternalLoggerBuilder,NLog", "NLog.Config.ISetupInternalLoggerBuilder");
            feature.AddKnownType("NLog.Config.ISetupLoadConfigurationBuilder,NLog", "NLog.Config.ISetupLoadConfigurationBuilder");
            feature.AddKnownType("NLog.Config.ISetupSerializationBuilder,NLog", "NLog.Config.ISetupSerializationBuilder");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher,NLog", "NLog.Config.LoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+NoneLoggerNameMatcher,NLog", "NLog.Config.NoneLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+AllLoggerNameMatcher,NLog", "NLog.Config.AllLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+EqualsLoggerNameMatcher,NLog", "NLog.Config.EqualsLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+StartsWithLoggerNameMatcher,NLog", "NLog.Config.StartsWithLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+EndsWithLoggerNameMatcher,NLog", "NLog.Config.EndsWithLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+ContainsLoggerNameMatcher,NLog", "NLog.Config.ContainsLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggerNameMatcher+MultiplePatternLoggerNameMatcher,NLog", "NLog.Config.MultiplePatternLoggerNameMatcher");
            feature.AddKnownType("NLog.Config.LoggingConfiguration,NLog", "NLog.Config.LoggingConfiguration");
            feature.AddKnownType("NLog.Config.LoggingConfiguration+TargetNameEqualityComparer,NLog", "NLog.Config.TargetNameEqualityComparer");
            feature.AddKnownType("NLog.Config.LoggingConfigurationChangedEventArgs,NLog", "NLog.Config.LoggingConfigurationChangedEventArgs");
            feature.AddKnownType("NLog.Config.LoggingConfigurationFileLoader,NLog", "NLog.Config.LoggingConfigurationFileLoader");
            feature.AddKnownType("NLog.Config.LoggingConfigurationParser,NLog", "NLog.Config.LoggingConfigurationParser");
            feature.AddKnownType("NLog.Config.LoggingConfigurationReloadedEventArgs,NLog", "NLog.Config.LoggingConfigurationReloadedEventArgs");
            feature.AddKnownType("NLog.Config.LoggingConfigurationWatchableFileLoader,NLog", "NLog.Config.LoggingConfigurationWatchableFileLoader");
            feature.AddKnownType("NLog.Config.LoggingRule,NLog", "NLog.Config.LoggingRule");
            feature.AddKnownType("NLog.Config.LoggingRuleLevelFilter,NLog", "NLog.Config.LoggingRuleLevelFilter");
            feature.AddKnownType("NLog.Config.MethodFactory,NLog", "NLog.Config.MethodFactory");
            feature.AddKnownType("NLog.Config.MutableUnsafeAttribute,NLog", "NLog.Config.MutableUnsafeAttribute");
            feature.AddKnownType("NLog.Config.NameBaseAttribute,NLog", "NLog.Config.NameBaseAttribute");
            feature.AddKnownType("NLog.Config.NLogConfigurationIgnorePropertyAttribute,NLog", "NLog.Config.NLogConfigurationIgnorePropertyAttribute");
            feature.AddKnownType("NLog.Config.NLogConfigurationItemAttribute,NLog", "NLog.Config.NLogConfigurationItemAttribute");
            feature.AddKnownType("NLog.Config.NLogXmlElement,NLog", "NLog.Config.NLogXmlElement");
            feature.AddKnownType("NLog.Config.PropertyTypeConverter,NLog", "NLog.Config.PropertyTypeConverter");
            feature.AddKnownType("NLog.Config.RequiredParameterAttribute,NLog", "NLog.Config.RequiredParameterAttribute");
            feature.AddKnownType("NLog.Config.StackTraceUsage,NLog", "NLog.Config.StackTraceUsage");
            feature.AddKnownType("NLog.Config.ThreadAgnosticAttribute,NLog", "NLog.Config.ThreadAgnosticAttribute");
            feature.AddKnownType("NLog.Config.ThreadSafeAttribute,NLog", "NLog.Config.ThreadSafeAttribute");
            feature.AddKnownType("NLog.Config.XmlLoggingConfiguration,NLog", "NLog.Config.XmlLoggingConfiguration");
            feature.AddKnownType("NLog.Filters.ConditionBasedFilter,NLog", "NLog.Filters.ConditionBasedFilter");
            feature.AddKnownType("NLog.Filters.Filter,NLog", "NLog.Filters.Filter");
            feature.AddKnownType("NLog.Filters.FilterAttribute,NLog", "NLog.Filters.FilterAttribute");
            feature.AddKnownType("NLog.Filters.FilterResult,NLog", "NLog.Filters.FilterResult");
            feature.AddKnownType("NLog.Filters.LayoutBasedFilter,NLog", "NLog.Filters.LayoutBasedFilter");
            feature.AddKnownType("NLog.Filters.WhenContainsFilter,NLog", "NLog.Filters.WhenContainsFilter");
            feature.AddKnownType("NLog.Filters.WhenEqualFilter,NLog", "NLog.Filters.WhenEqualFilter");
            feature.AddKnownType("NLog.Filters.WhenMethodFilter,NLog", "NLog.Filters.WhenMethodFilter");
            feature.AddKnownType("NLog.Filters.WhenNotContainsFilter,NLog", "NLog.Filters.WhenNotContainsFilter");
            feature.AddKnownType("NLog.Filters.WhenNotEqualFilter,NLog", "NLog.Filters.WhenNotEqualFilter");
            feature.AddKnownType("NLog.Filters.WhenRepeatedFilter,NLog", "NLog.Filters.WhenRepeatedFilter");
            feature.AddKnownType("NLog.Filters.WhenRepeatedFilter+FilterInfo,NLog", "NLog.Filters.FilterInfo");
            feature.AddKnownType("NLog.Filters.WhenRepeatedFilter+FilterInfoKey,NLog", "NLog.Filters.FilterInfoKey");
            feature.AddKnownType("NLog.Fluent.LogBuilder,NLog", "NLog.Fluent.LogBuilder");
            feature.AddKnownType("NLog.Internal.AppendBuilderCreator,NLog", "NLog.Internal.AppendBuilderCreator");
            feature.AddKnownType("NLog.Internal.AsyncHelpersTask,NLog", "NLog.Internal.AsyncHelpersTask");
            feature.AddKnownType("NLog.Internal.AsyncOperationCounter,NLog", "NLog.Internal.AsyncOperationCounter");
            feature.AddKnownType("NLog.Internal.CallSiteInformation,NLog", "NLog.Internal.CallSiteInformation");
            feature.AddKnownType("NLog.Internal.DictionaryAdapter`2,NLog", "NLog.Internal.DictionaryAdapter`2'2");
            feature.AddKnownType("NLog.Internal.DictionaryAdapter`2+MyEnumerator,NLog", "NLog.Internal.MyEnumerator'2");
            feature.AddKnownType("NLog.Internal.DictionaryEntryEnumerable,NLog", "NLog.Internal.DictionaryEntryEnumerable");
            feature.AddKnownType("NLog.Internal.DictionaryEntryEnumerable+DictionaryEntryEnumerator,NLog", "NLog.Internal.DictionaryEntryEnumerator");
            feature.AddKnownType("NLog.Internal.FactoryHelper,NLog", "NLog.Internal.FactoryHelper");
            feature.AddKnownType("NLog.Internal.FilePathLayout,NLog", "NLog.Internal.FilePathLayout");
            feature.AddKnownType("NLog.Internal.ILogMessageFormatter,NLog", "NLog.Internal.ILogMessageFormatter");
            feature.AddKnownType("NLog.Internal.IRawValue,NLog", "NLog.Internal.IRawValue");
            feature.AddKnownType("NLog.Internal.IRenderable,NLog", "NLog.Internal.IRenderable");
            feature.AddKnownType("NLog.Internal.ISmtpClient,NLog", "NLog.Internal.ISmtpClient");
            feature.AddKnownType("NLog.Internal.IStringValueRenderer,NLog", "NLog.Internal.IStringValueRenderer");
            feature.AddKnownType("NLog.Internal.ISupportsInitialize,NLog", "NLog.Internal.ISupportsInitialize");
            feature.AddKnownType("NLog.Internal.IUsesStackTrace,NLog", "NLog.Internal.IUsesStackTrace");
            feature.AddKnownType("NLog.Internal.LoggerConfiguration,NLog", "NLog.Internal.LoggerConfiguration");
            feature.AddKnownType("NLog.Internal.LogMessageTemplateFormatter,NLog", "NLog.Internal.LogMessageTemplateFormatter");
            feature.AddKnownType("NLog.Internal.MruCache`2,NLog", "NLog.Internal.MruCache`2'2");
            feature.AddKnownType("NLog.Internal.MruCache`2+MruCacheItem,NLog", "NLog.Internal.MruCacheItem'2");
            feature.AddKnownType("NLog.Internal.MultiFileWatcher,NLog", "NLog.Internal.MultiFileWatcher");
            feature.AddKnownType("NLog.Internal.MySmtpClient,NLog", "NLog.Internal.MySmtpClient");
            feature.AddKnownType("NLog.Internal.ObjectPropertyHelper,NLog", "NLog.Internal.ObjectPropertyHelper");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache,NLog", "NLog.Internal.ObjectReflectionCache");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+ObjectPropertyList,NLog", "NLog.Internal.NLog.Internal.ObjectReflectionCache.ObjectPropertyList");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+ObjectPropertyList+PropertyValue,NLog", "NLog.Internal.NLog.Internal.NLog.Internal.ObjectReflectionCache.ObjectPropertyList.PropertyValue");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+ObjectPropertyList+Enumerator,NLog", "NLog.Internal.NLog.Internal.NLog.Internal.ObjectReflectionCache.ObjectPropertyList.Enumerator");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+FastPropertyLookup,NLog", "NLog.Internal.FastPropertyLookup");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+ObjectPropertyInfos,NLog", "NLog.Internal.ObjectPropertyInfos");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+GetBinderAdapter,NLog", "NLog.Internal.GetBinderAdapter");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+IDictionaryEnumerator,NLog", "NLog.Internal.IDictionaryEnumerator");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+DictionaryEnumerator`2,NLog", "NLog.Internal.DictionaryEnumerator`2'2");
            feature.AddKnownType("NLog.Internal.ObjectReflectionCache+DictionaryEnumerator`2+EmptyDictionaryEnumerator,NLog", "NLog.Internal.EmptyDictionaryEnumerator'2");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary,NLog", "NLog.Internal.PropertiesDictionary");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary+PropertyValue,NLog", "NLog.Internal.PropertyValue");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary+DictionaryEnumeratorBase,NLog", "NLog.Internal.DictionaryEnumeratorBase");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary+ParameterEnumerator,NLog", "NLog.Internal.ParameterEnumerator");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary+DictionaryEnumerator,NLog", "NLog.Internal.DictionaryEnumerator");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary+DictionaryCollection,NLog", "NLog.Internal.DictionaryCollection");
            feature.AddKnownType("NLog.Internal.PropertiesDictionary+DictionaryCollection+DictionaryCollectionEnumerator,NLog", "NLog.Internal.DictionaryCollectionEnumerator");
            feature.AddKnownType("NLog.Internal.PropertySetter,NLog", "NLog.Internal.PropertySetter");
            feature.AddKnownType("NLog.Internal.RegexHelper,NLog", "NLog.Internal.RegexHelper");
            feature.AddKnownType("NLog.Internal.ReusableAsyncLogEventList,NLog", "NLog.Internal.ReusableAsyncLogEventList");
            feature.AddKnownType("NLog.Internal.ReusableBufferCreator,NLog", "NLog.Internal.ReusableBufferCreator");
            feature.AddKnownType("NLog.Internal.ReusableBuilderCreator,NLog", "NLog.Internal.ReusableBuilderCreator");
            feature.AddKnownType("NLog.Internal.ReusableObjectCreator`1,NLog", "NLog.Internal.ReusableObjectCreator`1'1");
            feature.AddKnownType("NLog.Internal.ReusableObjectCreator`1+LockOject,NLog", "NLog.Internal.NLog.Internal.ReusableObjectCreator`1'1.LockOject'1");
            feature.AddKnownType("NLog.Internal.ReusableStreamCreator,NLog", "NLog.Internal.ReusableStreamCreator");
            feature.AddKnownType("NLog.Internal.RuntimeOS,NLog", "NLog.Internal.RuntimeOS");
            feature.AddKnownType("NLog.Internal.SetupBuilder,NLog", "NLog.Internal.SetupBuilder");
            feature.AddKnownType("NLog.Internal.SetupExtensionsBuilder,NLog", "NLog.Internal.SetupExtensionsBuilder");
            feature.AddKnownType("NLog.Internal.SetupInternalLoggerBuilder,NLog", "NLog.Internal.SetupInternalLoggerBuilder");
            feature.AddKnownType("NLog.Internal.SetupLoadConfigurationBuilder,NLog", "NLog.Internal.SetupLoadConfigurationBuilder");
            feature.AddKnownType("NLog.Internal.SetupSerializationBuilder,NLog", "NLog.Internal.SetupSerializationBuilder");
            feature.AddKnownType("NLog.Internal.SimpleStringReader,NLog", "NLog.Internal.SimpleStringReader");
            feature.AddKnownType("NLog.Internal.SingleCallContinuation,NLog", "NLog.Internal.SingleCallContinuation");
            feature.AddKnownType("NLog.Internal.SingleItemOptimizedHashSet`1,NLog", "NLog.Internal.SingleItemOptimizedHashSet`1'1");
            feature.AddKnownType("NLog.Internal.SingleItemOptimizedHashSet`1+SingleItemScopedInsert,NLog", "NLog.Internal.NLog.Internal.SingleItemOptimizedHashSet`1'1.SingleItemScopedInsert'1");
            feature.AddKnownType("NLog.Internal.SingleItemOptimizedHashSet`1+ReferenceEqualityComparer,NLog", "NLog.Internal.NLog.Internal.SingleItemOptimizedHashSet`1'1.ReferenceEqualityComparer'1");
            feature.AddKnownType("NLog.Internal.SortHelpers+ReadOnlySingleBucketDictionary`2,NLog", "NLog.Internal.NLog.Internal.SortHelpers.ReadOnlySingleBucketDictionary`2'2");
            feature.AddKnownType("NLog.Internal.SortHelpers+ReadOnlySingleBucketDictionary`2+Enumerator,NLog", "NLog.Internal.NLog.Internal.NLog.Internal.SortHelpers.ReadOnlySingleBucketDictionary`2'2.Enumerator'2");
            feature.AddKnownType("NLog.Internal.StringBuilderPool,NLog", "NLog.Internal.StringBuilderPool");
            feature.AddKnownType("NLog.Internal.StringBuilderPool+ItemHolder,NLog", "NLog.Internal.NLog.Internal.StringBuilderPool.ItemHolder");
            feature.AddKnownType("NLog.Internal.TargetWithFilterChain,NLog", "NLog.Internal.TargetWithFilterChain");
            feature.AddKnownType("NLog.Internal.ThreadSafeDictionary`2,NLog", "NLog.Internal.ThreadSafeDictionary`2'2");
            feature.AddKnownType("NLog.Internal.ThreadSafeDictionary`2+Enumerator,NLog", "NLog.Internal.NLog.Internal.ThreadSafeDictionary`2'2.Enumerator'2");
            feature.AddKnownType("NLog.Internal.TimeoutContinuation,NLog", "NLog.Internal.TimeoutContinuation");
            feature.AddKnownType("NLog.Internal.TransformedLayout,NLog", "NLog.Internal.TransformedLayout");
            feature.AddKnownType("NLog.Internal.UrlHelper+EscapeEncodingOptions,NLog", "NLog.Internal.NLog.Internal.UrlHelper.EscapeEncodingOptions");
            feature.AddKnownType("NLog.Internal.Fakeables.AppDomainWrapper,NLog", "NLog.Internal.Fakeables.AppDomainWrapper");
            feature.AddKnownType("NLog.Internal.Fakeables.AppEnvironmentWrapper,NLog", "NLog.Internal.Fakeables.AppEnvironmentWrapper");
            feature.AddKnownType("NLog.Internal.Fakeables.IAppDomain,NLog", "NLog.Internal.Fakeables.IAppDomain");
            feature.AddKnownType("NLog.Internal.Fakeables.IAppEnvironment,NLog", "NLog.Internal.Fakeables.IAppEnvironment");
            feature.AddKnownType("NLog.Internal.Fakeables.IFileSystem,NLog", "NLog.Internal.Fakeables.IFileSystem");
            feature.AddKnownType("NLog.Internal.FileAppenders.BaseFileAppender,NLog", "NLog.Internal.FileAppenders.BaseFileAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.BaseMutexFileAppender,NLog", "NLog.Internal.FileAppenders.BaseMutexFileAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.CountingSingleProcessFileAppender,NLog", "NLog.Internal.FileAppenders.CountingSingleProcessFileAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.CountingSingleProcessFileAppender+Factory,NLog", "NLog.Internal.FileAppenders.Factory");
            feature.AddKnownType("NLog.Internal.FileAppenders.FileAppenderCache,NLog", "NLog.Internal.FileAppenders.FileAppenderCache");
            feature.AddKnownType("NLog.Internal.FileAppenders.ICreateFileParameters,NLog", "NLog.Internal.FileAppenders.ICreateFileParameters");
            feature.AddKnownType("NLog.Internal.FileAppenders.IFileAppenderCache,NLog", "NLog.Internal.FileAppenders.IFileAppenderCache");
            feature.AddKnownType("NLog.Internal.FileAppenders.IFileAppenderFactory,NLog", "NLog.Internal.FileAppenders.IFileAppenderFactory");
            feature.AddKnownType("NLog.Internal.FileAppenders.MutexMultiProcessFileAppender,NLog", "NLog.Internal.FileAppenders.MutexMultiProcessFileAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.MutexMultiProcessFileAppender+Factory,NLog", "NLog.Internal.FileAppenders.Factory");
            feature.AddKnownType("NLog.Internal.FileAppenders.NullAppender,NLog", "NLog.Internal.FileAppenders.NullAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.NullAppender+Factory,NLog", "NLog.Internal.FileAppenders.Factory");
            feature.AddKnownType("NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender,NLog", "NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender+Factory,NLog", "NLog.Internal.FileAppenders.Factory");
            feature.AddKnownType("NLog.Internal.FileAppenders.SingleProcessFileAppender,NLog", "NLog.Internal.FileAppenders.SingleProcessFileAppender");
            feature.AddKnownType("NLog.Internal.FileAppenders.SingleProcessFileAppender+Factory,NLog", "NLog.Internal.FileAppenders.Factory");
            feature.AddKnownType("NLog.Internal.NetworkSenders.HttpNetworkSender,NLog", "NLog.Internal.NetworkSenders.HttpNetworkSender");
            feature.AddKnownType("NLog.Internal.NetworkSenders.INetworkSenderFactory,NLog", "NLog.Internal.NetworkSenders.INetworkSenderFactory");
            feature.AddKnownType("NLog.Internal.NetworkSenders.ISocket,NLog", "NLog.Internal.NetworkSenders.ISocket");
            feature.AddKnownType("NLog.Internal.NetworkSenders.IWebRequestFactory,NLog", "NLog.Internal.NetworkSenders.IWebRequestFactory");
            feature.AddKnownType("NLog.Internal.NetworkSenders.WebRequestFactory,NLog", "NLog.Internal.NetworkSenders.WebRequestFactory");
            feature.AddKnownType("NLog.Internal.NetworkSenders.NetworkSender,NLog", "NLog.Internal.NetworkSenders.NetworkSender");
            feature.AddKnownType("NLog.Internal.NetworkSenders.NetworkSenderFactory,NLog", "NLog.Internal.NetworkSenders.NetworkSenderFactory");
            feature.AddKnownType("NLog.Internal.NetworkSenders.QueuedNetworkSender,NLog", "NLog.Internal.NetworkSenders.QueuedNetworkSender");
            feature.AddKnownType("NLog.Internal.NetworkSenders.QueuedNetworkSender+NetworkRequestArgs,NLog", "NLog.Internal.NetworkSenders.NetworkRequestArgs");
            feature.AddKnownType("NLog.Internal.NetworkSenders.SocketProxy,NLog", "NLog.Internal.NetworkSenders.SocketProxy");
            feature.AddKnownType("NLog.Internal.NetworkSenders.SslSocketProxy,NLog", "NLog.Internal.NetworkSenders.SslSocketProxy");
            feature.AddKnownType("NLog.Internal.NetworkSenders.TcpNetworkSender,NLog", "NLog.Internal.NetworkSenders.TcpNetworkSender");
            feature.AddKnownType("NLog.Internal.NetworkSenders.TcpNetworkSender+MySocketAsyncEventArgs,NLog", "NLog.Internal.NetworkSenders.MySocketAsyncEventArgs");
            feature.AddKnownType("NLog.Internal.NetworkSenders.UdpNetworkSender,NLog", "NLog.Internal.NetworkSenders.UdpNetworkSender");
            feature.AddKnownType("NLog.Internal.Xamarin.PreserveAttribute,NLog", "NLog.Internal.Xamarin.PreserveAttribute");
            feature.AddKnownType("NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer,NLog", "NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.AmbientPropertyAttribute,NLog", "NLog.LayoutRenderers.AmbientPropertyAttribute");
            feature.AddKnownType("NLog.LayoutRenderers.AppDomainLayoutRenderer,NLog", "NLog.LayoutRenderers.AppDomainLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.AssemblyVersionLayoutRenderer,NLog", "NLog.LayoutRenderers.AssemblyVersionLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.AssemblyVersionType,NLog", "NLog.LayoutRenderers.AssemblyVersionType");
            feature.AddKnownType("NLog.LayoutRenderers.BaseDirLayoutRenderer,NLog", "NLog.LayoutRenderers.BaseDirLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.CallSiteFileNameLayoutRenderer,NLog", "NLog.LayoutRenderers.CallSiteFileNameLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.CallSiteLayoutRenderer,NLog", "NLog.LayoutRenderers.CallSiteLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer,NLog", "NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.CounterLayoutRenderer,NLog", "NLog.LayoutRenderers.CounterLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.CurrentDirLayoutRenderer,NLog", "NLog.LayoutRenderers.CurrentDirLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.DateLayoutRenderer,NLog", "NLog.LayoutRenderers.DateLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.DateLayoutRenderer+CachedDateFormatted,NLog", "NLog.LayoutRenderers.CachedDateFormatted");
            feature.AddKnownType("NLog.LayoutRenderers.DbNullLayoutRenderer,NLog", "NLog.LayoutRenderers.DbNullLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.DirectorySeparatorLayoutRenderer,NLog", "NLog.LayoutRenderers.DirectorySeparatorLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.EnvironmentLayoutRenderer,NLog", "NLog.LayoutRenderers.EnvironmentLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.EnvironmentUserLayoutRenderer,NLog", "NLog.LayoutRenderers.EnvironmentUserLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.EventContextLayoutRenderer,NLog", "NLog.LayoutRenderers.EventContextLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.EventPropertiesLayoutRenderer,NLog", "NLog.LayoutRenderers.EventPropertiesLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ExceptionLayoutRenderer,NLog", "NLog.LayoutRenderers.ExceptionLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.FileContentsLayoutRenderer,NLog", "NLog.LayoutRenderers.FileContentsLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.FuncLayoutRenderer,NLog", "NLog.LayoutRenderers.FuncLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.FuncThreadAgnosticLayoutRenderer,NLog", "NLog.LayoutRenderers.FuncThreadAgnosticLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.FuncThreadSafeLayoutRenderer,NLog", "NLog.LayoutRenderers.FuncThreadSafeLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer,NLog", "NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.GarbageCollectorProperty,NLog", "NLog.LayoutRenderers.GarbageCollectorProperty");
            feature.AddKnownType("NLog.LayoutRenderers.GdcLayoutRenderer,NLog", "NLog.LayoutRenderers.GdcLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.GuidLayoutRenderer,NLog", "NLog.LayoutRenderers.GuidLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.HostNameLayoutRenderer,NLog", "NLog.LayoutRenderers.HostNameLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.IdentityLayoutRenderer,NLog", "NLog.LayoutRenderers.IdentityLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.INetworkInterfaceRetriever,NLog", "NLog.LayoutRenderers.INetworkInterfaceRetriever");
            feature.AddKnownType("NLog.LayoutRenderers.InstallContextLayoutRenderer,NLog", "NLog.LayoutRenderers.InstallContextLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.LayoutRenderer,NLog", "NLog.LayoutRenderers.LayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.LayoutRendererAttribute,NLog", "NLog.LayoutRenderers.LayoutRendererAttribute");
            feature.AddKnownType("NLog.LayoutRenderers.LevelFormat,NLog", "NLog.LayoutRenderers.LevelFormat");
            feature.AddKnownType("NLog.LayoutRenderers.LevelLayoutRenderer,NLog", "NLog.LayoutRenderers.LevelLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.LiteralLayoutRenderer,NLog", "NLog.LayoutRenderers.LiteralLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.LocalIpAddressLayoutRenderer,NLog", "NLog.LayoutRenderers.LocalIpAddressLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer,NLog", "NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.LoggerNameLayoutRenderer,NLog", "NLog.LayoutRenderers.LoggerNameLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.LongDateLayoutRenderer,NLog", "NLog.LayoutRenderers.LongDateLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.MachineNameLayoutRenderer,NLog", "NLog.LayoutRenderers.MachineNameLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.MdcLayoutRenderer,NLog", "NLog.LayoutRenderers.MdcLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.MdlcLayoutRenderer,NLog", "NLog.LayoutRenderers.MdlcLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.MessageLayoutRenderer,NLog", "NLog.LayoutRenderers.MessageLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.NdcLayoutRenderer,NLog", "NLog.LayoutRenderers.NdcLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.NdlcLayoutRenderer,NLog", "NLog.LayoutRenderers.NdlcLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.NdlcTimingLayoutRenderer,NLog", "NLog.LayoutRenderers.NdlcTimingLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.NetworkInterfaceRetriever,NLog", "NLog.LayoutRenderers.NetworkInterfaceRetriever");
            feature.AddKnownType("NLog.LayoutRenderers.NewLineLayoutRenderer,NLog", "NLog.LayoutRenderers.NewLineLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.NLogDirLayoutRenderer,NLog", "NLog.LayoutRenderers.NLogDirLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ProcessDirLayoutRenderer,NLog", "NLog.LayoutRenderers.ProcessDirLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ProcessIdLayoutRenderer,NLog", "NLog.LayoutRenderers.ProcessIdLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ProcessInfoLayoutRenderer,NLog", "NLog.LayoutRenderers.ProcessInfoLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ProcessInfoProperty,NLog", "NLog.LayoutRenderers.ProcessInfoProperty");
            feature.AddKnownType("NLog.LayoutRenderers.ProcessNameLayoutRenderer,NLog", "NLog.LayoutRenderers.ProcessNameLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ProcessTimeLayoutRenderer,NLog", "NLog.LayoutRenderers.ProcessTimeLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.SequenceIdLayoutRenderer,NLog", "NLog.LayoutRenderers.SequenceIdLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ShortDateLayoutRenderer,NLog", "NLog.LayoutRenderers.ShortDateLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ShortDateLayoutRenderer+CachedDateFormatted,NLog", "NLog.LayoutRenderers.CachedDateFormatted");
            feature.AddKnownType("NLog.LayoutRenderers.SpecialFolderLayoutRenderer,NLog", "NLog.LayoutRenderers.SpecialFolderLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.StackTraceFormat,NLog", "NLog.LayoutRenderers.StackTraceFormat");
            feature.AddKnownType("NLog.LayoutRenderers.StackTraceLayoutRenderer,NLog", "NLog.LayoutRenderers.StackTraceLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.TempDirLayoutRenderer,NLog", "NLog.LayoutRenderers.TempDirLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ThreadIdLayoutRenderer,NLog", "NLog.LayoutRenderers.ThreadIdLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.ThreadNameLayoutRenderer,NLog", "NLog.LayoutRenderers.ThreadNameLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.TicksLayoutRenderer,NLog", "NLog.LayoutRenderers.TicksLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.TimeLayoutRenderer,NLog", "NLog.LayoutRenderers.TimeLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.TraceActivityIdLayoutRenderer,NLog", "NLog.LayoutRenderers.TraceActivityIdLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.VariableLayoutRenderer,NLog", "NLog.LayoutRenderers.VariableLayoutRenderer");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper+ClearCacheOption,NLog", "NLog.LayoutRenderers.Wrappers.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.LeftLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.LeftLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.NoRawValueLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.NoRawValueLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.ObjectPathRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.ObjectPathRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.OnHasPropertiesLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.OnHasPropertiesLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment,NLog", "NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper+Replacer,NLog", "NLog.LayoutRenderers.Wrappers.NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Replacer");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.RightLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.RightLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.SubstringLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.SubstringLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase,NLog", "NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBuilderBase,NLog", "NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBuilderBase");
            feature.AddKnownType("NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper,NLog", "NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper");
            feature.AddKnownType("NLog.Layouts.CompoundLayout,NLog", "NLog.Layouts.CompoundLayout");
            feature.AddKnownType("NLog.Layouts.CsvColumn,NLog", "NLog.Layouts.CsvColumn");
            feature.AddKnownType("NLog.Layouts.CsvColumnDelimiterMode,NLog", "NLog.Layouts.CsvColumnDelimiterMode");
            feature.AddKnownType("NLog.Layouts.CsvLayout,NLog", "NLog.Layouts.CsvLayout");
            feature.AddKnownType("NLog.Layouts.CsvLayout+CsvHeaderLayout,NLog", "NLog.Layouts.CsvHeaderLayout");
            feature.AddKnownType("NLog.Layouts.CsvQuotingMode,NLog", "NLog.Layouts.CsvQuotingMode");
            feature.AddKnownType("NLog.Layouts.JsonAttribute,NLog", "NLog.Layouts.JsonAttribute");
            feature.AddKnownType("NLog.Layouts.JsonLayout,NLog", "NLog.Layouts.JsonLayout");
            feature.AddKnownType("NLog.Layouts.JsonLayout+LimitRecursionJsonConvert,NLog", "NLog.Layouts.LimitRecursionJsonConvert");
            feature.AddKnownType("NLog.Layouts.Layout,NLog", "NLog.Layouts.Layout");
            feature.AddKnownType("NLog.Layouts.LayoutAttribute,NLog", "NLog.Layouts.LayoutAttribute");
            feature.AddKnownType("NLog.Layouts.LayoutRenderOptions,NLog", "NLog.Layouts.LayoutRenderOptions");
            feature.AddKnownType("NLog.Layouts.LayoutWithHeaderAndFooter,NLog", "NLog.Layouts.LayoutWithHeaderAndFooter");
            feature.AddKnownType("NLog.Layouts.Log4JXmlEventLayout,NLog", "NLog.Layouts.Log4JXmlEventLayout");
            feature.AddKnownType("NLog.Layouts.SimpleLayout,NLog", "NLog.Layouts.SimpleLayout");
            feature.AddKnownType("NLog.Layouts.XmlAttribute,NLog", "NLog.Layouts.XmlAttribute");
            feature.AddKnownType("NLog.Layouts.XmlElement,NLog", "NLog.Layouts.XmlElement");
            feature.AddKnownType("NLog.Layouts.XmlElementBase,NLog", "NLog.Layouts.XmlElementBase");
            feature.AddKnownType("NLog.Layouts.XmlLayout,NLog", "NLog.Layouts.XmlLayout");
            feature.AddKnownType("NLog.MessageTemplates.CaptureType,NLog", "NLog.MessageTemplates.CaptureType");
            feature.AddKnownType("NLog.MessageTemplates.Hole,NLog", "NLog.MessageTemplates.Hole");
            feature.AddKnownType("NLog.MessageTemplates.Literal,NLog", "NLog.MessageTemplates.Literal");
            feature.AddKnownType("NLog.MessageTemplates.LiteralHole,NLog", "NLog.MessageTemplates.LiteralHole");
            feature.AddKnownType("NLog.MessageTemplates.MessageTemplateParameter,NLog", "NLog.MessageTemplates.MessageTemplateParameter");
            feature.AddKnownType("NLog.MessageTemplates.MessageTemplateParameters,NLog", "NLog.MessageTemplates.MessageTemplateParameters");
            feature.AddKnownType("NLog.MessageTemplates.Template,NLog", "NLog.MessageTemplates.Template");
            feature.AddKnownType("NLog.MessageTemplates.TemplateEnumerator,NLog", "NLog.MessageTemplates.TemplateEnumerator");
            feature.AddKnownType("NLog.MessageTemplates.TemplateParserException,NLog", "NLog.MessageTemplates.TemplateParserException");
            feature.AddKnownType("NLog.MessageTemplates.ValueFormatter,NLog", "NLog.MessageTemplates.ValueFormatter");
            feature.AddKnownType("NLog.Targets.ArchiveNumberingMode,NLog", "NLog.Targets.ArchiveNumberingMode");
            feature.AddKnownType("NLog.Targets.AsyncTaskTarget,NLog", "NLog.Targets.AsyncTaskTarget");
            feature.AddKnownType("NLog.Targets.ChainsawTarget,NLog", "NLog.Targets.ChainsawTarget");
            feature.AddKnownType("NLog.Targets.ColoredConsoleAnsiPrinter,NLog", "NLog.Targets.ColoredConsoleAnsiPrinter");
            feature.AddKnownType("NLog.Targets.ColoredConsoleSystemPrinter,NLog", "NLog.Targets.ColoredConsoleSystemPrinter");
            feature.AddKnownType("NLog.Targets.ColoredConsoleTarget,NLog", "NLog.Targets.ColoredConsoleTarget");
            feature.AddKnownType("NLog.Targets.ConsoleOutputColor,NLog", "NLog.Targets.ConsoleOutputColor");
            feature.AddKnownType("NLog.Targets.ConsoleRowHighlightingRule,NLog", "NLog.Targets.ConsoleRowHighlightingRule");
            feature.AddKnownType("NLog.Targets.ConsoleTarget,NLog", "NLog.Targets.ConsoleTarget");
            feature.AddKnownType("NLog.Targets.ConsoleWordHighlightingRule,NLog", "NLog.Targets.ConsoleWordHighlightingRule");
            feature.AddKnownType("NLog.Targets.DatabaseCommandInfo,NLog", "NLog.Targets.DatabaseCommandInfo");
            feature.AddKnownType("NLog.Targets.DatabaseObjectPropertyInfo,NLog", "NLog.Targets.DatabaseObjectPropertyInfo");
            feature.AddKnownType("NLog.Targets.DatabaseObjectPropertyInfo+PropertySetterCacheItem,NLog", "NLog.Targets.PropertySetterCacheItem");
            feature.AddKnownType("NLog.Targets.DatabaseParameterInfo,NLog", "NLog.Targets.DatabaseParameterInfo");
            feature.AddKnownType("NLog.Targets.DatabaseParameterInfo+DbTypeSetter,NLog", "NLog.Targets.DbTypeSetter");
            feature.AddKnownType("NLog.Targets.DatabaseTarget,NLog", "NLog.Targets.DatabaseTarget");
            feature.AddKnownType("NLog.Targets.DateAndSequenceArchive,NLog", "NLog.Targets.DateAndSequenceArchive");
            feature.AddKnownType("NLog.Targets.DebuggerTarget,NLog", "NLog.Targets.DebuggerTarget");
            feature.AddKnownType("NLog.Targets.DebugTarget,NLog", "NLog.Targets.DebugTarget");
            feature.AddKnownType("NLog.Targets.DefaultJsonSerializer,NLog", "NLog.Targets.DefaultJsonSerializer");
            feature.AddKnownType("NLog.Targets.FileArchivePeriod,NLog", "NLog.Targets.FileArchivePeriod");
            feature.AddKnownType("NLog.Targets.FilePathKind,NLog", "NLog.Targets.FilePathKind");
            feature.AddKnownType("NLog.Targets.FileTarget,NLog", "NLog.Targets.FileTarget");
            feature.AddKnownType("NLog.Targets.IColoredConsolePrinter,NLog", "NLog.Targets.IColoredConsolePrinter");
            feature.AddKnownType("NLog.Targets.IFileArchiveMode,NLog", "NLog.Targets.IFileArchiveMode");
            feature.AddKnownType("NLog.Targets.IFileCompressor,NLog", "NLog.Targets.IFileCompressor");
            feature.AddKnownType("NLog.Targets.IJsonSerializer,NLog", "NLog.Targets.IJsonSerializer");
            feature.AddKnownType("NLog.Targets.JsonConverterLegacy,NLog", "NLog.Targets.JsonConverterLegacy");
            feature.AddKnownType("NLog.Targets.JsonSerializeOptions,NLog", "NLog.Targets.JsonSerializeOptions");
            feature.AddKnownType("NLog.Targets.LineEndingMode,NLog", "NLog.Targets.LineEndingMode");
            feature.AddKnownType("NLog.Targets.LineEndingMode+LineEndingModeConverter,NLog", "NLog.Targets.NLog.Targets.LineEndingMode.LineEndingModeConverter");
            feature.AddKnownType("NLog.Targets.MailTarget,NLog", "NLog.Targets.MailTarget");
            feature.AddKnownType("NLog.Targets.MemoryTarget,NLog", "NLog.Targets.MemoryTarget");
            feature.AddKnownType("NLog.Targets.MethodCallParameter,NLog", "NLog.Targets.MethodCallParameter");
            feature.AddKnownType("NLog.Targets.MethodCallTarget,NLog", "NLog.Targets.MethodCallTarget");
            feature.AddKnownType("NLog.Targets.MethodCallTargetBase,NLog", "NLog.Targets.MethodCallTargetBase");
            feature.AddKnownType("NLog.Targets.NetworkTarget,NLog", "NLog.Targets.NetworkTarget");
            feature.AddKnownType("NLog.Targets.NetworkTargetConnectionsOverflowAction,NLog", "NLog.Targets.NetworkTargetConnectionsOverflowAction");
            feature.AddKnownType("NLog.Targets.NetworkTargetOverflowAction,NLog", "NLog.Targets.NetworkTargetOverflowAction");
            feature.AddKnownType("NLog.Targets.NLogViewerParameterInfo,NLog", "NLog.Targets.NLogViewerParameterInfo");
            feature.AddKnownType("NLog.Targets.NLogViewerTarget,NLog", "NLog.Targets.NLogViewerTarget");
            feature.AddKnownType("NLog.Targets.NullTarget,NLog", "NLog.Targets.NullTarget");
            feature.AddKnownType("NLog.Targets.OutputDebugStringTarget,NLog", "NLog.Targets.OutputDebugStringTarget");
            feature.AddKnownType("NLog.Targets.SmtpAuthenticationMode,NLog", "NLog.Targets.SmtpAuthenticationMode");
            feature.AddKnownType("NLog.Targets.Target,NLog", "NLog.Targets.Target");
            feature.AddKnownType("NLog.Targets.TargetAttribute,NLog", "NLog.Targets.TargetAttribute");
            feature.AddKnownType("NLog.Targets.TargetPropertyWithContext,NLog", "NLog.Targets.TargetPropertyWithContext");
            feature.AddKnownType("NLog.Targets.TargetWithContext,NLog", "NLog.Targets.TargetWithContext");
            feature.AddKnownType("NLog.Targets.TargetWithContext+TargetWithContextLayout,NLog", "NLog.Targets.TargetWithContextLayout");
            feature.AddKnownType("NLog.Targets.TargetWithContext+TargetWithContextLayout+LayoutContextMdc,NLog", "NLog.Targets.NLog.Targets.TargetWithContextLayout.LayoutContextMdc");
            feature.AddKnownType("NLog.Targets.TargetWithContext+TargetWithContextLayout+LayoutContextMdlc,NLog", "NLog.Targets.NLog.Targets.TargetWithContextLayout.LayoutContextMdlc");
            feature.AddKnownType("NLog.Targets.TargetWithContext+TargetWithContextLayout+LayoutContextNdc,NLog", "NLog.Targets.NLog.Targets.TargetWithContextLayout.LayoutContextNdc");
            feature.AddKnownType("NLog.Targets.TargetWithContext+TargetWithContextLayout+LayoutContextNdlc,NLog", "NLog.Targets.NLog.Targets.TargetWithContextLayout.LayoutContextNdlc");
            feature.AddKnownType("NLog.Targets.TargetWithLayout,NLog", "NLog.Targets.TargetWithLayout");
            feature.AddKnownType("NLog.Targets.TargetWithLayoutHeaderAndFooter,NLog", "NLog.Targets.TargetWithLayoutHeaderAndFooter");
            feature.AddKnownType("NLog.Targets.TraceTarget,NLog", "NLog.Targets.TraceTarget");
            feature.AddKnownType("NLog.Targets.WebServiceProtocol,NLog", "NLog.Targets.WebServiceProtocol");
            feature.AddKnownType("NLog.Targets.WebServiceProxyType,NLog", "NLog.Targets.WebServiceProxyType");
            feature.AddKnownType("NLog.Targets.WebServiceTarget,NLog", "NLog.Targets.WebServiceTarget");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostFormatterBase,NLog", "NLog.Targets.HttpPostFormatterBase");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostFormEncodedFormatter,NLog", "NLog.Targets.HttpPostFormEncodedFormatter");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostJsonFormatter,NLog", "NLog.Targets.HttpPostJsonFormatter");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostSoap11Formatter,NLog", "NLog.Targets.HttpPostSoap11Formatter");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostSoap12Formatter,NLog", "NLog.Targets.HttpPostSoap12Formatter");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostSoapFormatterBase,NLog", "NLog.Targets.HttpPostSoapFormatterBase");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostTextFormatterBase,NLog", "NLog.Targets.HttpPostTextFormatterBase");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostXmlDocumentFormatter,NLog", "NLog.Targets.HttpPostXmlDocumentFormatter");
            feature.AddKnownType("NLog.Targets.WebServiceTarget+HttpPostXmlFormatterBase,NLog", "NLog.Targets.HttpPostXmlFormatterBase");
            feature.AddKnownType("NLog.Targets.Win32FileAttributes,NLog", "NLog.Targets.Win32FileAttributes");
            feature.AddKnownType("NLog.Targets.ZipArchiveFileCompressor,NLog", "NLog.Targets.ZipArchiveFileCompressor");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeBase,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeBase");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeBase+FileNameTemplate,NLog", "NLog.Targets.FileArchiveModes.FileNameTemplate");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeDate,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeDate");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeDateAndSequence,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeDateAndSequence");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeDynamicSequence,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeDynamicSequence");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeDynamicTemplate,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeDynamicTemplate");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeRolling,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeRolling");
            feature.AddKnownType("NLog.Targets.FileArchiveModes.FileArchiveModeSequence,NLog", "NLog.Targets.FileArchiveModes.FileArchiveModeSequence");
            feature.AddKnownType("NLog.Targets.Wrappers.AsyncRequestQueue,NLog", "NLog.Targets.Wrappers.AsyncRequestQueue");
            feature.AddKnownType("NLog.Targets.Wrappers.AsyncRequestQueueBase,NLog", "NLog.Targets.Wrappers.AsyncRequestQueueBase");
            feature.AddKnownType("NLog.Targets.Wrappers.AsyncTargetWrapper,NLog", "NLog.Targets.Wrappers.AsyncTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction,NLog", "NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction");
            feature.AddKnownType("NLog.Targets.Wrappers.AutoFlushTargetWrapper,NLog", "NLog.Targets.Wrappers.AutoFlushTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.BufferingTargetWrapper,NLog", "NLog.Targets.Wrappers.BufferingTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.BufferingTargetWrapperOverflowAction,NLog", "NLog.Targets.Wrappers.BufferingTargetWrapperOverflowAction");
            feature.AddKnownType("NLog.Targets.Wrappers.CompoundTargetBase,NLog", "NLog.Targets.Wrappers.CompoundTargetBase");
            feature.AddKnownType("NLog.Targets.Wrappers.ConcurrentRequestQueue,NLog", "NLog.Targets.Wrappers.ConcurrentRequestQueue");
            feature.AddKnownType("NLog.Targets.Wrappers.FallbackGroupTarget,NLog", "NLog.Targets.Wrappers.FallbackGroupTarget");
            feature.AddKnownType("NLog.Targets.Wrappers.FilteringRule,NLog", "NLog.Targets.Wrappers.FilteringRule");
            feature.AddKnownType("NLog.Targets.Wrappers.FilteringTargetWrapper,NLog", "NLog.Targets.Wrappers.FilteringTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.LimitingTargetWrapper,NLog", "NLog.Targets.Wrappers.LimitingTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.LogEventDroppedEventArgs,NLog", "NLog.Targets.Wrappers.LogEventDroppedEventArgs");
            feature.AddKnownType("NLog.Targets.Wrappers.LogEventQueueGrowEventArgs,NLog", "NLog.Targets.Wrappers.LogEventQueueGrowEventArgs");
            feature.AddKnownType("NLog.Targets.Wrappers.PostFilteringTargetWrapper,NLog", "NLog.Targets.Wrappers.PostFilteringTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.RandomizeGroupTarget,NLog", "NLog.Targets.Wrappers.RandomizeGroupTarget");
            feature.AddKnownType("NLog.Targets.Wrappers.RepeatingTargetWrapper,NLog", "NLog.Targets.Wrappers.RepeatingTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.RetryingTargetWrapper,NLog", "NLog.Targets.Wrappers.RetryingTargetWrapper");
            feature.AddKnownType("NLog.Targets.Wrappers.RoundRobinGroupTarget,NLog", "NLog.Targets.Wrappers.RoundRobinGroupTarget");
            feature.AddKnownType("NLog.Targets.Wrappers.SplitGroupTarget,NLog", "NLog.Targets.Wrappers.SplitGroupTarget");
            feature.AddKnownType("NLog.Targets.Wrappers.WrapperTargetBase,NLog", "NLog.Targets.Wrappers.WrapperTargetBase");
            feature.AddKnownType("NLog.Time.AccurateLocalTimeSource,NLog", "NLog.Time.AccurateLocalTimeSource");
            feature.AddKnownType("NLog.Time.AccurateUtcTimeSource,NLog", "NLog.Time.AccurateUtcTimeSource");
            feature.AddKnownType("NLog.Time.CachedTimeSource,NLog", "NLog.Time.CachedTimeSource");
            feature.AddKnownType("NLog.Time.FastLocalTimeSource,NLog", "NLog.Time.FastLocalTimeSource");
            feature.AddKnownType("NLog.Time.FastUtcTimeSource,NLog", "NLog.Time.FastUtcTimeSource");
            feature.AddKnownType("NLog.Time.TimeSource,NLog", "NLog.Time.TimeSource");
            feature.AddKnownType("NLog.Time.TimeSourceAttribute,NLog", "NLog.Time.TimeSourceAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Orleans.Core.Abstractions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Orleans.GrainCancellationToken,Orleans.Core.Abstractions", "Orleans.GrainCancellationToken");
            feature.AddKnownType("Orleans.GrainCancellationTokenSource,Orleans.Core.Abstractions", "Orleans.GrainCancellationTokenSource");
            feature.AddKnownType("Orleans.Grain,Orleans.Core.Abstractions", "Orleans.Grain");
            feature.AddKnownType("Orleans.Grain`1,Orleans.Core.Abstractions", "Orleans.Grain`1'1");
            feature.AddKnownType("Orleans.IGrain,Orleans.Core.Abstractions", "Orleans.IGrain");
            feature.AddKnownType("Orleans.IGrainWithGuidKey,Orleans.Core.Abstractions", "Orleans.IGrainWithGuidKey");
            feature.AddKnownType("Orleans.IGrainWithIntegerKey,Orleans.Core.Abstractions", "Orleans.IGrainWithIntegerKey");
            feature.AddKnownType("Orleans.IGrainWithStringKey,Orleans.Core.Abstractions", "Orleans.IGrainWithStringKey");
            feature.AddKnownType("Orleans.IGrainWithGuidCompoundKey,Orleans.Core.Abstractions", "Orleans.IGrainWithGuidCompoundKey");
            feature.AddKnownType("Orleans.IGrainWithIntegerCompoundKey,Orleans.Core.Abstractions", "Orleans.IGrainWithIntegerCompoundKey");
            feature.AddKnownType("Orleans.IGrainCallContext,Orleans.Core.Abstractions", "Orleans.IGrainCallContext");
            feature.AddKnownType("Orleans.IIncomingGrainCallContext,Orleans.Core.Abstractions", "Orleans.IIncomingGrainCallContext");
            feature.AddKnownType("Orleans.IOutgoingGrainCallContext,Orleans.Core.Abstractions", "Orleans.IOutgoingGrainCallContext");
            feature.AddKnownType("Orleans.IIncomingGrainCallFilter,Orleans.Core.Abstractions", "Orleans.IIncomingGrainCallFilter");
            feature.AddKnownType("Orleans.IGrainCallFilter,Orleans.Core.Abstractions", "Orleans.IGrainCallFilter");
            feature.AddKnownType("Orleans.IOutgoingGrainCallFilter,Orleans.Core.Abstractions", "Orleans.IOutgoingGrainCallFilter");
            feature.AddKnownType("Orleans.IGrainFactory,Orleans.Core.Abstractions", "Orleans.IGrainFactory");
            feature.AddKnownType("Orleans.IGrainObserver,Orleans.Core.Abstractions", "Orleans.IGrainObserver");
            feature.AddKnownType("Orleans.Interner`2,Orleans.Core.Abstractions", "Orleans.Interner`2'2");
            feature.AddKnownType("Orleans.ILifecycleObservable,Orleans.Core.Abstractions", "Orleans.ILifecycleObservable");
            feature.AddKnownType("Orleans.ILifecycleObserver,Orleans.Core.Abstractions", "Orleans.ILifecycleObserver");
            feature.AddKnownType("Orleans.ILifecycleParticipant`1,Orleans.Core.Abstractions", "Orleans.ILifecycleParticipant`1'1");
            feature.AddKnownType("Orleans.ILifecycleSubject,Orleans.Core.Abstractions", "Orleans.ILifecycleSubject");
            feature.AddKnownType("Orleans.LifecycleExtensions+Observer,Orleans.Core.Abstractions", "Orleans.Observer");
            feature.AddKnownType("Orleans.IGrainIdLoggingHelper,Orleans.Core.Abstractions", "Orleans.IGrainIdLoggingHelper");
            feature.AddKnownType("Orleans.IInvokeMethodRequestLoggingHelper,Orleans.Core.Abstractions", "Orleans.IInvokeMethodRequestLoggingHelper");
            feature.AddKnownType("Orleans.ImplicitStreamSubscriptionAttribute,Orleans.Core.Abstractions", "Orleans.ImplicitStreamSubscriptionAttribute");
            feature.AddKnownType("Orleans.RegexImplicitStreamSubscriptionAttribute,Orleans.Core.Abstractions", "Orleans.RegexImplicitStreamSubscriptionAttribute");
            feature.AddKnownType("Orleans.IReminderService,Orleans.Core.Abstractions", "Orleans.IReminderService");
            feature.AddKnownType("Orleans.ISystemTarget,Orleans.Core.Abstractions", "Orleans.ISystemTarget");
            feature.AddKnownType("Orleans.ISystemTargetBase,Orleans.Core.Abstractions", "Orleans.ISystemTargetBase");
            feature.AddKnownType("Orleans.IVersionManager,Orleans.Core.Abstractions", "Orleans.IVersionManager");
            feature.AddKnownType("Orleans.IRemindable,Orleans.Core.Abstractions", "Orleans.IRemindable");
            feature.AddKnownType("Orleans.TransactionAttribute,Orleans.Core.Abstractions", "Orleans.TransactionAttribute");
            feature.AddKnownType("Orleans.TransactionOption,Orleans.Core.Abstractions", "Orleans.TransactionOption");
            feature.AddKnownType("Orleans.TransactionOptionAlias,Orleans.Core.Abstractions", "Orleans.TransactionOptionAlias");
            feature.AddKnownType("Orleans.CodeGeneration.GrainSupportClassAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.GrainSupportClassAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.MethodInvokerAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.MethodInvokerAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.GrainReferenceAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.GrainReferenceAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.SerializerAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.SerializerAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.TypeCodeOverrideAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.TypeCodeOverrideAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.MethodIdAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.MethodIdAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.VersionAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.VersionAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.CopierMethodAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.CopierMethodAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.SerializerMethodAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.SerializerMethodAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.DeserializerMethodAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.DeserializerMethodAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.KnownTypeAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.KnownTypeAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.GenerateSerializerAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.GenerateSerializerAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.KnownBaseTypeAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.KnownBaseTypeAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.IGrainMethodInvoker,Orleans.Core.Abstractions", "Orleans.CodeGeneration.IGrainMethodInvoker");
            feature.AddKnownType("Orleans.CodeGeneration.IGrainExtensionMethodInvoker,Orleans.Core.Abstractions", "Orleans.CodeGeneration.IGrainExtensionMethodInvoker");
            feature.AddKnownType("Orleans.CodeGeneration.IGrainExtensionMap,Orleans.Core.Abstractions", "Orleans.CodeGeneration.IGrainExtensionMap");
            feature.AddKnownType("Orleans.CodeGeneration.InvokeMethodRequest,Orleans.Core.Abstractions", "Orleans.CodeGeneration.InvokeMethodRequest");
            feature.AddKnownType("Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Core.Abstractions", "Orleans.CodeGeneration.InvokeMethodOptions");
            feature.AddKnownType("Orleans.CodeGeneration.KnownAssemblyAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.KnownAssemblyAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute");
            feature.AddKnownType("Orleans.CodeGeneration.SkipCodeGenerationAttribute,Orleans.Core.Abstractions", "Orleans.CodeGeneration.SkipCodeGenerationAttribute");
            feature.AddKnownType("Orleans.Concurrency.ReadOnlyAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.ReadOnlyAttribute");
            feature.AddKnownType("Orleans.Concurrency.ReentrantAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.ReentrantAttribute");
            feature.AddKnownType("Orleans.Concurrency.UnorderedAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.UnorderedAttribute");
            feature.AddKnownType("Orleans.Concurrency.StatelessWorkerAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.StatelessWorkerAttribute");
            feature.AddKnownType("Orleans.Concurrency.AlwaysInterleaveAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.AlwaysInterleaveAttribute");
            feature.AddKnownType("Orleans.Concurrency.MayInterleaveAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.MayInterleaveAttribute");
            feature.AddKnownType("Orleans.Concurrency.ImmutableAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.ImmutableAttribute");
            feature.AddKnownType("Orleans.Concurrency.OneWayAttribute,Orleans.Core.Abstractions", "Orleans.Concurrency.OneWayAttribute");
            feature.AddKnownType("Orleans.Concurrency.Immutable`1,Orleans.Core.Abstractions", "Orleans.Concurrency.Immutable`1'1");
            feature.AddKnownType("Orleans.Core.IGrainIdentity,Orleans.Core.Abstractions", "Orleans.Core.IGrainIdentity");
            feature.AddKnownType("Orleans.Core.IStorage,Orleans.Core.Abstractions", "Orleans.Core.IStorage");
            feature.AddKnownType("Orleans.Core.IStorage`1,Orleans.Core.Abstractions", "Orleans.Core.IStorage`1'1");
            feature.AddKnownType("Orleans.GrainDirectory.ClusterLocalRegistration,Orleans.Core.Abstractions", "Orleans.GrainDirectory.ClusterLocalRegistration");
            feature.AddKnownType("Orleans.GrainDirectory.GrainDirectoryAttribute,Orleans.Core.Abstractions", "Orleans.GrainDirectory.GrainDirectoryAttribute");
            feature.AddKnownType("Orleans.GrainDirectory.IGrainDirectory,Orleans.Core.Abstractions", "Orleans.GrainDirectory.IGrainDirectory");
            feature.AddKnownType("Orleans.GrainDirectory.GrainAddress,Orleans.Core.Abstractions", "Orleans.GrainDirectory.GrainAddress");
            feature.AddKnownType("Orleans.GrainDirectory.IMultiClusterRegistrationStrategy,Orleans.Core.Abstractions", "Orleans.GrainDirectory.IMultiClusterRegistrationStrategy");
            feature.AddKnownType("Orleans.GrainDirectory.MultiClusterRegistrationStrategy,Orleans.Core.Abstractions", "Orleans.GrainDirectory.MultiClusterRegistrationStrategy");
            feature.AddKnownType("Orleans.LogConsistency.ConnectionIssue,Orleans.Core.Abstractions", "Orleans.LogConsistency.ConnectionIssue");
            feature.AddKnownType("Orleans.LogConsistency.NotificationFailed,Orleans.Core.Abstractions", "Orleans.LogConsistency.NotificationFailed");
            feature.AddKnownType("Orleans.Metadata.FeaturePopulatorAttribute,Orleans.Core.Abstractions", "Orleans.Metadata.FeaturePopulatorAttribute");
            feature.AddKnownType("Orleans.Metadata.GrainClassFeature,Orleans.Core.Abstractions", "Orleans.Metadata.GrainClassFeature");
            feature.AddKnownType("Orleans.Metadata.GrainClassMetadata,Orleans.Core.Abstractions", "Orleans.Metadata.GrainClassMetadata");
            feature.AddKnownType("Orleans.Metadata.GrainInterfaceFeature,Orleans.Core.Abstractions", "Orleans.Metadata.GrainInterfaceFeature");
            feature.AddKnownType("Orleans.Metadata.GrainInterfaceMetadata,Orleans.Core.Abstractions", "Orleans.Metadata.GrainInterfaceMetadata");
            feature.AddKnownType("Orleans.Metadata.IFeaturePopulator`1,Orleans.Core.Abstractions", "Orleans.Metadata.IFeaturePopulator`1'1");
            feature.AddKnownType("Orleans.Placement.PlacementAttribute,Orleans.Core.Abstractions", "Orleans.Placement.PlacementAttribute");
            feature.AddKnownType("Orleans.Placement.RandomPlacementAttribute,Orleans.Core.Abstractions", "Orleans.Placement.RandomPlacementAttribute");
            feature.AddKnownType("Orleans.Placement.HashBasedPlacementAttribute,Orleans.Core.Abstractions", "Orleans.Placement.HashBasedPlacementAttribute");
            feature.AddKnownType("Orleans.Placement.PreferLocalPlacementAttribute,Orleans.Core.Abstractions", "Orleans.Placement.PreferLocalPlacementAttribute");
            feature.AddKnownType("Orleans.Placement.ActivationCountBasedPlacementAttribute,Orleans.Core.Abstractions", "Orleans.Placement.ActivationCountBasedPlacementAttribute");
            feature.AddKnownType("Orleans.Providers.StorageProviderAttribute,Orleans.Core.Abstractions", "Orleans.Providers.StorageProviderAttribute");
            feature.AddKnownType("Orleans.Providers.LogConsistencyProviderAttribute,Orleans.Core.Abstractions", "Orleans.Providers.LogConsistencyProviderAttribute");
            feature.AddKnownType("Orleans.Runtime.ICancellationSourcesExtension,Orleans.Core.Abstractions", "Orleans.Runtime.ICancellationSourcesExtension");
            feature.AddKnownType("Orleans.Runtime.ClientNotAvailableException,Orleans.Core.Abstractions", "Orleans.Runtime.ClientNotAvailableException");
            feature.AddKnownType("Orleans.Runtime.DeadlockException,Orleans.Core.Abstractions", "Orleans.Runtime.DeadlockException");
            feature.AddKnownType("Orleans.Runtime.GatewayTooBusyException,Orleans.Core.Abstractions", "Orleans.Runtime.GatewayTooBusyException");
            feature.AddKnownType("Orleans.Runtime.GrainExtensionNotInstalledException,Orleans.Core.Abstractions", "Orleans.Runtime.GrainExtensionNotInstalledException");
            feature.AddKnownType("Orleans.Runtime.LimitExceededException,Orleans.Core.Abstractions", "Orleans.Runtime.LimitExceededException");
            feature.AddKnownType("Orleans.Runtime.OrleansConfigurationException,Orleans.Core.Abstractions", "Orleans.Runtime.OrleansConfigurationException");
            feature.AddKnownType("Orleans.Runtime.OrleansException,Orleans.Core.Abstractions", "Orleans.Runtime.OrleansException");
            feature.AddKnownType("Orleans.Runtime.OrleansLifecycleCanceledException,Orleans.Core.Abstractions", "Orleans.Runtime.OrleansLifecycleCanceledException");
            feature.AddKnownType("Orleans.Runtime.OrleansMessageRejectionException,Orleans.Core.Abstractions", "Orleans.Runtime.OrleansMessageRejectionException");
            feature.AddKnownType("Orleans.Runtime.SiloUnavailableException,Orleans.Core.Abstractions", "Orleans.Runtime.SiloUnavailableException");
            feature.AddKnownType("Orleans.Runtime.ActivationAddress,Orleans.Core.Abstractions", "Orleans.Runtime.ActivationAddress");
            feature.AddKnownType("Orleans.Runtime.ActivationId,Orleans.Core.Abstractions", "Orleans.Runtime.ActivationId");
            feature.AddKnownType("Orleans.Runtime.GrainId,Orleans.Core.Abstractions", "Orleans.Runtime.GrainId");
            feature.AddKnownType("Orleans.Runtime.GuidId,Orleans.Core.Abstractions", "Orleans.Runtime.GuidId");
            feature.AddKnownType("Orleans.Runtime.SiloAddress,Orleans.Core.Abstractions", "Orleans.Runtime.SiloAddress");
            feature.AddKnownType("Orleans.Runtime.UniqueIdentifier,Orleans.Core.Abstractions", "Orleans.Runtime.UniqueIdentifier");
            feature.AddKnownType("Orleans.Runtime.UniqueKey,Orleans.Core.Abstractions", "Orleans.Runtime.UniqueKey");
            feature.AddKnownType("Orleans.Runtime.UniqueKey+Category,Orleans.Core.Abstractions", "Orleans.Runtime.Orleans.Runtime.UniqueKey.Category");
            feature.AddKnownType("Orleans.Runtime.IGrainLifecycle,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainLifecycle");
            feature.AddKnownType("Orleans.Runtime.Severity,Orleans.Core.Abstractions", "Orleans.Runtime.Severity");
            feature.AddKnownType("Orleans.Runtime.ActivationCountBasedPlacement,Orleans.Core.Abstractions", "Orleans.Runtime.ActivationCountBasedPlacement");
            feature.AddKnownType("Orleans.Runtime.HashBasedPlacement,Orleans.Core.Abstractions", "Orleans.Runtime.HashBasedPlacement");
            feature.AddKnownType("Orleans.Runtime.PlacementStrategy,Orleans.Core.Abstractions", "Orleans.Runtime.PlacementStrategy");
            feature.AddKnownType("Orleans.Runtime.PreferLocalPlacement,Orleans.Core.Abstractions", "Orleans.Runtime.PreferLocalPlacement");
            feature.AddKnownType("Orleans.Runtime.RandomPlacement,Orleans.Core.Abstractions", "Orleans.Runtime.RandomPlacement");
            feature.AddKnownType("Orleans.Runtime.StatelessWorkerPlacement,Orleans.Core.Abstractions", "Orleans.Runtime.StatelessWorkerPlacement");
            feature.AddKnownType("Orleans.Runtime.GrainReferenceNotBoundException,Orleans.Core.Abstractions", "Orleans.Runtime.GrainReferenceNotBoundException");
            feature.AddKnownType("Orleans.Runtime.GrainReference,Orleans.Core.Abstractions", "Orleans.Runtime.GrainReference");
            feature.AddKnownType("Orleans.Runtime.IAddressable,Orleans.Core.Abstractions", "Orleans.Runtime.IAddressable");
            feature.AddKnownType("Orleans.Runtime.IGrainCancellationTokenRuntime,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainCancellationTokenRuntime");
            feature.AddKnownType("Orleans.Runtime.IGrainContext,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainContext");
            feature.AddKnownType("Orleans.Runtime.IActivationData,Orleans.Core.Abstractions", "Orleans.Runtime.IActivationData");
            feature.AddKnownType("Orleans.Runtime.IGrainExtension,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainExtension");
            feature.AddKnownType("Orleans.Runtime.IGrainReferenceRuntime,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainReferenceRuntime");
            feature.AddKnownType("Orleans.Runtime.IGrainRuntime,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainRuntime");
            feature.AddKnownType("Orleans.Runtime.IGrainTimer,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainTimer");
            feature.AddKnownType("Orleans.Runtime.IGrainReminder,Orleans.Core.Abstractions", "Orleans.Runtime.IGrainReminder");
            feature.AddKnownType("Orleans.Runtime.TickStatus,Orleans.Core.Abstractions", "Orleans.Runtime.TickStatus");
            feature.AddKnownType("Orleans.Runtime.ReminderException,Orleans.Core.Abstractions", "Orleans.Runtime.ReminderException");
            feature.AddKnownType("Orleans.Runtime.IKeyedService`2,Orleans.Core.Abstractions", "Orleans.Runtime.IKeyedService`2'2");
            feature.AddKnownType("Orleans.Runtime.IKeyedServiceCollection`2,Orleans.Core.Abstractions", "Orleans.Runtime.IKeyedServiceCollection`2'2");
            feature.AddKnownType("Orleans.Serialization.IOnDeserialized,Orleans.Core.Abstractions", "Orleans.Serialization.IOnDeserialized");
            feature.AddKnownType("Orleans.Serialization.GrainReferenceKeyInfo,Orleans.Core.Abstractions", "Orleans.Serialization.GrainReferenceKeyInfo");
            feature.AddKnownType("Orleans.Serialization.IBinaryTokenStreamReader,Orleans.Core.Abstractions", "Orleans.Serialization.IBinaryTokenStreamReader");
            feature.AddKnownType("Orleans.Serialization.IBinaryTokenStreamWriter,Orleans.Core.Abstractions", "Orleans.Serialization.IBinaryTokenStreamWriter");
            feature.AddKnownType("Orleans.Serialization.IFieldUtils,Orleans.Core.Abstractions", "Orleans.Serialization.IFieldUtils");
            feature.AddKnownType("Orleans.Serialization.ISerializerContext,Orleans.Core.Abstractions", "Orleans.Serialization.ISerializerContext");
            feature.AddKnownType("Orleans.Serialization.ICopyContext,Orleans.Core.Abstractions", "Orleans.Serialization.ICopyContext");
            feature.AddKnownType("Orleans.Serialization.ISerializationContext,Orleans.Core.Abstractions", "Orleans.Serialization.ISerializationContext");
            feature.AddKnownType("Orleans.Serialization.IDeserializationContext,Orleans.Core.Abstractions", "Orleans.Serialization.IDeserializationContext");
            feature.AddKnownType("Orleans.Serialization.SerializerMethods,Orleans.Core.Abstractions", "Orleans.Serialization.SerializerMethods");
            feature.AddKnownType("Orleans.Serialization.SerializerFeature,Orleans.Core.Abstractions", "Orleans.Serialization.SerializerFeature");
            feature.AddKnownType("Orleans.Serialization.SerializerTypeMetadata,Orleans.Core.Abstractions", "Orleans.Serialization.SerializerTypeMetadata");
            feature.AddKnownType("Orleans.Serialization.SerializerDelegateMetadata,Orleans.Core.Abstractions", "Orleans.Serialization.SerializerDelegateMetadata");
            feature.AddKnownType("Orleans.Serialization.SerializerKnownTypeMetadata,Orleans.Core.Abstractions", "Orleans.Serialization.SerializerKnownTypeMetadata");
            feature.AddKnownType("Orleans.Services.IGrainService,Orleans.Core.Abstractions", "Orleans.Services.IGrainService");
            feature.AddKnownType("Orleans.Services.IGrainServiceClient`1,Orleans.Core.Abstractions", "Orleans.Services.IGrainServiceClient`1'1");
            feature.AddKnownType("Orleans.Statistics.IAppEnvironmentStatistics,Orleans.Core.Abstractions", "Orleans.Statistics.IAppEnvironmentStatistics");
            feature.AddKnownType("Orleans.Statistics.IHostEnvironmentStatistics,Orleans.Core.Abstractions", "Orleans.Statistics.IHostEnvironmentStatistics");
            feature.AddKnownType("Orleans.Streams.IAsyncBatchObservable`1,Orleans.Core.Abstractions", "Orleans.Streams.IAsyncBatchObservable`1'1");
            feature.AddKnownType("Orleans.Streams.SequentialItem`1,Orleans.Core.Abstractions", "Orleans.Streams.SequentialItem`1'1");
            feature.AddKnownType("Orleans.Streams.IAsyncBatchObserver`1,Orleans.Core.Abstractions", "Orleans.Streams.IAsyncBatchObserver`1'1");
            feature.AddKnownType("Orleans.Streams.IAsyncBatchProducer`1,Orleans.Core.Abstractions", "Orleans.Streams.IAsyncBatchProducer`1'1");
            feature.AddKnownType("Orleans.Streams.IAsyncObservable`1,Orleans.Core.Abstractions", "Orleans.Streams.IAsyncObservable`1'1");
            feature.AddKnownType("Orleans.Streams.IAsyncObserver`1,Orleans.Core.Abstractions", "Orleans.Streams.IAsyncObserver`1'1");
            feature.AddKnownType("Orleans.Streams.IAsyncStream`1,Orleans.Core.Abstractions", "Orleans.Streams.IAsyncStream`1'1");
            feature.AddKnownType("Orleans.Streams.IStreamIdentity,Orleans.Core.Abstractions", "Orleans.Streams.IStreamIdentity");
            feature.AddKnownType("Orleans.Streams.StreamSequenceToken,Orleans.Core.Abstractions", "Orleans.Streams.StreamSequenceToken");
            feature.AddKnownType("Orleans.Streams.StreamSubscriptionHandle`1,Orleans.Core.Abstractions", "Orleans.Streams.StreamSubscriptionHandle`1'1");
            feature.AddKnownType("Orleans.Streams.GenericAsyncObserver`1,Orleans.Core.Abstractions", "Orleans.Streams.GenericAsyncObserver`1'1");
            feature.AddKnownType("Orleans.Streams.GenericAsyncBatchObserver`1,Orleans.Core.Abstractions", "Orleans.Streams.GenericAsyncBatchObserver`1'1");
            feature.AddKnownType("Orleans.Streams.IQueueDataAdapter`1,Orleans.Core.Abstractions", "Orleans.Streams.IQueueDataAdapter`1'1");
            feature.AddKnownType("Orleans.Streams.IQueueDataAdapter`2,Orleans.Core.Abstractions", "Orleans.Streams.IQueueDataAdapter`2'2");
            feature.AddKnownType("Orleans.Streams.StreamPosition,Orleans.Core.Abstractions", "Orleans.Streams.StreamPosition");
            feature.AddKnownType("Orleans.Streams.AllStreamNamespacesPredicate,Orleans.Core.Abstractions", "Orleans.Streams.AllStreamNamespacesPredicate");
            feature.AddKnownType("Orleans.Streams.ExactMatchStreamNamespacePredicate,Orleans.Core.Abstractions", "Orleans.Streams.ExactMatchStreamNamespacePredicate");
            feature.AddKnownType("Orleans.Streams.IStreamNamespacePredicate,Orleans.Core.Abstractions", "Orleans.Streams.IStreamNamespacePredicate");
            feature.AddKnownType("Orleans.Streams.RegexStreamNamespacePredicate,Orleans.Core.Abstractions", "Orleans.Streams.RegexStreamNamespacePredicate");
            feature.AddKnownType("Orleans.Streams.IStreamProvider,Orleans.Core.Abstractions", "Orleans.Streams.IStreamProvider");
            feature.AddKnownType("Orleans.Streams.Core.IStreamSubscriptionHandleFactory,Orleans.Core.Abstractions", "Orleans.Streams.Core.IStreamSubscriptionHandleFactory");
            feature.AddKnownType("Orleans.Streams.Core.IStreamSubscriptionObserver,Orleans.Core.Abstractions", "Orleans.Streams.Core.IStreamSubscriptionObserver");
            feature.AddKnownType("Orleans.Timers.IReminderRegistry,Orleans.Core.Abstractions", "Orleans.Timers.IReminderRegistry");
            feature.AddKnownType("Orleans.Timers.ITimerRegistry,Orleans.Core.Abstractions", "Orleans.Timers.ITimerRegistry");
            feature.AddKnownType("Orleans.Versions.IVersionStore,Orleans.Core.Abstractions", "Orleans.Versions.IVersionStore");
            feature.AddKnownType("Orleans.Versions.Compatibility.AllVersionsCompatible,Orleans.Core.Abstractions", "Orleans.Versions.Compatibility.AllVersionsCompatible");
            feature.AddKnownType("Orleans.Versions.Compatibility.BackwardCompatible,Orleans.Core.Abstractions", "Orleans.Versions.Compatibility.BackwardCompatible");
            feature.AddKnownType("Orleans.Versions.Compatibility.ICompatibilityDirector,Orleans.Core.Abstractions", "Orleans.Versions.Compatibility.ICompatibilityDirector");
            feature.AddKnownType("Orleans.Versions.Compatibility.CompatibilityStrategy,Orleans.Core.Abstractions", "Orleans.Versions.Compatibility.CompatibilityStrategy");
            feature.AddKnownType("Orleans.Versions.Compatibility.StrictVersionCompatible,Orleans.Core.Abstractions", "Orleans.Versions.Compatibility.StrictVersionCompatible");
            feature.AddKnownType("Orleans.Versions.Selector.AllCompatibleVersions,Orleans.Core.Abstractions", "Orleans.Versions.Selector.AllCompatibleVersions");
            feature.AddKnownType("Orleans.Versions.Selector.IVersionSelector,Orleans.Core.Abstractions", "Orleans.Versions.Selector.IVersionSelector");
            feature.AddKnownType("Orleans.Versions.Selector.VersionSelectorStrategy,Orleans.Core.Abstractions", "Orleans.Versions.Selector.VersionSelectorStrategy");
            feature.AddKnownType("Orleans.Versions.Selector.LatestVersion,Orleans.Core.Abstractions", "Orleans.Versions.Selector.LatestVersion");
            feature.AddKnownType("Orleans.Versions.Selector.MinimumVersion,Orleans.Core.Abstractions", "Orleans.Versions.Selector.MinimumVersion");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("Serilog.ILogger,Serilog", "Serilog.ILogger");
            feature.AddKnownType("Serilog.LoggerConfiguration,Serilog", "Serilog.LoggerConfiguration");
            feature.AddKnownType("Serilog.Capturing.PropertyValueConverter,Serilog", "Serilog.Capturing.PropertyValueConverter");
            feature.AddKnownType("Serilog.Capturing.PropertyValueConverter+DepthLimiter,Serilog", "Serilog.Capturing.DepthLimiter");
            feature.AddKnownType("Serilog.Capturing.MessageTemplateProcessor,Serilog", "Serilog.Capturing.MessageTemplateProcessor");
            feature.AddKnownType("Serilog.Capturing.PropertyBinder,Serilog", "Serilog.Capturing.PropertyBinder");
            feature.AddKnownType("Serilog.Configuration.ILoggerSettings,Serilog", "Serilog.Configuration.ILoggerSettings");
            feature.AddKnownType("Serilog.Configuration.LoggerAuditSinkConfiguration,Serilog", "Serilog.Configuration.LoggerAuditSinkConfiguration");
            feature.AddKnownType("Serilog.Configuration.LoggerDestructuringConfiguration,Serilog", "Serilog.Configuration.LoggerDestructuringConfiguration");
            feature.AddKnownType("Serilog.Configuration.LoggerEnrichmentConfiguration,Serilog", "Serilog.Configuration.LoggerEnrichmentConfiguration");
            feature.AddKnownType("Serilog.Configuration.LoggerFilterConfiguration,Serilog", "Serilog.Configuration.LoggerFilterConfiguration");
            feature.AddKnownType("Serilog.Configuration.LoggerMinimumLevelConfiguration,Serilog", "Serilog.Configuration.LoggerMinimumLevelConfiguration");
            feature.AddKnownType("Serilog.Configuration.LoggerSettingsConfiguration,Serilog", "Serilog.Configuration.LoggerSettingsConfiguration");
            feature.AddKnownType("Serilog.Configuration.LoggerSinkConfiguration,Serilog", "Serilog.Configuration.LoggerSinkConfiguration");
            feature.AddKnownType("Serilog.Context.ImmutableStack`1,Serilog", "Serilog.Context.ImmutableStack`1'1");
            feature.AddKnownType("Serilog.Context.ImmutableStack`1+Enumerator,Serilog", "Serilog.Context.Enumerator'1");
            feature.AddKnownType("Serilog.Context.LogContext+ContextStackBookmark,Serilog", "Serilog.Context.ContextStackBookmark");
            feature.AddKnownType("Serilog.Context.LogContextEnricher,Serilog", "Serilog.Context.LogContextEnricher");
            feature.AddKnownType("Serilog.Core.CustomDefaultMethodImplementationAttribute,Serilog", "Serilog.Core.CustomDefaultMethodImplementationAttribute");
            feature.AddKnownType("Serilog.Core.IDestructuringPolicy,Serilog", "Serilog.Core.IDestructuringPolicy");
            feature.AddKnownType("Serilog.Core.ILogEventEnricher,Serilog", "Serilog.Core.ILogEventEnricher");
            feature.AddKnownType("Serilog.Core.ILogEventFilter,Serilog", "Serilog.Core.ILogEventFilter");
            feature.AddKnownType("Serilog.Core.ILogEventPropertyFactory,Serilog", "Serilog.Core.ILogEventPropertyFactory");
            feature.AddKnownType("Serilog.Core.ILogEventPropertyValueFactory,Serilog", "Serilog.Core.ILogEventPropertyValueFactory");
            feature.AddKnownType("Serilog.Core.ILogEventSink,Serilog", "Serilog.Core.ILogEventSink");
            feature.AddKnownType("Serilog.Core.IMessageTemplateParser,Serilog", "Serilog.Core.IMessageTemplateParser");
            feature.AddKnownType("Serilog.Core.IScalarConversionPolicy,Serilog", "Serilog.Core.IScalarConversionPolicy");
            feature.AddKnownType("Serilog.Core.LevelOverrideMap,Serilog", "Serilog.Core.LevelOverrideMap");
            feature.AddKnownType("Serilog.Core.LevelOverrideMap+LevelOverride,Serilog", "Serilog.Core.LevelOverride");
            feature.AddKnownType("Serilog.Core.Logger,Serilog", "Serilog.Core.Logger");
            feature.AddKnownType("Serilog.Core.LoggingLevelSwitch,Serilog", "Serilog.Core.LoggingLevelSwitch");
            feature.AddKnownType("Serilog.Core.MessageTemplateFormatMethodAttribute,Serilog", "Serilog.Core.MessageTemplateFormatMethodAttribute");
            feature.AddKnownType("Serilog.Core.Enrichers.ConditionalEnricher,Serilog", "Serilog.Core.Enrichers.ConditionalEnricher");
            feature.AddKnownType("Serilog.Core.Enrichers.EmptyEnricher,Serilog", "Serilog.Core.Enrichers.EmptyEnricher");
            feature.AddKnownType("Serilog.Core.Enrichers.FixedPropertyEnricher,Serilog", "Serilog.Core.Enrichers.FixedPropertyEnricher");
            feature.AddKnownType("Serilog.Core.Enrichers.PropertyEnricher,Serilog", "Serilog.Core.Enrichers.PropertyEnricher");
            feature.AddKnownType("Serilog.Core.Enrichers.SafeAggregateEnricher,Serilog", "Serilog.Core.Enrichers.SafeAggregateEnricher");
            feature.AddKnownType("Serilog.Core.Filters.DelegateFilter,Serilog", "Serilog.Core.Filters.DelegateFilter");
            feature.AddKnownType("Serilog.Core.Pipeline.MessageTemplateCache,Serilog", "Serilog.Core.Pipeline.MessageTemplateCache");
            feature.AddKnownType("Serilog.Core.Pipeline.SilentLogger,Serilog", "Serilog.Core.Pipeline.SilentLogger");
            feature.AddKnownType("Serilog.Core.Sinks.AggregateSink,Serilog", "Serilog.Core.Sinks.AggregateSink");
            feature.AddKnownType("Serilog.Core.Sinks.ConditionalSink,Serilog", "Serilog.Core.Sinks.ConditionalSink");
            feature.AddKnownType("Serilog.Core.Sinks.DisposeDelegatingSink,Serilog", "Serilog.Core.Sinks.DisposeDelegatingSink");
            feature.AddKnownType("Serilog.Core.Sinks.DisposingAggregateSink,Serilog", "Serilog.Core.Sinks.DisposingAggregateSink");
            feature.AddKnownType("Serilog.Core.Sinks.FilteringSink,Serilog", "Serilog.Core.Sinks.FilteringSink");
            feature.AddKnownType("Serilog.Core.Sinks.RestrictedSink,Serilog", "Serilog.Core.Sinks.RestrictedSink");
            feature.AddKnownType("Serilog.Core.Sinks.SafeAggregateSink,Serilog", "Serilog.Core.Sinks.SafeAggregateSink");
            feature.AddKnownType("Serilog.Core.Sinks.SecondaryLoggerSink,Serilog", "Serilog.Core.Sinks.SecondaryLoggerSink");
            feature.AddKnownType("Serilog.Data.LogEventPropertyValueRewriter`1,Serilog", "Serilog.Data.LogEventPropertyValueRewriter`1'1");
            feature.AddKnownType("Serilog.Data.LogEventPropertyValueVisitor`2,Serilog", "Serilog.Data.LogEventPropertyValueVisitor`2'2");
            feature.AddKnownType("Serilog.Debugging.LoggingFailedException,Serilog", "Serilog.Debugging.LoggingFailedException");
            feature.AddKnownType("Serilog.Events.DictionaryValue,Serilog", "Serilog.Events.DictionaryValue");
            feature.AddKnownType("Serilog.Events.EventProperty,Serilog", "Serilog.Events.EventProperty");
            feature.AddKnownType("Serilog.Events.LogEvent,Serilog", "Serilog.Events.LogEvent");
            feature.AddKnownType("Serilog.Events.LogEventLevel,Serilog", "Serilog.Events.LogEventLevel");
            feature.AddKnownType("Serilog.Events.LogEventProperty,Serilog", "Serilog.Events.LogEventProperty");
            feature.AddKnownType("Serilog.Events.LogEventPropertyValue,Serilog", "Serilog.Events.LogEventPropertyValue");
            feature.AddKnownType("Serilog.Events.MessageTemplate,Serilog", "Serilog.Events.MessageTemplate");
            feature.AddKnownType("Serilog.Events.ScalarValue,Serilog", "Serilog.Events.ScalarValue");
            feature.AddKnownType("Serilog.Events.SequenceValue,Serilog", "Serilog.Events.SequenceValue");
            feature.AddKnownType("Serilog.Events.StructureValue,Serilog", "Serilog.Events.StructureValue");
            feature.AddKnownType("Serilog.Formatting.ITextFormatter,Serilog", "Serilog.Formatting.ITextFormatter");
            feature.AddKnownType("Serilog.Formatting.Display.MessageTemplateTextFormatter,Serilog", "Serilog.Formatting.Display.MessageTemplateTextFormatter");
            feature.AddKnownType("Serilog.Formatting.Display.Obsolete.LiteralStringValue,Serilog", "Serilog.Formatting.Display.Obsolete.LiteralStringValue");
            feature.AddKnownType("Serilog.Formatting.Display.Obsolete.LogEventLevelValue,Serilog", "Serilog.Formatting.Display.Obsolete.LogEventLevelValue");
            feature.AddKnownType("Serilog.Formatting.Display.Obsolete.LogEventPropertiesValue,Serilog", "Serilog.Formatting.Display.Obsolete.LogEventPropertiesValue");
            feature.AddKnownType("Serilog.Formatting.Display.Obsolete.LogEventPropertyMessageValue,Serilog", "Serilog.Formatting.Display.Obsolete.LogEventPropertyMessageValue");
            feature.AddKnownType("Serilog.Formatting.Json.JsonFormatter,Serilog", "Serilog.Formatting.Json.JsonFormatter");
            feature.AddKnownType("Serilog.Formatting.Json.JsonValueFormatter,Serilog", "Serilog.Formatting.Json.JsonValueFormatter");
            feature.AddKnownType("Serilog.Formatting.Raw.RawFormatter,Serilog", "Serilog.Formatting.Raw.RawFormatter");
            feature.AddKnownType("Serilog.Parsing.Alignment,Serilog", "Serilog.Parsing.Alignment");
            feature.AddKnownType("Serilog.Parsing.AlignmentDirection,Serilog", "Serilog.Parsing.AlignmentDirection");
            feature.AddKnownType("Serilog.Parsing.Destructuring,Serilog", "Serilog.Parsing.Destructuring");
            feature.AddKnownType("Serilog.Parsing.MessageTemplateParser,Serilog", "Serilog.Parsing.MessageTemplateParser");
            feature.AddKnownType("Serilog.Parsing.MessageTemplateToken,Serilog", "Serilog.Parsing.MessageTemplateToken");
            feature.AddKnownType("Serilog.Parsing.PropertyToken,Serilog", "Serilog.Parsing.PropertyToken");
            feature.AddKnownType("Serilog.Parsing.TextToken,Serilog", "Serilog.Parsing.TextToken");
            feature.AddKnownType("Serilog.Policies.ByteArrayScalarConversionPolicy,Serilog", "Serilog.Policies.ByteArrayScalarConversionPolicy");
            feature.AddKnownType("Serilog.Policies.DelegateDestructuringPolicy,Serilog", "Serilog.Policies.DelegateDestructuringPolicy");
            feature.AddKnownType("Serilog.Policies.EnumScalarConversionPolicy,Serilog", "Serilog.Policies.EnumScalarConversionPolicy");
            feature.AddKnownType("Serilog.Policies.ProjectedDestructuringPolicy,Serilog", "Serilog.Policies.ProjectedDestructuringPolicy");
            feature.AddKnownType("Serilog.Policies.ReflectionTypesScalarDestructuringPolicy,Serilog", "Serilog.Policies.ReflectionTypesScalarDestructuringPolicy");
            feature.AddKnownType("Serilog.Policies.SimpleScalarConversionPolicy,Serilog", "Serilog.Policies.SimpleScalarConversionPolicy");
            feature.AddKnownType("Serilog.Settings.KeyValuePairs.KeyValuePairSettings,Serilog", "Serilog.Settings.KeyValuePairs.KeyValuePairSettings");
            feature.AddKnownType("Serilog.Settings.KeyValuePairs.KeyValuePairSettings+ConfigurationMethodCall,Serilog", "Serilog.Settings.KeyValuePairs.ConfigurationMethodCall");
            feature.AddKnownType("Serilog.Settings.KeyValuePairs.SettingValueConversions,Serilog", "Serilog.Settings.KeyValuePairs.SettingValueConversions");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.Concurrent", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Concurrent.BlockingCollection`1", "BlockingCollection`1'1");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentBag`1", "ConcurrentBag`1'1");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentDictionary`2", "ConcurrentDictionary`2'2");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentQueue`1", "ConcurrentQueue`1'1");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentStack`1", "ConcurrentStack`1'1");
            feature.AddKnownType("System.Collections.Concurrent.EnumerablePartitionerOptions", "EnumerablePartitionerOptions");
            feature.AddKnownType("System.Collections.Concurrent.IProducerConsumerCollection`1", "IProducerConsumerCollection`1'1");
            feature.AddKnownType("System.Collections.Concurrent.OrderablePartitioner`1", "OrderablePartitioner`1'1");
            feature.AddKnownType("System.Collections.Concurrent.Partitioner`1", "Partitioner`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Generic.Comparer`1", "Comparer`1'1");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2", "Dictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+Enumerator", "Dictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+KeyCollection", "Dictionary`2'2.KeyCollection'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator", "Dictionary`2'2.KeyCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+ValueCollection", "Dictionary`2'2.ValueCollection'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator", "Dictionary`2'2.ValueCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.EqualityComparer`1", "EqualityComparer`1'1");
            feature.AddKnownType("System.Collections.Generic.HashSet`1", "HashSet`1'1");
            feature.AddKnownType("System.Collections.Generic.HashSet`1+Enumerator", "HashSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.LinkedListNode`1", "LinkedListNode`1'1");
            feature.AddKnownType("System.Collections.Generic.LinkedList`1", "LinkedList`1'1");
            feature.AddKnownType("System.Collections.Generic.LinkedList`1+Enumerator", "LinkedList`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.List`1+Enumerator", "List`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.Queue`1", "Queue`1'1");
            feature.AddKnownType("System.Collections.Generic.Queue`1+Enumerator", "Queue`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.ReferenceEqualityComparer", "ReferenceEqualityComparer");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2", "SortedDictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+Enumerator", "SortedDictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+KeyCollection", "SortedDictionary`2'2.KeyCollection'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator", "SortedDictionary`2'2.KeyCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+ValueCollection", "SortedDictionary`2'2.ValueCollection'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator", "SortedDictionary`2'2.ValueCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.SortedList`2", "SortedList`2'2");
            feature.AddKnownType("System.Collections.Generic.SortedSet`1", "SortedSet`1'1");
            feature.AddKnownType("System.Collections.Generic.SortedSet`1+Enumerator", "SortedSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.Stack`1", "Stack`1'1");
            feature.AddKnownType("System.Collections.Generic.Stack`1+Enumerator", "Stack`1'1.Enumerator'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.Immutable", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Immutable.IImmutableDictionary`2", "IImmutableDictionary`2'2");
            feature.AddKnownType("System.Collections.Immutable.IImmutableList`1", "IImmutableList`1'1");
            feature.AddKnownType("System.Collections.Immutable.IImmutableQueue`1", "IImmutableQueue`1'1");
            feature.AddKnownType("System.Collections.Immutable.IImmutableSet`1", "IImmutableSet`1'1");
            feature.AddKnownType("System.Collections.Immutable.IImmutableStack`1", "IImmutableStack`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableArray`1", "ImmutableArray`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableArray`1+Builder", "ImmutableArray`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableArray`1+Enumerator", "ImmutableArray`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableDictionary`2", "ImmutableDictionary`2'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableDictionary`2+Builder", "ImmutableDictionary`2'2.Builder'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableDictionary`2+Enumerator", "ImmutableDictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableHashSet`1", "ImmutableHashSet`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableHashSet`1+Builder", "ImmutableHashSet`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableHashSet`1+Enumerator", "ImmutableHashSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableList`1", "ImmutableList`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableList`1+Builder", "ImmutableList`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableList`1+Enumerator", "ImmutableList`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableQueue`1", "ImmutableQueue`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableQueue`1+Enumerator", "ImmutableQueue`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedDictionary`2", "ImmutableSortedDictionary`2'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedDictionary`2+Builder", "ImmutableSortedDictionary`2'2.Builder'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator", "ImmutableSortedDictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedSet`1", "ImmutableSortedSet`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedSet`1+Builder", "ImmutableSortedSet`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedSet`1+Enumerator", "ImmutableSortedSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableStack`1", "ImmutableStack`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableStack`1+Enumerator", "ImmutableStack`1'1.Enumerator'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.NonGeneric", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.CaseInsensitiveComparer", "CaseInsensitiveComparer");
            feature.AddKnownType("System.Collections.CaseInsensitiveHashCodeProvider", "CaseInsensitiveHashCodeProvider");
            feature.AddKnownType("System.Collections.CollectionBase", "CollectionBase");
            feature.AddKnownType("System.Collections.DictionaryBase", "DictionaryBase");
            feature.AddKnownType("System.Collections.Queue", "Queue");
            feature.AddKnownType("System.Collections.ReadOnlyCollectionBase", "ReadOnlyCollectionBase");
            feature.AddKnownType("System.Collections.SortedList", "SortedList");
            feature.AddKnownType("System.Collections.Stack", "Stack");
            feature.AddKnownType("System.Collections.Specialized.CollectionsUtil", "CollectionsUtil");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.Specialized", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Specialized.BitVector32", "BitVector32");
            feature.AddKnownType("System.Collections.Specialized.BitVector32+Section", "BitVector32.Section");
            feature.AddKnownType("System.Collections.Specialized.HybridDictionary", "HybridDictionary");
            feature.AddKnownType("System.Collections.Specialized.IOrderedDictionary", "IOrderedDictionary");
            feature.AddKnownType("System.Collections.Specialized.ListDictionary", "ListDictionary");
            feature.AddKnownType("System.Collections.Specialized.NameObjectCollectionBase", "NameObjectCollectionBase");
            feature.AddKnownType("System.Collections.Specialized.NameObjectCollectionBase+KeysCollection", "NameObjectCollectionBase.KeysCollection");
            feature.AddKnownType("System.Collections.Specialized.NameValueCollection", "NameValueCollection");
            feature.AddKnownType("System.Collections.Specialized.OrderedDictionary", "OrderedDictionary");
            feature.AddKnownType("System.Collections.Specialized.StringCollection", "StringCollection");
            feature.AddKnownType("System.Collections.Specialized.StringDictionary", "StringDictionary");
            feature.AddKnownType("System.Collections.Specialized.StringEnumerator", "StringEnumerator");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel.Annotations", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider", "AssociatedMetadataTypeTypeDescriptionProvider");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.AssociationAttribute", "AssociationAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.CompareAttribute", "CompareAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute", "ConcurrencyCheckAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.CreditCardAttribute", "CreditCardAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.CustomValidationAttribute", "CustomValidationAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DataType", "DataType");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DataTypeAttribute", "DataTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DisplayAttribute", "DisplayAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DisplayColumnAttribute", "DisplayColumnAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DisplayFormatAttribute", "DisplayFormatAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.EditableAttribute", "EditableAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.EmailAddressAttribute", "EmailAddressAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.EnumDataTypeAttribute", "EnumDataTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.FileExtensionsAttribute", "FileExtensionsAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.FilterUIHintAttribute", "FilterUIHintAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.IValidatableObject", "IValidatableObject");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.KeyAttribute", "KeyAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.MaxLengthAttribute", "MaxLengthAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.MetadataTypeAttribute", "MetadataTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.MinLengthAttribute", "MinLengthAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.PhoneAttribute", "PhoneAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.RangeAttribute", "RangeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.RegularExpressionAttribute", "RegularExpressionAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.RequiredAttribute", "RequiredAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute", "ScaffoldColumnAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.StringLengthAttribute", "StringLengthAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.TimestampAttribute", "TimestampAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.UIHintAttribute", "UIHintAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.UrlAttribute", "UrlAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationAttribute", "ValidationAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationContext", "ValidationContext");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationException", "ValidationException");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationResult", "ValidationResult");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.ColumnAttribute", "ColumnAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute", "ComplexTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute", "DatabaseGeneratedAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption", "DatabaseGeneratedOption");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute", "ForeignKeyAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute", "InversePropertyAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute", "NotMappedAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.TableAttribute", "TableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IServiceProvider", "IServiceProvider");
            feature.AddKnownType("System.ComponentModel.CancelEventArgs", "CancelEventArgs");
            feature.AddKnownType("System.ComponentModel.IChangeTracking", "IChangeTracking");
            feature.AddKnownType("System.ComponentModel.IEditableObject", "IEditableObject");
            feature.AddKnownType("System.ComponentModel.IRevertibleChangeTracking", "IRevertibleChangeTracking");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel.EventBasedAsync", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.AsyncCompletedEventArgs", "AsyncCompletedEventArgs");
            feature.AddKnownType("System.ComponentModel.AsyncOperation", "AsyncOperation");
            feature.AddKnownType("System.ComponentModel.BackgroundWorker", "BackgroundWorker");
            feature.AddKnownType("System.ComponentModel.DoWorkEventArgs", "DoWorkEventArgs");
            feature.AddKnownType("System.ComponentModel.ProgressChangedEventArgs", "ProgressChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.RunWorkerCompletedEventArgs", "RunWorkerCompletedEventArgs");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.BrowsableAttribute", "BrowsableAttribute");
            feature.AddKnownType("System.ComponentModel.CategoryAttribute", "CategoryAttribute");
            feature.AddKnownType("System.ComponentModel.Component", "Component");
            feature.AddKnownType("System.ComponentModel.ComponentCollection", "ComponentCollection");
            feature.AddKnownType("System.ComponentModel.DescriptionAttribute", "DescriptionAttribute");
            feature.AddKnownType("System.ComponentModel.DesignerAttribute", "DesignerAttribute");
            feature.AddKnownType("System.ComponentModel.DesignerCategoryAttribute", "DesignerCategoryAttribute");
            feature.AddKnownType("System.ComponentModel.DesignerSerializationVisibility", "DesignerSerializationVisibility");
            feature.AddKnownType("System.ComponentModel.DesignerSerializationVisibilityAttribute", "DesignerSerializationVisibilityAttribute");
            feature.AddKnownType("System.ComponentModel.DesignOnlyAttribute", "DesignOnlyAttribute");
            feature.AddKnownType("System.ComponentModel.DisplayNameAttribute", "DisplayNameAttribute");
            feature.AddKnownType("System.ComponentModel.EditorAttribute", "EditorAttribute");
            feature.AddKnownType("System.ComponentModel.EventHandlerList", "EventHandlerList");
            feature.AddKnownType("System.ComponentModel.IComponent", "IComponent");
            feature.AddKnownType("System.ComponentModel.IContainer", "IContainer");
            feature.AddKnownType("System.ComponentModel.ImmutableObjectAttribute", "ImmutableObjectAttribute");
            feature.AddKnownType("System.ComponentModel.InitializationEventAttribute", "InitializationEventAttribute");
            feature.AddKnownType("System.ComponentModel.InvalidAsynchronousStateException", "InvalidAsynchronousStateException");
            feature.AddKnownType("System.ComponentModel.InvalidEnumArgumentException", "InvalidEnumArgumentException");
            feature.AddKnownType("System.ComponentModel.ISite", "ISite");
            feature.AddKnownType("System.ComponentModel.ISupportInitialize", "ISupportInitialize");
            feature.AddKnownType("System.ComponentModel.ISynchronizeInvoke", "ISynchronizeInvoke");
            feature.AddKnownType("System.ComponentModel.LocalizableAttribute", "LocalizableAttribute");
            feature.AddKnownType("System.ComponentModel.MergablePropertyAttribute", "MergablePropertyAttribute");
            feature.AddKnownType("System.ComponentModel.NotifyParentPropertyAttribute", "NotifyParentPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.ParenthesizePropertyNameAttribute", "ParenthesizePropertyNameAttribute");
            feature.AddKnownType("System.ComponentModel.ReadOnlyAttribute", "ReadOnlyAttribute");
            feature.AddKnownType("System.ComponentModel.RefreshProperties", "RefreshProperties");
            feature.AddKnownType("System.ComponentModel.RefreshPropertiesAttribute", "RefreshPropertiesAttribute");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.DesignerSerializerAttribute", "DesignerSerializerAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.UriTypeConverter", "UriTypeConverter");
            feature.AddKnownType("System.ComponentModel.AddingNewEventArgs", "AddingNewEventArgs");
            feature.AddKnownType("System.ComponentModel.AmbientValueAttribute", "AmbientValueAttribute");
            feature.AddKnownType("System.ComponentModel.ArrayConverter", "ArrayConverter");
            feature.AddKnownType("System.ComponentModel.AttributeCollection", "AttributeCollection");
            feature.AddKnownType("System.ComponentModel.AttributeProviderAttribute", "AttributeProviderAttribute");
            feature.AddKnownType("System.ComponentModel.BaseNumberConverter", "BaseNumberConverter");
            feature.AddKnownType("System.ComponentModel.BindableAttribute", "BindableAttribute");
            feature.AddKnownType("System.ComponentModel.BindableSupport", "BindableSupport");
            feature.AddKnownType("System.ComponentModel.BindingDirection", "BindingDirection");
            feature.AddKnownType("System.ComponentModel.BindingList`1", "BindingList`1'1");
            feature.AddKnownType("System.ComponentModel.BooleanConverter", "BooleanConverter");
            feature.AddKnownType("System.ComponentModel.ByteConverter", "ByteConverter");
            feature.AddKnownType("System.ComponentModel.CharConverter", "CharConverter");
            feature.AddKnownType("System.ComponentModel.CollectionChangeAction", "CollectionChangeAction");
            feature.AddKnownType("System.ComponentModel.CollectionChangeEventArgs", "CollectionChangeEventArgs");
            feature.AddKnownType("System.ComponentModel.CollectionConverter", "CollectionConverter");
            feature.AddKnownType("System.ComponentModel.ComplexBindingPropertiesAttribute", "ComplexBindingPropertiesAttribute");
            feature.AddKnownType("System.ComponentModel.ComponentConverter", "ComponentConverter");
            feature.AddKnownType("System.ComponentModel.ComponentEditor", "ComponentEditor");
            feature.AddKnownType("System.ComponentModel.ComponentResourceManager", "ComponentResourceManager");
            feature.AddKnownType("System.ComponentModel.Container", "Container");
            feature.AddKnownType("System.ComponentModel.ContainerFilterService", "ContainerFilterService");
            feature.AddKnownType("System.ComponentModel.CultureInfoConverter", "CultureInfoConverter");
            feature.AddKnownType("System.ComponentModel.CustomTypeDescriptor", "CustomTypeDescriptor");
            feature.AddKnownType("System.ComponentModel.DataObjectAttribute", "DataObjectAttribute");
            feature.AddKnownType("System.ComponentModel.DataObjectFieldAttribute", "DataObjectFieldAttribute");
            feature.AddKnownType("System.ComponentModel.DataObjectMethodAttribute", "DataObjectMethodAttribute");
            feature.AddKnownType("System.ComponentModel.DataObjectMethodType", "DataObjectMethodType");
            feature.AddKnownType("System.ComponentModel.DateTimeConverter", "DateTimeConverter");
            feature.AddKnownType("System.ComponentModel.DateTimeOffsetConverter", "DateTimeOffsetConverter");
            feature.AddKnownType("System.ComponentModel.DecimalConverter", "DecimalConverter");
            feature.AddKnownType("System.ComponentModel.DefaultBindingPropertyAttribute", "DefaultBindingPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.DefaultEventAttribute", "DefaultEventAttribute");
            feature.AddKnownType("System.ComponentModel.DefaultPropertyAttribute", "DefaultPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.DesignTimeVisibleAttribute", "DesignTimeVisibleAttribute");
            feature.AddKnownType("System.ComponentModel.DoubleConverter", "DoubleConverter");
            feature.AddKnownType("System.ComponentModel.EnumConverter", "EnumConverter");
            feature.AddKnownType("System.ComponentModel.EventDescriptor", "EventDescriptor");
            feature.AddKnownType("System.ComponentModel.EventDescriptorCollection", "EventDescriptorCollection");
            feature.AddKnownType("System.ComponentModel.ExpandableObjectConverter", "ExpandableObjectConverter");
            feature.AddKnownType("System.ComponentModel.ExtenderProvidedPropertyAttribute", "ExtenderProvidedPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.GuidConverter", "GuidConverter");
            feature.AddKnownType("System.ComponentModel.HandledEventArgs", "HandledEventArgs");
            feature.AddKnownType("System.ComponentModel.IBindingList", "IBindingList");
            feature.AddKnownType("System.ComponentModel.IBindingListView", "IBindingListView");
            feature.AddKnownType("System.ComponentModel.ICancelAddNew", "ICancelAddNew");
            feature.AddKnownType("System.ComponentModel.IComNativeDescriptorHandler", "IComNativeDescriptorHandler");
            feature.AddKnownType("System.ComponentModel.ICustomTypeDescriptor", "ICustomTypeDescriptor");
            feature.AddKnownType("System.ComponentModel.IDataErrorInfo", "IDataErrorInfo");
            feature.AddKnownType("System.ComponentModel.IExtenderProvider", "IExtenderProvider");
            feature.AddKnownType("System.ComponentModel.IIntellisenseBuilder", "IIntellisenseBuilder");
            feature.AddKnownType("System.ComponentModel.IListSource", "IListSource");
            feature.AddKnownType("System.ComponentModel.INestedContainer", "INestedContainer");
            feature.AddKnownType("System.ComponentModel.INestedSite", "INestedSite");
            feature.AddKnownType("System.ComponentModel.InheritanceAttribute", "InheritanceAttribute");
            feature.AddKnownType("System.ComponentModel.InheritanceLevel", "InheritanceLevel");
            feature.AddKnownType("System.ComponentModel.InstallerTypeAttribute", "InstallerTypeAttribute");
            feature.AddKnownType("System.ComponentModel.InstanceCreationEditor", "InstanceCreationEditor");
            feature.AddKnownType("System.ComponentModel.Int16Converter", "Int16Converter");
            feature.AddKnownType("System.ComponentModel.Int32Converter", "Int32Converter");
            feature.AddKnownType("System.ComponentModel.Int64Converter", "Int64Converter");
            feature.AddKnownType("System.ComponentModel.IRaiseItemChangedEvents", "IRaiseItemChangedEvents");
            feature.AddKnownType("System.ComponentModel.ISupportInitializeNotification", "ISupportInitializeNotification");
            feature.AddKnownType("System.ComponentModel.ITypeDescriptorContext", "ITypeDescriptorContext");
            feature.AddKnownType("System.ComponentModel.ITypedList", "ITypedList");
            feature.AddKnownType("System.ComponentModel.License", "License");
            feature.AddKnownType("System.ComponentModel.LicenseContext", "LicenseContext");
            feature.AddKnownType("System.ComponentModel.LicenseException", "LicenseException");
            feature.AddKnownType("System.ComponentModel.LicenseManager", "LicenseManager");
            feature.AddKnownType("System.ComponentModel.LicenseProvider", "LicenseProvider");
            feature.AddKnownType("System.ComponentModel.LicenseProviderAttribute", "LicenseProviderAttribute");
            feature.AddKnownType("System.ComponentModel.LicenseUsageMode", "LicenseUsageMode");
            feature.AddKnownType("System.ComponentModel.LicFileLicenseProvider", "LicFileLicenseProvider");
            feature.AddKnownType("System.ComponentModel.ListBindableAttribute", "ListBindableAttribute");
            feature.AddKnownType("System.ComponentModel.ListChangedEventArgs", "ListChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.ListChangedType", "ListChangedType");
            feature.AddKnownType("System.ComponentModel.ListSortDescription", "ListSortDescription");
            feature.AddKnownType("System.ComponentModel.ListSortDescriptionCollection", "ListSortDescriptionCollection");
            feature.AddKnownType("System.ComponentModel.ListSortDirection", "ListSortDirection");
            feature.AddKnownType("System.ComponentModel.LookupBindingPropertiesAttribute", "LookupBindingPropertiesAttribute");
            feature.AddKnownType("System.ComponentModel.MarshalByValueComponent", "MarshalByValueComponent");
            feature.AddKnownType("System.ComponentModel.MaskedTextProvider", "MaskedTextProvider");
            feature.AddKnownType("System.ComponentModel.MaskedTextResultHint", "MaskedTextResultHint");
            feature.AddKnownType("System.ComponentModel.MemberDescriptor", "MemberDescriptor");
            feature.AddKnownType("System.ComponentModel.MultilineStringConverter", "MultilineStringConverter");
            feature.AddKnownType("System.ComponentModel.NestedContainer", "NestedContainer");
            feature.AddKnownType("System.ComponentModel.NullableConverter", "NullableConverter");
            feature.AddKnownType("System.ComponentModel.PasswordPropertyTextAttribute", "PasswordPropertyTextAttribute");
            feature.AddKnownType("System.ComponentModel.PropertyDescriptor", "PropertyDescriptor");
            feature.AddKnownType("System.ComponentModel.PropertyDescriptorCollection", "PropertyDescriptorCollection");
            feature.AddKnownType("System.ComponentModel.PropertyTabAttribute", "PropertyTabAttribute");
            feature.AddKnownType("System.ComponentModel.PropertyTabScope", "PropertyTabScope");
            feature.AddKnownType("System.ComponentModel.ProvidePropertyAttribute", "ProvidePropertyAttribute");
            feature.AddKnownType("System.ComponentModel.RecommendedAsConfigurableAttribute", "RecommendedAsConfigurableAttribute");
            feature.AddKnownType("System.ComponentModel.ReferenceConverter", "ReferenceConverter");
            feature.AddKnownType("System.ComponentModel.RefreshEventArgs", "RefreshEventArgs");
            feature.AddKnownType("System.ComponentModel.RunInstallerAttribute", "RunInstallerAttribute");
            feature.AddKnownType("System.ComponentModel.SByteConverter", "SByteConverter");
            feature.AddKnownType("System.ComponentModel.SettingsBindableAttribute", "SettingsBindableAttribute");
            feature.AddKnownType("System.ComponentModel.SingleConverter", "SingleConverter");
            feature.AddKnownType("System.ComponentModel.StringConverter", "StringConverter");
            feature.AddKnownType("System.ComponentModel.TimeSpanConverter", "TimeSpanConverter");
            feature.AddKnownType("System.ComponentModel.ToolboxItemAttribute", "ToolboxItemAttribute");
            feature.AddKnownType("System.ComponentModel.ToolboxItemFilterAttribute", "ToolboxItemFilterAttribute");
            feature.AddKnownType("System.ComponentModel.ToolboxItemFilterType", "ToolboxItemFilterType");
            feature.AddKnownType("System.ComponentModel.TypeConverter", "TypeConverter");
            feature.AddKnownType("System.ComponentModel.TypeConverter+SimplePropertyDescriptor", "SimplePropertyDescriptor");
            feature.AddKnownType("System.ComponentModel.TypeConverter+StandardValuesCollection", "TypeConverter.StandardValuesCollection");
            feature.AddKnownType("System.ComponentModel.TypeDescriptionProvider", "TypeDescriptionProvider");
            feature.AddKnownType("System.ComponentModel.TypeDescriptor", "TypeDescriptor");
            feature.AddKnownType("System.ComponentModel.TypeListConverter", "TypeListConverter");
            feature.AddKnownType("System.ComponentModel.UInt16Converter", "UInt16Converter");
            feature.AddKnownType("System.ComponentModel.UInt32Converter", "UInt32Converter");
            feature.AddKnownType("System.ComponentModel.UInt64Converter", "UInt64Converter");
            feature.AddKnownType("System.ComponentModel.VersionConverter", "VersionConverter");
            feature.AddKnownType("System.ComponentModel.WarningException", "WarningException");
            feature.AddKnownType("System.ComponentModel.Design.DesignerOptionService", "DesignerOptionService");
            feature.AddKnownType("System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection", "DesignerOptionService.DesignerOptionCollection");
            feature.AddKnownType("System.ComponentModel.Design.DesignerOptionService+DesignerOptionConverter", "DesignerOptionConverter");
            feature.AddKnownType("System.ComponentModel.Design.ActiveDesignerEventArgs", "ActiveDesignerEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.CheckoutException", "CheckoutException");
            feature.AddKnownType("System.ComponentModel.Design.CommandID", "CommandID");
            feature.AddKnownType("System.ComponentModel.Design.ComponentChangedEventArgs", "ComponentChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.ComponentChangingEventArgs", "ComponentChangingEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.ComponentEventArgs", "ComponentEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.ComponentRenameEventArgs", "ComponentRenameEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.DesignerCollection", "DesignerCollection");
            feature.AddKnownType("System.ComponentModel.Design.DesignerEventArgs", "DesignerEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.DesignerTransaction", "DesignerTransaction");
            feature.AddKnownType("System.ComponentModel.Design.DesignerTransactionCloseEventArgs", "DesignerTransactionCloseEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.DesignerVerb", "DesignerVerb");
            feature.AddKnownType("System.ComponentModel.Design.DesignerVerbCollection", "DesignerVerbCollection");
            feature.AddKnownType("System.ComponentModel.Design.DesigntimeLicenseContext", "DesigntimeLicenseContext");
            feature.AddKnownType("System.ComponentModel.Design.DesigntimeLicenseContextSerializer", "DesigntimeLicenseContextSerializer");
            feature.AddKnownType("System.ComponentModel.Design.HelpContextType", "HelpContextType");
            feature.AddKnownType("System.ComponentModel.Design.HelpKeywordAttribute", "HelpKeywordAttribute");
            feature.AddKnownType("System.ComponentModel.Design.HelpKeywordType", "HelpKeywordType");
            feature.AddKnownType("System.ComponentModel.Design.IComponentChangeService", "IComponentChangeService");
            feature.AddKnownType("System.ComponentModel.Design.IComponentDiscoveryService", "IComponentDiscoveryService");
            feature.AddKnownType("System.ComponentModel.Design.IComponentInitializer", "IComponentInitializer");
            feature.AddKnownType("System.ComponentModel.Design.IDesigner", "IDesigner");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerEventService", "IDesignerEventService");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerFilter", "IDesignerFilter");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerHost", "IDesignerHost");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerHostTransactionState", "IDesignerHostTransactionState");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerOptionService", "IDesignerOptionService");
            feature.AddKnownType("System.ComponentModel.Design.IDictionaryService", "IDictionaryService");
            feature.AddKnownType("System.ComponentModel.Design.IEventBindingService", "IEventBindingService");
            feature.AddKnownType("System.ComponentModel.Design.IExtenderListService", "IExtenderListService");
            feature.AddKnownType("System.ComponentModel.Design.IExtenderProviderService", "IExtenderProviderService");
            feature.AddKnownType("System.ComponentModel.Design.IHelpService", "IHelpService");
            feature.AddKnownType("System.ComponentModel.Design.IInheritanceService", "IInheritanceService");
            feature.AddKnownType("System.ComponentModel.Design.IMenuCommandService", "IMenuCommandService");
            feature.AddKnownType("System.ComponentModel.Design.IReferenceService", "IReferenceService");
            feature.AddKnownType("System.ComponentModel.Design.IResourceService", "IResourceService");
            feature.AddKnownType("System.ComponentModel.Design.IRootDesigner", "IRootDesigner");
            feature.AddKnownType("System.ComponentModel.Design.ISelectionService", "ISelectionService");
            feature.AddKnownType("System.ComponentModel.Design.IServiceContainer", "IServiceContainer");
            feature.AddKnownType("System.ComponentModel.Design.ITreeDesigner", "ITreeDesigner");
            feature.AddKnownType("System.ComponentModel.Design.ITypeDescriptorFilterService", "ITypeDescriptorFilterService");
            feature.AddKnownType("System.ComponentModel.Design.ITypeDiscoveryService", "ITypeDiscoveryService");
            feature.AddKnownType("System.ComponentModel.Design.ITypeResolutionService", "ITypeResolutionService");
            feature.AddKnownType("System.ComponentModel.Design.MenuCommand", "MenuCommand");
            feature.AddKnownType("System.ComponentModel.Design.SelectionTypes", "SelectionTypes");
            feature.AddKnownType("System.ComponentModel.Design.ServiceContainer", "ServiceContainer");
            feature.AddKnownType("System.ComponentModel.Design.StandardCommands", "StandardCommands");
            feature.AddKnownType("System.ComponentModel.Design.StandardToolWindows", "StandardToolWindows");
            feature.AddKnownType("System.ComponentModel.Design.TypeDescriptionProviderService", "TypeDescriptionProviderService");
            feature.AddKnownType("System.ComponentModel.Design.ViewTechnology", "ViewTechnology");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.ComponentSerializationService", "ComponentSerializationService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.ContextStack", "ContextStack");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute", "DefaultSerializationProviderAttribute");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.DesignerLoader", "DesignerLoader");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerLoaderHost", "IDesignerLoaderHost");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerLoaderHost2", "IDesignerLoaderHost2");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerLoaderService", "IDesignerLoaderService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerSerializationManager", "IDesignerSerializationManager");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerSerializationProvider", "IDesignerSerializationProvider");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerSerializationService", "IDesignerSerializationService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.INameCreationService", "INameCreationService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.InstanceDescriptor", "InstanceDescriptor");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.MemberRelationship", "MemberRelationship");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.MemberRelationshipService", "MemberRelationshipService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.ResolveNameEventArgs", "ResolveNameEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute", "RootDesignerSerializerAttribute");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.SerializationStore", "SerializationStore");
            feature.AddKnownType("System.Drawing.ColorConverter", "ColorConverter");
            feature.AddKnownType("System.Drawing.PointConverter", "PointConverter");
            feature.AddKnownType("System.Drawing.RectangleConverter", "RectangleConverter");
            feature.AddKnownType("System.Drawing.SizeConverter", "SizeConverter");
            feature.AddKnownType("System.Drawing.SizeFConverter", "SizeFConverter");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter", "ExtendedProtectionPolicyTypeConverter");
            feature.AddKnownType("System.Timers.ElapsedEventArgs", "ElapsedEventArgs");
            feature.AddKnownType("System.Timers.Timer", "Timer");
            feature.AddKnownType("System.Timers.TimersDescriptionAttribute", "TimersDescriptionAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Console", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ConsoleCancelEventArgs", "ConsoleCancelEventArgs");
            feature.AddKnownType("System.ConsoleColor", "ConsoleColor");
            feature.AddKnownType("System.ConsoleKey", "ConsoleKey");
            feature.AddKnownType("System.ConsoleKeyInfo", "ConsoleKeyInfo");
            feature.AddKnownType("System.ConsoleModifiers", "ConsoleModifiers");
            feature.AddKnownType("System.ConsoleSpecialKey", "ConsoleSpecialKey");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Data.Common", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Data.AcceptRejectRule", "AcceptRejectRule");
            feature.AddKnownType("System.Data.CommandBehavior", "CommandBehavior");
            feature.AddKnownType("System.Data.CommandType", "CommandType");
            feature.AddKnownType("System.Data.ConflictOption", "ConflictOption");
            feature.AddKnownType("System.Data.ConnectionState", "ConnectionState");
            feature.AddKnownType("System.Data.Constraint", "Constraint");
            feature.AddKnownType("System.Data.ConstraintCollection", "ConstraintCollection");
            feature.AddKnownType("System.Data.ConstraintException", "ConstraintException");
            feature.AddKnownType("System.Data.DataColumn", "DataColumn");
            feature.AddKnownType("System.Data.DataColumnChangeEventArgs", "DataColumnChangeEventArgs");
            feature.AddKnownType("System.Data.DataColumnCollection", "DataColumnCollection");
            feature.AddKnownType("System.Data.DataException", "DataException");
            feature.AddKnownType("System.Data.DataRelation", "DataRelation");
            feature.AddKnownType("System.Data.DataRelationCollection", "DataRelationCollection");
            feature.AddKnownType("System.Data.DataRow", "DataRow");
            feature.AddKnownType("System.Data.DataRowAction", "DataRowAction");
            feature.AddKnownType("System.Data.DataRowBuilder", "DataRowBuilder");
            feature.AddKnownType("System.Data.DataRowChangeEventArgs", "DataRowChangeEventArgs");
            feature.AddKnownType("System.Data.DataRowCollection", "DataRowCollection");
            feature.AddKnownType("System.Data.DataRowComparer`1", "DataRowComparer`1'1");
            feature.AddKnownType("System.Data.DataRowState", "DataRowState");
            feature.AddKnownType("System.Data.DataRowVersion", "DataRowVersion");
            feature.AddKnownType("System.Data.DataRowView", "DataRowView");
            feature.AddKnownType("System.Data.DataSet", "DataSet");
            feature.AddKnownType("System.Data.DataSetDateTime", "DataSetDateTime");
            feature.AddKnownType("System.Data.DataSysDescriptionAttribute", "DataSysDescriptionAttribute");
            feature.AddKnownType("System.Data.DataTable", "DataTable");
            feature.AddKnownType("System.Data.DataTableClearEventArgs", "DataTableClearEventArgs");
            feature.AddKnownType("System.Data.DataTableCollection", "DataTableCollection");
            feature.AddKnownType("System.Data.DataTableNewRowEventArgs", "DataTableNewRowEventArgs");
            feature.AddKnownType("System.Data.DataTableReader", "DataTableReader");
            feature.AddKnownType("System.Data.DataView", "DataView");
            feature.AddKnownType("System.Data.DataViewManager", "DataViewManager");
            feature.AddKnownType("System.Data.DataViewRowState", "DataViewRowState");
            feature.AddKnownType("System.Data.DataViewSetting", "DataViewSetting");
            feature.AddKnownType("System.Data.DataViewSettingCollection", "DataViewSettingCollection");
            feature.AddKnownType("System.Data.DBConcurrencyException", "DBConcurrencyException");
            feature.AddKnownType("System.Data.DbType", "DbType");
            feature.AddKnownType("System.Data.DeletedRowInaccessibleException", "DeletedRowInaccessibleException");
            feature.AddKnownType("System.Data.DuplicateNameException", "DuplicateNameException");
            feature.AddKnownType("System.Data.EnumerableRowCollection", "EnumerableRowCollection");
            feature.AddKnownType("System.Data.EnumerableRowCollection`1", "EnumerableRowCollection`1'1");
            feature.AddKnownType("System.Data.EvaluateException", "EvaluateException");
            feature.AddKnownType("System.Data.FillErrorEventArgs", "FillErrorEventArgs");
            feature.AddKnownType("System.Data.ForeignKeyConstraint", "ForeignKeyConstraint");
            feature.AddKnownType("System.Data.IColumnMapping", "IColumnMapping");
            feature.AddKnownType("System.Data.IColumnMappingCollection", "IColumnMappingCollection");
            feature.AddKnownType("System.Data.IDataAdapter", "IDataAdapter");
            feature.AddKnownType("System.Data.IDataParameter", "IDataParameter");
            feature.AddKnownType("System.Data.IDataParameterCollection", "IDataParameterCollection");
            feature.AddKnownType("System.Data.IDataReader", "IDataReader");
            feature.AddKnownType("System.Data.IDataRecord", "IDataRecord");
            feature.AddKnownType("System.Data.IDbCommand", "IDbCommand");
            feature.AddKnownType("System.Data.IDbConnection", "IDbConnection");
            feature.AddKnownType("System.Data.IDbDataAdapter", "IDbDataAdapter");
            feature.AddKnownType("System.Data.IDbDataParameter", "IDbDataParameter");
            feature.AddKnownType("System.Data.IDbTransaction", "IDbTransaction");
            feature.AddKnownType("System.Data.InRowChangingEventException", "InRowChangingEventException");
            feature.AddKnownType("System.Data.InternalDataCollectionBase", "InternalDataCollectionBase");
            feature.AddKnownType("System.Data.InvalidConstraintException", "InvalidConstraintException");
            feature.AddKnownType("System.Data.InvalidExpressionException", "InvalidExpressionException");
            feature.AddKnownType("System.Data.IsolationLevel", "IsolationLevel");
            feature.AddKnownType("System.Data.ITableMapping", "ITableMapping");
            feature.AddKnownType("System.Data.ITableMappingCollection", "ITableMappingCollection");
            feature.AddKnownType("System.Data.KeyRestrictionBehavior", "KeyRestrictionBehavior");
            feature.AddKnownType("System.Data.LoadOption", "LoadOption");
            feature.AddKnownType("System.Data.MappingType", "MappingType");
            feature.AddKnownType("System.Data.MergeFailedEventArgs", "MergeFailedEventArgs");
            feature.AddKnownType("System.Data.MissingMappingAction", "MissingMappingAction");
            feature.AddKnownType("System.Data.MissingPrimaryKeyException", "MissingPrimaryKeyException");
            feature.AddKnownType("System.Data.MissingSchemaAction", "MissingSchemaAction");
            feature.AddKnownType("System.Data.NoNullAllowedException", "NoNullAllowedException");
            feature.AddKnownType("System.Data.OrderedEnumerableRowCollection`1", "OrderedEnumerableRowCollection`1'1");
            feature.AddKnownType("System.Data.ParameterDirection", "ParameterDirection");
            feature.AddKnownType("System.Data.PropertyCollection", "PropertyCollection");
            feature.AddKnownType("System.Data.ReadOnlyException", "ReadOnlyException");
            feature.AddKnownType("System.Data.RowNotInTableException", "RowNotInTableException");
            feature.AddKnownType("System.Data.Rule", "Rule");
            feature.AddKnownType("System.Data.SchemaSerializationMode", "SchemaSerializationMode");
            feature.AddKnownType("System.Data.SchemaType", "SchemaType");
            feature.AddKnownType("System.Data.SerializationFormat", "SerializationFormat");
            feature.AddKnownType("System.Data.SqlDbType", "SqlDbType");
            feature.AddKnownType("System.Data.StateChangeEventArgs", "StateChangeEventArgs");
            feature.AddKnownType("System.Data.StatementCompletedEventArgs", "StatementCompletedEventArgs");
            feature.AddKnownType("System.Data.StatementType", "StatementType");
            feature.AddKnownType("System.Data.StrongTypingException", "StrongTypingException");
            feature.AddKnownType("System.Data.SyntaxErrorException", "SyntaxErrorException");
            feature.AddKnownType("System.Data.TypedTableBase`1", "TypedTableBase`1'1");
            feature.AddKnownType("System.Data.UniqueConstraint", "UniqueConstraint");
            feature.AddKnownType("System.Data.UpdateRowSource", "UpdateRowSource");
            feature.AddKnownType("System.Data.UpdateStatus", "UpdateStatus");
            feature.AddKnownType("System.Data.VersionNotFoundException", "VersionNotFoundException");
            feature.AddKnownType("System.Data.XmlReadMode", "XmlReadMode");
            feature.AddKnownType("System.Data.XmlWriteMode", "XmlWriteMode");
            feature.AddKnownType("System.Data.ConstraintConverter", "ConstraintConverter");
            feature.AddKnownType("System.Data.RelationshipConverter", "RelationshipConverter");
            feature.AddKnownType("System.Data.ColumnTypeConverter", "ColumnTypeConverter");
            feature.AddKnownType("System.Data.DefaultValueTypeConverter", "DefaultValueTypeConverter");
            feature.AddKnownType("System.Data.PrimaryKeyTypeConverter", "PrimaryKeyTypeConverter");
            feature.AddKnownType("System.Data.DataTableTypeConverter", "DataTableTypeConverter");
            feature.AddKnownType("System.Data.Common.CatalogLocation", "CatalogLocation");
            feature.AddKnownType("System.Data.Common.DataAdapter", "DataAdapter");
            feature.AddKnownType("System.Data.Common.DataColumnMapping", "DataColumnMapping");
            feature.AddKnownType("System.Data.Common.DataColumnMapping+DataColumnMappingConverter", "DataColumnMappingConverter");
            feature.AddKnownType("System.Data.Common.DataColumnMappingCollection", "DataColumnMappingCollection");
            feature.AddKnownType("System.Data.Common.DataTableMapping", "DataTableMapping");
            feature.AddKnownType("System.Data.Common.DataTableMapping+DataTableMappingConverter", "DataTableMappingConverter");
            feature.AddKnownType("System.Data.Common.DataTableMappingCollection", "DataTableMappingCollection");
            feature.AddKnownType("System.Data.Common.DbColumn", "DbColumn");
            feature.AddKnownType("System.Data.Common.DbCommand", "DbCommand");
            feature.AddKnownType("System.Data.Common.DbCommandBuilder", "DbCommandBuilder");
            feature.AddKnownType("System.Data.Common.DbConnection", "DbConnection");
            feature.AddKnownType("System.Data.Common.DbConnectionStringBuilder", "DbConnectionStringBuilder");
            feature.AddKnownType("System.Data.Common.DbDataAdapter", "DbDataAdapter");
            feature.AddKnownType("System.Data.Common.DbDataReader", "DbDataReader");
            feature.AddKnownType("System.Data.Common.DbDataRecord", "DbDataRecord");
            feature.AddKnownType("System.Data.Common.DbDataSourceEnumerator", "DbDataSourceEnumerator");
            feature.AddKnownType("System.Data.Common.DbEnumerator", "DbEnumerator");
            feature.AddKnownType("System.Data.Common.DbException", "DbException");
            feature.AddKnownType("System.Data.Common.DbParameter", "DbParameter");
            feature.AddKnownType("System.Data.Common.DbParameterCollection", "DbParameterCollection");
            feature.AddKnownType("System.Data.Common.DbProviderFactory", "DbProviderFactory");
            feature.AddKnownType("System.Data.Common.DbProviderSpecificTypePropertyAttribute", "DbProviderSpecificTypePropertyAttribute");
            feature.AddKnownType("System.Data.Common.DbTransaction", "DbTransaction");
            feature.AddKnownType("System.Data.Common.GroupByBehavior", "GroupByBehavior");
            feature.AddKnownType("System.Data.Common.IDbColumnSchemaGenerator", "IDbColumnSchemaGenerator");
            feature.AddKnownType("System.Data.Common.IdentifierCase", "IdentifierCase");
            feature.AddKnownType("System.Data.Common.RowUpdatedEventArgs", "RowUpdatedEventArgs");
            feature.AddKnownType("System.Data.Common.RowUpdatingEventArgs", "RowUpdatingEventArgs");
            feature.AddKnownType("System.Data.Common.SupportedJoinOperators", "SupportedJoinOperators");
            feature.AddKnownType("System.Data.SqlTypes.INullable", "INullable");
            feature.AddKnownType("System.Data.SqlTypes.SqlAlreadyFilledException", "SqlAlreadyFilledException");
            feature.AddKnownType("System.Data.SqlTypes.SqlBinary", "SqlBinary");
            feature.AddKnownType("System.Data.SqlTypes.SqlBoolean", "SqlBoolean");
            feature.AddKnownType("System.Data.SqlTypes.SqlByte", "SqlByte");
            feature.AddKnownType("System.Data.SqlTypes.SqlBytes", "SqlBytes");
            feature.AddKnownType("System.Data.SqlTypes.SqlChars", "SqlChars");
            feature.AddKnownType("System.Data.SqlTypes.SqlCompareOptions", "SqlCompareOptions");
            feature.AddKnownType("System.Data.SqlTypes.SqlDateTime", "SqlDateTime");
            feature.AddKnownType("System.Data.SqlTypes.SqlDecimal", "SqlDecimal");
            feature.AddKnownType("System.Data.SqlTypes.SqlDouble", "SqlDouble");
            feature.AddKnownType("System.Data.SqlTypes.SqlGuid", "SqlGuid");
            feature.AddKnownType("System.Data.SqlTypes.SqlInt16", "SqlInt16");
            feature.AddKnownType("System.Data.SqlTypes.SqlInt32", "SqlInt32");
            feature.AddKnownType("System.Data.SqlTypes.SqlInt64", "SqlInt64");
            feature.AddKnownType("System.Data.SqlTypes.SqlMoney", "SqlMoney");
            feature.AddKnownType("System.Data.SqlTypes.SqlNotFilledException", "SqlNotFilledException");
            feature.AddKnownType("System.Data.SqlTypes.SqlNullValueException", "SqlNullValueException");
            feature.AddKnownType("System.Data.SqlTypes.SqlSingle", "SqlSingle");
            feature.AddKnownType("System.Data.SqlTypes.SqlString", "SqlString");
            feature.AddKnownType("System.Data.SqlTypes.SqlTruncateException", "SqlTruncateException");
            feature.AddKnownType("System.Data.SqlTypes.SqlTypeException", "SqlTypeException");
            feature.AddKnownType("System.Data.SqlTypes.SqlXml", "SqlXml");
            feature.AddKnownType("System.Data.SqlTypes.StorageState", "StorageState");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.XmlDataDocument", "XmlDataDocument");
            feature.AddKnownType("Microsoft.SqlServer.Server.DataAccessKind,System.Data.SqlClient", "Microsoft.SqlServer.Server.DataAccessKind");
            feature.AddKnownType("Microsoft.SqlServer.Server.Format,System.Data.SqlClient", "Microsoft.SqlServer.Server.Format");
            feature.AddKnownType("Microsoft.SqlServer.Server.IBinarySerialize,System.Data.SqlClient", "Microsoft.SqlServer.Server.IBinarySerialize");
            feature.AddKnownType("Microsoft.SqlServer.Server.InvalidUdtException,System.Data.SqlClient", "Microsoft.SqlServer.Server.InvalidUdtException");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlDataRecord,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlDataRecord");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlFunctionAttribute,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlFunctionAttribute");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlMetaData,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlMetaData");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlMethodAttribute,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlMethodAttribute");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute");
            feature.AddKnownType("Microsoft.SqlServer.Server.SystemDataAccessKind,System.Data.SqlClient", "Microsoft.SqlServer.Server.SystemDataAccessKind");
            feature.AddKnownType("Microsoft.SqlServer.Server.SqlFacetAttribute,System.Data.SqlClient", "Microsoft.SqlServer.Server.SqlFacetAttribute");
            feature.AddKnownType("System.Data.OperationAbortedException", "OperationAbortedException");
            feature.AddKnownType("System.Data.Sql.SqlNotificationRequest", "SqlNotificationRequest");
            feature.AddKnownType("System.Data.SqlClient.ApplicationIntent", "ApplicationIntent");
            feature.AddKnownType("System.Data.SqlClient.SortOrder", "SortOrder");
            feature.AddKnownType("System.Data.SqlClient.SqlBulkCopy", "SqlBulkCopy");
            feature.AddKnownType("System.Data.SqlClient.SqlBulkCopyColumnMapping", "SqlBulkCopyColumnMapping");
            feature.AddKnownType("System.Data.SqlClient.SqlBulkCopyColumnMappingCollection", "SqlBulkCopyColumnMappingCollection");
            feature.AddKnownType("System.Data.SqlClient.SqlBulkCopyOptions", "SqlBulkCopyOptions");
            feature.AddKnownType("System.Data.SqlClient.SqlClientFactory", "SqlClientFactory");
            feature.AddKnownType("System.Data.SqlClient.SqlCommand", "SqlCommand");
            feature.AddKnownType("System.Data.SqlClient.SqlCommandBuilder", "SqlCommandBuilder");
            feature.AddKnownType("System.Data.SqlClient.SqlConnection", "SqlConnection");
            feature.AddKnownType("System.Data.SqlClient.SqlConnectionStringBuilder", "SqlConnectionStringBuilder");
            feature.AddKnownType("System.Data.SqlClient.SqlCredential", "SqlCredential");
            feature.AddKnownType("System.Data.SqlClient.SqlDataAdapter", "SqlDataAdapter");
            feature.AddKnownType("System.Data.SqlClient.SqlDataReader", "SqlDataReader");
            feature.AddKnownType("System.Data.SqlClient.SqlDependency", "SqlDependency");
            feature.AddKnownType("System.Data.SqlClient.SqlError", "SqlError");
            feature.AddKnownType("System.Data.SqlClient.SqlErrorCollection", "SqlErrorCollection");
            feature.AddKnownType("System.Data.SqlClient.SqlException", "SqlException");
            feature.AddKnownType("System.Data.SqlClient.SqlInfoMessageEventArgs", "SqlInfoMessageEventArgs");
            feature.AddKnownType("System.Data.SqlClient.SqlNotificationEventArgs", "SqlNotificationEventArgs");
            feature.AddKnownType("System.Data.SqlClient.SqlNotificationInfo", "SqlNotificationInfo");
            feature.AddKnownType("System.Data.SqlClient.SqlNotificationSource", "SqlNotificationSource");
            feature.AddKnownType("System.Data.SqlClient.SqlNotificationType", "SqlNotificationType");
            feature.AddKnownType("System.Data.SqlClient.SqlParameter", "SqlParameter");
            feature.AddKnownType("System.Data.SqlClient.SqlParameter+SqlParameterConverter", "SqlParameterConverter");
            feature.AddKnownType("System.Data.SqlClient.SqlParameterCollection", "SqlParameterCollection");
            feature.AddKnownType("System.Data.SqlClient.SqlRowsCopiedEventArgs", "SqlRowsCopiedEventArgs");
            feature.AddKnownType("System.Data.SqlClient.SqlRowUpdatedEventArgs", "SqlRowUpdatedEventArgs");
            feature.AddKnownType("System.Data.SqlClient.SqlRowUpdatingEventArgs", "SqlRowUpdatingEventArgs");
            feature.AddKnownType("System.Data.SqlClient.SqlTransaction", "SqlTransaction");
            feature.AddKnownType("System.Data.SqlClient.PoolBlockingPeriod", "PoolBlockingPeriod");
            feature.AddKnownType("System.Data.SqlTypes.SqlFileStream", "SqlFileStream");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.Contracts", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractAbbreviatorAttribute", "ContractAbbreviatorAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractArgumentValidatorAttribute", "ContractArgumentValidatorAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractClassAttribute", "ContractClassAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractClassForAttribute", "ContractClassForAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractFailedEventArgs", "ContractFailedEventArgs");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractFailureKind", "ContractFailureKind");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractInvariantMethodAttribute", "ContractInvariantMethodAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractOptionAttribute", "ContractOptionAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute", "ContractPublicPropertyNameAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute", "ContractReferenceAssemblyAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute", "ContractRuntimeIgnoredAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractVerificationAttribute", "ContractVerificationAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.PureAttribute", "PureAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.DiagnosticSource", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.DiagnosticListener", "DiagnosticListener");
            feature.AddKnownType("System.Diagnostics.DiagnosticSource", "DiagnosticSource");
            feature.AddKnownType("System.Diagnostics.Activity", "Activity");
            feature.AddKnownType("System.Diagnostics.ActivityTagsCollection", "ActivityTagsCollection");
            feature.AddKnownType("System.Diagnostics.ActivityTagsCollection+Enumerator", "ActivityTagsCollection.Enumerator");
            feature.AddKnownType("System.Diagnostics.ActivityIdFormat", "ActivityIdFormat");
            feature.AddKnownType("System.Diagnostics.ActivitySpanId", "ActivitySpanId");
            feature.AddKnownType("System.Diagnostics.ActivitySource", "ActivitySource");
            feature.AddKnownType("System.Diagnostics.ActivityTraceFlags", "ActivityTraceFlags");
            feature.AddKnownType("System.Diagnostics.ActivityTraceId", "ActivityTraceId");
            feature.AddKnownType("System.Diagnostics.ActivitySamplingResult", "ActivitySamplingResult");
            feature.AddKnownType("System.Diagnostics.ActivityKind", "ActivityKind");
            feature.AddKnownType("System.Diagnostics.ActivityEvent", "ActivityEvent");
            feature.AddKnownType("System.Diagnostics.ActivityContext", "ActivityContext");
            feature.AddKnownType("System.Diagnostics.ActivityLink", "ActivityLink");
            feature.AddKnownType("System.Diagnostics.ActivityCreationOptions`1", "ActivityCreationOptions`1'1");
            feature.AddKnownType("System.Diagnostics.ActivityListener", "ActivityListener");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.FileVersionInfo", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.FileVersionInfo", "FileVersionInfo");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.Process", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeProcessHandle,System.Diagnostics.Process", "Microsoft.Win32.SafeHandles.SafeProcessHandle");
            feature.AddKnownType("System.Diagnostics.DataReceivedEventArgs", "DataReceivedEventArgs");
            feature.AddKnownType("System.Diagnostics.MonitoringDescriptionAttribute", "MonitoringDescriptionAttribute");
            feature.AddKnownType("System.Diagnostics.Process", "Process");
            feature.AddKnownType("System.Diagnostics.ProcessModule", "ProcessModule");
            feature.AddKnownType("System.Diagnostics.ProcessModuleCollection", "ProcessModuleCollection");
            feature.AddKnownType("System.Diagnostics.ProcessPriorityClass", "ProcessPriorityClass");
            feature.AddKnownType("System.Diagnostics.ProcessStartInfo", "ProcessStartInfo");
            feature.AddKnownType("System.Diagnostics.ProcessThread", "ProcessThread");
            feature.AddKnownType("System.Diagnostics.ProcessThreadCollection", "ProcessThreadCollection");
            feature.AddKnownType("System.Diagnostics.ProcessWindowStyle", "ProcessWindowStyle");
            feature.AddKnownType("System.Diagnostics.ThreadPriorityLevel", "ThreadPriorityLevel");
            feature.AddKnownType("System.Diagnostics.ThreadState", "ThreadState");
            feature.AddKnownType("System.Diagnostics.ThreadWaitReason", "ThreadWaitReason");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.StackTrace", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.StackFrame", "StackFrame");
            feature.AddKnownType("System.Diagnostics.StackTrace", "StackTrace");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolBinder", "ISymbolBinder");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolBinder1", "ISymbolBinder1");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolDocument", "ISymbolDocument");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolDocumentWriter", "ISymbolDocumentWriter");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolMethod", "ISymbolMethod");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolNamespace", "ISymbolNamespace");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolReader", "ISymbolReader");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolScope", "ISymbolScope");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolVariable", "ISymbolVariable");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolWriter", "ISymbolWriter");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymAddressKind", "SymAddressKind");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymbolToken", "SymbolToken");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymDocumentType", "SymDocumentType");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymLanguageType", "SymLanguageType");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymLanguageVendor", "SymLanguageVendor");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.TextWriterTraceListener", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.ConsoleTraceListener", "ConsoleTraceListener");
            feature.AddKnownType("System.Diagnostics.DelimitedListTraceListener", "DelimitedListTraceListener");
            feature.AddKnownType("System.Diagnostics.TextWriterTraceListener", "TextWriterTraceListener");
            feature.AddKnownType("System.Diagnostics.XmlWriterTraceListener", "XmlWriterTraceListener");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.TraceSource", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.BooleanSwitch", "BooleanSwitch");
            feature.AddKnownType("System.Diagnostics.CorrelationManager", "CorrelationManager");
            feature.AddKnownType("System.Diagnostics.DefaultTraceListener", "DefaultTraceListener");
            feature.AddKnownType("System.Diagnostics.EventTypeFilter", "EventTypeFilter");
            feature.AddKnownType("System.Diagnostics.SourceFilter", "SourceFilter");
            feature.AddKnownType("System.Diagnostics.SourceLevels", "SourceLevels");
            feature.AddKnownType("System.Diagnostics.SourceSwitch", "SourceSwitch");
            feature.AddKnownType("System.Diagnostics.Switch", "Switch");
            feature.AddKnownType("System.Diagnostics.SwitchAttribute", "SwitchAttribute");
            feature.AddKnownType("System.Diagnostics.SwitchLevelAttribute", "SwitchLevelAttribute");
            feature.AddKnownType("System.Diagnostics.Trace", "Trace");
            feature.AddKnownType("System.Diagnostics.TraceEventCache", "TraceEventCache");
            feature.AddKnownType("System.Diagnostics.TraceEventType", "TraceEventType");
            feature.AddKnownType("System.Diagnostics.TraceFilter", "TraceFilter");
            feature.AddKnownType("System.Diagnostics.TraceLevel", "TraceLevel");
            feature.AddKnownType("System.Diagnostics.TraceListener", "TraceListener");
            feature.AddKnownType("System.Diagnostics.TraceListenerCollection", "TraceListenerCollection");
            feature.AddKnownType("System.Diagnostics.TraceOptions", "TraceOptions");
            feature.AddKnownType("System.Diagnostics.TraceSource", "TraceSource");
            feature.AddKnownType("System.Diagnostics.TraceSwitch", "TraceSwitch");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.Tracing", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventActivityOptions", "EventActivityOptions");
            feature.AddKnownType("System.Diagnostics.Tracing.EventAttribute", "EventAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventChannel", "EventChannel");
            feature.AddKnownType("System.Diagnostics.Tracing.EventCommand", "EventCommand");
            feature.AddKnownType("System.Diagnostics.Tracing.EventCommandEventArgs", "EventCommandEventArgs");
            feature.AddKnownType("System.Diagnostics.Tracing.EventDataAttribute", "EventDataAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventFieldAttribute", "EventFieldAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventFieldFormat", "EventFieldFormat");
            feature.AddKnownType("System.Diagnostics.Tracing.EventFieldTags", "EventFieldTags");
            feature.AddKnownType("System.Diagnostics.Tracing.EventIgnoreAttribute", "EventIgnoreAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventKeywords", "EventKeywords");
            feature.AddKnownType("System.Diagnostics.Tracing.EventLevel", "EventLevel");
            feature.AddKnownType("System.Diagnostics.Tracing.EventListener", "EventListener");
            feature.AddKnownType("System.Diagnostics.Tracing.EventManifestOptions", "EventManifestOptions");
            feature.AddKnownType("System.Diagnostics.Tracing.EventOpcode", "EventOpcode");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSource", "EventSource");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSource+EventData", "EventData");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceAttribute", "EventSourceAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceCreatedEventArgs", "EventSourceCreatedEventArgs");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceException", "EventSourceException");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceOptions", "EventSourceOptions");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceSettings", "EventSourceSettings");
            feature.AddKnownType("System.Diagnostics.Tracing.EventTags", "EventTags");
            feature.AddKnownType("System.Diagnostics.Tracing.EventTask", "EventTask");
            feature.AddKnownType("System.Diagnostics.Tracing.EventWrittenEventArgs", "EventWrittenEventArgs");
            feature.AddKnownType("System.Diagnostics.Tracing.NonEventAttribute", "NonEventAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.DiagnosticCounter", "DiagnosticCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.PollingCounter", "PollingCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.IncrementingEventCounter", "IncrementingEventCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.IncrementingPollingCounter", "IncrementingPollingCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.EventCounter", "EventCounter");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Drawing.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Drawing.Color", "Color");
            feature.AddKnownType("System.Drawing.KnownColor", "KnownColor");
            feature.AddKnownType("System.Drawing.Point", "Point");
            feature.AddKnownType("System.Drawing.PointF", "PointF");
            feature.AddKnownType("System.Drawing.Rectangle", "Rectangle");
            feature.AddKnownType("System.Drawing.RectangleF", "RectangleF");
            feature.AddKnownType("System.Drawing.Size", "Size");
            feature.AddKnownType("System.Drawing.SizeF", "SizeF");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Formats.Asn1", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Formats.Asn1.Asn1Tag", "Asn1Tag");
            feature.AddKnownType("System.Formats.Asn1.AsnContentException", "AsnContentException");
            feature.AddKnownType("System.Formats.Asn1.AsnEncodingRules", "AsnEncodingRules");
            feature.AddKnownType("System.Formats.Asn1.AsnReader", "AsnReader");
            feature.AddKnownType("System.Formats.Asn1.AsnReaderOptions", "AsnReaderOptions");
            feature.AddKnownType("System.Formats.Asn1.AsnWriter", "AsnWriter");
            feature.AddKnownType("System.Formats.Asn1.AsnWriter+Scope", "AsnWriter.Scope");
            feature.AddKnownType("System.Formats.Asn1.TagClass", "TagClass");
            feature.AddKnownType("System.Formats.Asn1.UniversalTagNumber", "UniversalTagNumber");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Compression.Brotli", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.Compression.BrotliDecoder", "BrotliDecoder");
            feature.AddKnownType("System.IO.Compression.BrotliEncoder", "BrotliEncoder");
            feature.AddKnownType("System.IO.Compression.BrotliStream", "BrotliStream");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Compression", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.Compression.CompressionLevel", "CompressionLevel");
            feature.AddKnownType("System.IO.Compression.CompressionMode", "CompressionMode");
            feature.AddKnownType("System.IO.Compression.DeflateStream", "DeflateStream");
            feature.AddKnownType("System.IO.Compression.GZipStream", "GZipStream");
            feature.AddKnownType("System.IO.Compression.ZipArchive", "ZipArchive");
            feature.AddKnownType("System.IO.Compression.ZipArchiveEntry", "ZipArchiveEntry");
            feature.AddKnownType("System.IO.Compression.ZipArchiveMode", "ZipArchiveMode");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Compression.ZipFile", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.FileSystem", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.DirectoryInfo", "DirectoryInfo");
            feature.AddKnownType("System.IO.EnumerationOptions", "EnumerationOptions");
            feature.AddKnownType("System.IO.FileInfo", "FileInfo");
            feature.AddKnownType("System.IO.FileSystemInfo", "FileSystemInfo");
            feature.AddKnownType("System.IO.MatchCasing", "MatchCasing");
            feature.AddKnownType("System.IO.MatchType", "MatchType");
            feature.AddKnownType("System.IO.SearchOption", "SearchOption");
            feature.AddKnownType("System.IO.Enumeration.FileSystemEntry", "FileSystemEntry");
            feature.AddKnownType("System.IO.Enumeration.FileSystemEnumerable`1", "FileSystemEnumerable`1'1");
            feature.AddKnownType("System.IO.Enumeration.FileSystemEnumerator`1", "FileSystemEnumerator`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.FileSystem.DriveInfo", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.DriveInfo", "DriveInfo");
            feature.AddKnownType("System.IO.DriveNotFoundException", "DriveNotFoundException");
            feature.AddKnownType("System.IO.DriveType", "DriveType");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.FileSystem.Watcher", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.ErrorEventArgs", "ErrorEventArgs");
            feature.AddKnownType("System.IO.FileSystemEventArgs", "FileSystemEventArgs");
            feature.AddKnownType("System.IO.FileSystemWatcher", "FileSystemWatcher");
            feature.AddKnownType("System.IO.InternalBufferOverflowException", "InternalBufferOverflowException");
            feature.AddKnownType("System.IO.NotifyFilters", "NotifyFilters");
            feature.AddKnownType("System.IO.RenamedEventArgs", "RenamedEventArgs");
            feature.AddKnownType("System.IO.WaitForChangedResult", "WaitForChangedResult");
            feature.AddKnownType("System.IO.WatcherChangeTypes", "WatcherChangeTypes");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.IsolatedStorage", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.IsolatedStorage.INormalizeForIsolatedStorage", "INormalizeForIsolatedStorage");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorage", "IsolatedStorage");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageException", "IsolatedStorageException");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageFile", "IsolatedStorageFile");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageFileStream", "IsolatedStorageFileStream");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageScope", "IsolatedStorageScope");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.MemoryMappedFiles", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle,System.IO.MemoryMappedFiles", "Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle,System.IO.MemoryMappedFiles", "Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFile", "MemoryMappedFile");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFileAccess", "MemoryMappedFileAccess");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFileOptions", "MemoryMappedFileOptions");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFileRights", "MemoryMappedFileRights");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor", "MemoryMappedViewAccessor");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedViewStream", "MemoryMappedViewStream");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Pipes", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafePipeHandle,System.IO.Pipes", "Microsoft.Win32.SafeHandles.SafePipeHandle");
            feature.AddKnownType("System.IO.Pipes.AnonymousPipeClientStream", "AnonymousPipeClientStream");
            feature.AddKnownType("System.IO.Pipes.AnonymousPipeServerStream", "AnonymousPipeServerStream");
            feature.AddKnownType("System.IO.Pipes.NamedPipeClientStream", "NamedPipeClientStream");
            feature.AddKnownType("System.IO.Pipes.NamedPipeServerStream", "NamedPipeServerStream");
            feature.AddKnownType("System.IO.Pipes.PipeDirection", "PipeDirection");
            feature.AddKnownType("System.IO.Pipes.PipeOptions", "PipeOptions");
            feature.AddKnownType("System.IO.Pipes.PipeStream", "PipeStream");
            feature.AddKnownType("System.IO.Pipes.PipeTransmissionMode", "PipeTransmissionMode");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Linq.IGrouping`2", "IGrouping`2'2");
            feature.AddKnownType("System.Linq.ILookup`2", "ILookup`2'2");
            feature.AddKnownType("System.Linq.IOrderedEnumerable`1", "IOrderedEnumerable`1'1");
            feature.AddKnownType("System.Linq.Lookup`2", "Lookup`2'2");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq.Expressions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Dynamic.BinaryOperationBinder", "BinaryOperationBinder");
            feature.AddKnownType("System.Dynamic.BindingRestrictions", "BindingRestrictions");
            feature.AddKnownType("System.Dynamic.CallInfo", "CallInfo");
            feature.AddKnownType("System.Dynamic.ConvertBinder", "ConvertBinder");
            feature.AddKnownType("System.Dynamic.CreateInstanceBinder", "CreateInstanceBinder");
            feature.AddKnownType("System.Dynamic.DeleteIndexBinder", "DeleteIndexBinder");
            feature.AddKnownType("System.Dynamic.DeleteMemberBinder", "DeleteMemberBinder");
            feature.AddKnownType("System.Dynamic.DynamicMetaObject", "DynamicMetaObject");
            feature.AddKnownType("System.Dynamic.DynamicMetaObjectBinder", "DynamicMetaObjectBinder");
            feature.AddKnownType("System.Dynamic.DynamicObject", "DynamicObject");
            feature.AddKnownType("System.Dynamic.ExpandoObject", "ExpandoObject");
            feature.AddKnownType("System.Dynamic.GetIndexBinder", "GetIndexBinder");
            feature.AddKnownType("System.Dynamic.GetMemberBinder", "GetMemberBinder");
            feature.AddKnownType("System.Dynamic.IDynamicMetaObjectProvider", "IDynamicMetaObjectProvider");
            feature.AddKnownType("System.Dynamic.IInvokeOnGetBinder", "IInvokeOnGetBinder");
            feature.AddKnownType("System.Dynamic.InvokeBinder", "InvokeBinder");
            feature.AddKnownType("System.Dynamic.InvokeMemberBinder", "InvokeMemberBinder");
            feature.AddKnownType("System.Dynamic.SetIndexBinder", "SetIndexBinder");
            feature.AddKnownType("System.Dynamic.SetMemberBinder", "SetMemberBinder");
            feature.AddKnownType("System.Dynamic.UnaryOperationBinder", "UnaryOperationBinder");
            feature.AddKnownType("System.Linq.IOrderedQueryable", "IOrderedQueryable");
            feature.AddKnownType("System.Linq.IOrderedQueryable`1", "IOrderedQueryable`1'1");
            feature.AddKnownType("System.Linq.IQueryable", "IQueryable");
            feature.AddKnownType("System.Linq.IQueryable`1", "IQueryable`1'1");
            feature.AddKnownType("System.Linq.IQueryProvider", "IQueryProvider");
            feature.AddKnownType("System.Linq.Expressions.BinaryExpression", "BinaryExpression");
            feature.AddKnownType("System.Linq.Expressions.BlockExpression", "BlockExpression");
            feature.AddKnownType("System.Linq.Expressions.CatchBlock", "CatchBlock");
            feature.AddKnownType("System.Linq.Expressions.ConditionalExpression", "ConditionalExpression");
            feature.AddKnownType("System.Linq.Expressions.ConstantExpression", "ConstantExpression");
            feature.AddKnownType("System.Linq.Expressions.DebugInfoExpression", "DebugInfoExpression");
            feature.AddKnownType("System.Linq.Expressions.DefaultExpression", "DefaultExpression");
            feature.AddKnownType("System.Linq.Expressions.DynamicExpression", "DynamicExpression");
            feature.AddKnownType("System.Linq.Expressions.DynamicExpressionVisitor", "DynamicExpressionVisitor");
            feature.AddKnownType("System.Linq.Expressions.ElementInit", "ElementInit");
            feature.AddKnownType("System.Linq.Expressions.Expression", "Expression");
            feature.AddKnownType("System.Linq.Expressions.Expression`1", "Expression`1'1");
            feature.AddKnownType("System.Linq.Expressions.ExpressionType", "ExpressionType");
            feature.AddKnownType("System.Linq.Expressions.ExpressionVisitor", "ExpressionVisitor");
            feature.AddKnownType("System.Linq.Expressions.GotoExpression", "GotoExpression");
            feature.AddKnownType("System.Linq.Expressions.GotoExpressionKind", "GotoExpressionKind");
            feature.AddKnownType("System.Linq.Expressions.IArgumentProvider", "IArgumentProvider");
            feature.AddKnownType("System.Linq.Expressions.IDynamicExpression", "IDynamicExpression");
            feature.AddKnownType("System.Linq.Expressions.IndexExpression", "IndexExpression");
            feature.AddKnownType("System.Linq.Expressions.InvocationExpression", "InvocationExpression");
            feature.AddKnownType("System.Linq.Expressions.LabelExpression", "LabelExpression");
            feature.AddKnownType("System.Linq.Expressions.LabelTarget", "LabelTarget");
            feature.AddKnownType("System.Linq.Expressions.LambdaExpression", "LambdaExpression");
            feature.AddKnownType("System.Linq.Expressions.ListInitExpression", "ListInitExpression");
            feature.AddKnownType("System.Linq.Expressions.LoopExpression", "LoopExpression");
            feature.AddKnownType("System.Linq.Expressions.MemberAssignment", "MemberAssignment");
            feature.AddKnownType("System.Linq.Expressions.MemberBinding", "MemberBinding");
            feature.AddKnownType("System.Linq.Expressions.MemberBindingType", "MemberBindingType");
            feature.AddKnownType("System.Linq.Expressions.MemberExpression", "MemberExpression");
            feature.AddKnownType("System.Linq.Expressions.MemberInitExpression", "MemberInitExpression");
            feature.AddKnownType("System.Linq.Expressions.MemberListBinding", "MemberListBinding");
            feature.AddKnownType("System.Linq.Expressions.MemberMemberBinding", "MemberMemberBinding");
            feature.AddKnownType("System.Linq.Expressions.MethodCallExpression", "MethodCallExpression");
            feature.AddKnownType("System.Linq.Expressions.NewArrayExpression", "NewArrayExpression");
            feature.AddKnownType("System.Linq.Expressions.NewExpression", "NewExpression");
            feature.AddKnownType("System.Linq.Expressions.ParameterExpression", "ParameterExpression");
            feature.AddKnownType("System.Linq.Expressions.RuntimeVariablesExpression", "RuntimeVariablesExpression");
            feature.AddKnownType("System.Linq.Expressions.SwitchCase", "SwitchCase");
            feature.AddKnownType("System.Linq.Expressions.SwitchExpression", "SwitchExpression");
            feature.AddKnownType("System.Linq.Expressions.SymbolDocumentInfo", "SymbolDocumentInfo");
            feature.AddKnownType("System.Linq.Expressions.TryExpression", "TryExpression");
            feature.AddKnownType("System.Linq.Expressions.TypeBinaryExpression", "TypeBinaryExpression");
            feature.AddKnownType("System.Linq.Expressions.UnaryExpression", "UnaryExpression");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallSite", "CallSite");
            feature.AddKnownType("System.Runtime.CompilerServices.CallSite`1", "CallSite`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.CallSiteBinder", "CallSiteBinder");
            feature.AddKnownType("System.Runtime.CompilerServices.DebugInfoGenerator", "DebugInfoGenerator");
            feature.AddKnownType("System.Runtime.CompilerServices.DynamicAttribute", "DynamicAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IRuntimeVariables", "IRuntimeVariables");
            feature.AddKnownType("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", "ReadOnlyCollectionBuilder`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.RuleCache`1", "RuleCache`1'1");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq.Parallel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Linq.OrderedParallelQuery`1", "OrderedParallelQuery`1'1");
            feature.AddKnownType("System.Linq.ParallelExecutionMode", "ParallelExecutionMode");
            feature.AddKnownType("System.Linq.ParallelMergeOptions", "ParallelMergeOptions");
            feature.AddKnownType("System.Linq.ParallelQuery", "ParallelQuery");
            feature.AddKnownType("System.Linq.ParallelQuery`1", "ParallelQuery`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq.Queryable", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Linq.EnumerableExecutor", "EnumerableExecutor");
            feature.AddKnownType("System.Linq.EnumerableExecutor`1", "EnumerableExecutor`1'1");
            feature.AddKnownType("System.Linq.EnumerableQuery", "EnumerableQuery");
            feature.AddKnownType("System.Linq.EnumerableQuery`1", "EnumerableQuery`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Memory", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.SequencePosition", "SequencePosition");
            feature.AddKnownType("System.Buffers.ArrayBufferWriter`1", "ArrayBufferWriter`1'1");
            feature.AddKnownType("System.Buffers.IBufferWriter`1", "IBufferWriter`1'1");
            feature.AddKnownType("System.Buffers.MemoryPool`1", "MemoryPool`1'1");
            feature.AddKnownType("System.Buffers.ReadOnlySequenceSegment`1", "ReadOnlySequenceSegment`1'1");
            feature.AddKnownType("System.Buffers.ReadOnlySequence`1", "ReadOnlySequence`1'1");
            feature.AddKnownType("System.Buffers.ReadOnlySequence`1+Enumerator", "ReadOnlySequence`1'1.Enumerator'1");
            feature.AddKnownType("System.Buffers.SequenceReader`1", "SequenceReader`1'1");
            feature.AddKnownType("System.Buffers.StandardFormat", "StandardFormat");
            feature.AddKnownType("System.Runtime.CompilerServices.IsUnmanagedAttribute", "IsUnmanagedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.SpanRuneEnumerator", "SpanRuneEnumerator");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Http", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Http.ByteArrayContent", "ByteArrayContent");
            feature.AddKnownType("System.Net.Http.ClientCertificateOption", "ClientCertificateOption");
            feature.AddKnownType("System.Net.Http.DelegatingHandler", "DelegatingHandler");
            feature.AddKnownType("System.Net.Http.FormUrlEncodedContent", "FormUrlEncodedContent");
            feature.AddKnownType("System.Net.Http.HttpClient", "HttpClient");
            feature.AddKnownType("System.Net.Http.HttpClientHandler", "HttpClientHandler");
            feature.AddKnownType("System.Net.Http.HttpCompletionOption", "HttpCompletionOption");
            feature.AddKnownType("System.Net.Http.HttpContent", "HttpContent");
            feature.AddKnownType("System.Net.Http.HttpMessageHandler", "HttpMessageHandler");
            feature.AddKnownType("System.Net.Http.HttpMessageInvoker", "HttpMessageInvoker");
            feature.AddKnownType("System.Net.Http.HttpMethod", "HttpMethod");
            feature.AddKnownType("System.Net.Http.HttpRequestException", "HttpRequestException");
            feature.AddKnownType("System.Net.Http.HttpRequestMessage", "HttpRequestMessage");
            feature.AddKnownType("System.Net.Http.HttpRequestOptionsKey`1", "HttpRequestOptionsKey`1'1");
            feature.AddKnownType("System.Net.Http.HttpRequestOptions", "HttpRequestOptions");
            feature.AddKnownType("System.Net.Http.HttpResponseMessage", "HttpResponseMessage");
            feature.AddKnownType("System.Net.Http.HttpVersionPolicy", "HttpVersionPolicy");
            feature.AddKnownType("System.Net.Http.MessageProcessingHandler", "MessageProcessingHandler");
            feature.AddKnownType("System.Net.Http.MultipartContent", "MultipartContent");
            feature.AddKnownType("System.Net.Http.MultipartFormDataContent", "MultipartFormDataContent");
            feature.AddKnownType("System.Net.Http.ReadOnlyMemoryContent", "ReadOnlyMemoryContent");
            feature.AddKnownType("System.Net.Http.SocketsHttpHandler", "SocketsHttpHandler");
            feature.AddKnownType("System.Net.Http.SocketsHttpConnectionContext", "SocketsHttpConnectionContext");
            feature.AddKnownType("System.Net.Http.SocketsHttpPlaintextStreamFilterContext", "SocketsHttpPlaintextStreamFilterContext");
            feature.AddKnownType("System.Net.Http.HttpKeepAlivePingPolicy", "HttpKeepAlivePingPolicy");
            feature.AddKnownType("System.Net.Http.StreamContent", "StreamContent");
            feature.AddKnownType("System.Net.Http.StringContent", "StringContent");
            feature.AddKnownType("System.Net.Http.Headers.AuthenticationHeaderValue", "AuthenticationHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.CacheControlHeaderValue", "CacheControlHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ContentDispositionHeaderValue", "ContentDispositionHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ContentRangeHeaderValue", "ContentRangeHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.EntityTagHeaderValue", "EntityTagHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.HttpContentHeaders", "HttpContentHeaders");
            feature.AddKnownType("System.Net.Http.Headers.HttpHeaders", "HttpHeaders");
            feature.AddKnownType("System.Net.Http.Headers.HttpHeaderValueCollection`1", "HttpHeaderValueCollection`1'1");
            feature.AddKnownType("System.Net.Http.Headers.HttpRequestHeaders", "HttpRequestHeaders");
            feature.AddKnownType("System.Net.Http.Headers.HttpResponseHeaders", "HttpResponseHeaders");
            feature.AddKnownType("System.Net.Http.Headers.MediaTypeHeaderValue", "MediaTypeHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.MediaTypeWithQualityHeaderValue", "MediaTypeWithQualityHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.NameValueHeaderValue", "NameValueHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.NameValueWithParametersHeaderValue", "NameValueWithParametersHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ProductHeaderValue", "ProductHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ProductInfoHeaderValue", "ProductInfoHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RangeConditionHeaderValue", "RangeConditionHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RangeHeaderValue", "RangeHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RangeItemHeaderValue", "RangeItemHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RetryConditionHeaderValue", "RetryConditionHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.StringWithQualityHeaderValue", "StringWithQualityHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.TransferCodingHeaderValue", "TransferCodingHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.TransferCodingWithQualityHeaderValue", "TransferCodingWithQualityHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ViaHeaderValue", "ViaHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.WarningHeaderValue", "WarningHeaderValue");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Http.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Http.Json.JsonContent", "JsonContent");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.HttpListener", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.HttpListener", "HttpListener");
            feature.AddKnownType("System.Net.HttpListenerBasicIdentity", "HttpListenerBasicIdentity");
            feature.AddKnownType("System.Net.HttpListenerContext", "HttpListenerContext");
            feature.AddKnownType("System.Net.HttpListenerException", "HttpListenerException");
            feature.AddKnownType("System.Net.HttpListenerPrefixCollection", "HttpListenerPrefixCollection");
            feature.AddKnownType("System.Net.HttpListenerRequest", "HttpListenerRequest");
            feature.AddKnownType("System.Net.HttpListenerResponse", "HttpListenerResponse");
            feature.AddKnownType("System.Net.HttpListenerTimeoutManager", "HttpListenerTimeoutManager");
            feature.AddKnownType("System.Net.WebSockets.HttpListenerWebSocketContext", "HttpListenerWebSocketContext");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Mail", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Mail.AlternateView", "AlternateView");
            feature.AddKnownType("System.Net.Mail.AlternateViewCollection", "AlternateViewCollection");
            feature.AddKnownType("System.Net.Mail.Attachment", "Attachment");
            feature.AddKnownType("System.Net.Mail.AttachmentBase", "AttachmentBase");
            feature.AddKnownType("System.Net.Mail.AttachmentCollection", "AttachmentCollection");
            feature.AddKnownType("System.Net.Mail.DeliveryNotificationOptions", "DeliveryNotificationOptions");
            feature.AddKnownType("System.Net.Mail.LinkedResource", "LinkedResource");
            feature.AddKnownType("System.Net.Mail.LinkedResourceCollection", "LinkedResourceCollection");
            feature.AddKnownType("System.Net.Mail.MailAddress", "MailAddress");
            feature.AddKnownType("System.Net.Mail.MailAddressCollection", "MailAddressCollection");
            feature.AddKnownType("System.Net.Mail.MailMessage", "MailMessage");
            feature.AddKnownType("System.Net.Mail.MailPriority", "MailPriority");
            feature.AddKnownType("System.Net.Mail.SmtpClient", "SmtpClient");
            feature.AddKnownType("System.Net.Mail.SmtpDeliveryFormat", "SmtpDeliveryFormat");
            feature.AddKnownType("System.Net.Mail.SmtpDeliveryMethod", "SmtpDeliveryMethod");
            feature.AddKnownType("System.Net.Mail.SmtpException", "SmtpException");
            feature.AddKnownType("System.Net.Mail.SmtpFailedRecipientException", "SmtpFailedRecipientException");
            feature.AddKnownType("System.Net.Mail.SmtpFailedRecipientsException", "SmtpFailedRecipientsException");
            feature.AddKnownType("System.Net.Mail.SmtpStatusCode", "SmtpStatusCode");
            feature.AddKnownType("System.Net.Mime.ContentDisposition", "ContentDisposition");
            feature.AddKnownType("System.Net.Mime.ContentType", "ContentType");
            feature.AddKnownType("System.Net.Mime.TransferEncoding", "TransferEncoding");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.NameResolution", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.IPHostEntry", "IPHostEntry");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.NetworkInformation", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.NetworkInformation.DuplicateAddressDetectionState", "DuplicateAddressDetectionState");
            feature.AddKnownType("System.Net.NetworkInformation.GatewayIPAddressInformation", "GatewayIPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.GatewayIPAddressInformationCollection", "GatewayIPAddressInformationCollection");
            feature.AddKnownType("System.Net.NetworkInformation.IcmpV4Statistics", "IcmpV4Statistics");
            feature.AddKnownType("System.Net.NetworkInformation.IcmpV6Statistics", "IcmpV6Statistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPAddressInformation", "IPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.IPAddressInformationCollection", "IPAddressInformationCollection");
            feature.AddKnownType("System.Net.NetworkInformation.IPGlobalProperties", "IPGlobalProperties");
            feature.AddKnownType("System.Net.NetworkInformation.IPGlobalStatistics", "IPGlobalStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPInterfaceProperties", "IPInterfaceProperties");
            feature.AddKnownType("System.Net.NetworkInformation.IPInterfaceStatistics", "IPInterfaceStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPv4InterfaceProperties", "IPv4InterfaceProperties");
            feature.AddKnownType("System.Net.NetworkInformation.IPv4InterfaceStatistics", "IPv4InterfaceStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPv6InterfaceProperties", "IPv6InterfaceProperties");
            feature.AddKnownType("System.Net.NetworkInformation.MulticastIPAddressInformation", "MulticastIPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.MulticastIPAddressInformationCollection", "MulticastIPAddressInformationCollection");
            feature.AddKnownType("System.Net.NetworkInformation.NetBiosNodeType", "NetBiosNodeType");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkAvailabilityEventArgs", "NetworkAvailabilityEventArgs");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkChange", "NetworkChange");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInformationException", "NetworkInformationException");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInterface", "NetworkInterface");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInterfaceComponent", "NetworkInterfaceComponent");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInterfaceType", "NetworkInterfaceType");
            feature.AddKnownType("System.Net.NetworkInformation.OperationalStatus", "OperationalStatus");
            feature.AddKnownType("System.Net.NetworkInformation.PhysicalAddress", "PhysicalAddress");
            feature.AddKnownType("System.Net.NetworkInformation.PrefixOrigin", "PrefixOrigin");
            feature.AddKnownType("System.Net.NetworkInformation.ScopeLevel", "ScopeLevel");
            feature.AddKnownType("System.Net.NetworkInformation.SuffixOrigin", "SuffixOrigin");
            feature.AddKnownType("System.Net.NetworkInformation.TcpConnectionInformation", "TcpConnectionInformation");
            feature.AddKnownType("System.Net.NetworkInformation.TcpState", "TcpState");
            feature.AddKnownType("System.Net.NetworkInformation.TcpStatistics", "TcpStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.UdpStatistics", "UdpStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.UnicastIPAddressInformation", "UnicastIPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.UnicastIPAddressInformationCollection", "UnicastIPAddressInformationCollection");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Ping", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.NetworkInformation.IPStatus", "IPStatus");
            feature.AddKnownType("System.Net.NetworkInformation.Ping", "Ping");
            feature.AddKnownType("System.Net.NetworkInformation.PingCompletedEventArgs", "PingCompletedEventArgs");
            feature.AddKnownType("System.Net.NetworkInformation.PingException", "PingException");
            feature.AddKnownType("System.Net.NetworkInformation.PingOptions", "PingOptions");
            feature.AddKnownType("System.Net.NetworkInformation.PingReply", "PingReply");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.AuthenticationSchemes", "AuthenticationSchemes");
            feature.AddKnownType("System.Net.Cookie", "Cookie");
            feature.AddKnownType("System.Net.CookieCollection", "CookieCollection");
            feature.AddKnownType("System.Net.CookieContainer", "CookieContainer");
            feature.AddKnownType("System.Net.CookieException", "CookieException");
            feature.AddKnownType("System.Net.CredentialCache", "CredentialCache");
            feature.AddKnownType("System.Net.DecompressionMethods", "DecompressionMethods");
            feature.AddKnownType("System.Net.DnsEndPoint", "DnsEndPoint");
            feature.AddKnownType("System.Net.EndPoint", "EndPoint");
            feature.AddKnownType("System.Net.HttpStatusCode", "HttpStatusCode");
            feature.AddKnownType("System.Net.ICredentials", "ICredentials");
            feature.AddKnownType("System.Net.ICredentialsByHost", "ICredentialsByHost");
            feature.AddKnownType("System.Net.IPAddress", "IPAddress");
            feature.AddKnownType("System.Net.IPEndPoint", "IPEndPoint");
            feature.AddKnownType("System.Net.IWebProxy", "IWebProxy");
            feature.AddKnownType("System.Net.NetworkCredential", "NetworkCredential");
            feature.AddKnownType("System.Net.SocketAddress", "SocketAddress");
            feature.AddKnownType("System.Net.TransportContext", "TransportContext");
            feature.AddKnownType("System.Net.Cache.RequestCacheLevel", "RequestCacheLevel");
            feature.AddKnownType("System.Net.Cache.RequestCachePolicy", "RequestCachePolicy");
            feature.AddKnownType("System.Net.NetworkInformation.IPAddressCollection", "IPAddressCollection");
            feature.AddKnownType("System.Net.Security.AuthenticationLevel", "AuthenticationLevel");
            feature.AddKnownType("System.Net.Security.SslPolicyErrors", "SslPolicyErrors");
            feature.AddKnownType("System.Net.Sockets.AddressFamily", "AddressFamily");
            feature.AddKnownType("System.Net.Sockets.SocketError", "SocketError");
            feature.AddKnownType("System.Net.Sockets.SocketException", "SocketException");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Authentication.CipherAlgorithmType", "CipherAlgorithmType");
            feature.AddKnownType("System.Security.Authentication.ExchangeAlgorithmType", "ExchangeAlgorithmType");
            feature.AddKnownType("System.Security.Authentication.HashAlgorithmType", "HashAlgorithmType");
            feature.AddKnownType("System.Security.Authentication.SslProtocols", "SslProtocols");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ChannelBinding", "ChannelBinding");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ChannelBindingKind", "ChannelBindingKind");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Requests", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.AuthenticationManager", "AuthenticationManager");
            feature.AddKnownType("System.Net.Authorization", "Authorization");
            feature.AddKnownType("System.Net.FileWebRequest", "FileWebRequest");
            feature.AddKnownType("System.Net.FileWebResponse", "FileWebResponse");
            feature.AddKnownType("System.Net.FtpStatusCode", "FtpStatusCode");
            feature.AddKnownType("System.Net.FtpWebRequest", "FtpWebRequest");
            feature.AddKnownType("System.Net.FtpWebResponse", "FtpWebResponse");
            feature.AddKnownType("System.Net.GlobalProxySelection", "GlobalProxySelection");
            feature.AddKnownType("System.Net.HttpWebRequest", "HttpWebRequest");
            feature.AddKnownType("System.Net.HttpWebResponse", "HttpWebResponse");
            feature.AddKnownType("System.Net.IAuthenticationModule", "IAuthenticationModule");
            feature.AddKnownType("System.Net.ICredentialPolicy", "ICredentialPolicy");
            feature.AddKnownType("System.Net.IWebRequestCreate", "IWebRequestCreate");
            feature.AddKnownType("System.Net.ProtocolViolationException", "ProtocolViolationException");
            feature.AddKnownType("System.Net.WebException", "WebException");
            feature.AddKnownType("System.Net.WebExceptionStatus", "WebExceptionStatus");
            feature.AddKnownType("System.Net.WebRequest", "WebRequest");
            feature.AddKnownType("System.Net.WebResponse", "WebResponse");
            feature.AddKnownType("System.Net.Cache.HttpCacheAgeControl", "HttpCacheAgeControl");
            feature.AddKnownType("System.Net.Cache.HttpRequestCacheLevel", "HttpRequestCacheLevel");
            feature.AddKnownType("System.Net.Cache.HttpRequestCachePolicy", "HttpRequestCachePolicy");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Security", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Security.AuthenticatedStream", "AuthenticatedStream");
            feature.AddKnownType("System.Net.Security.CipherSuitesPolicy", "CipherSuitesPolicy");
            feature.AddKnownType("System.Net.Security.EncryptionPolicy", "EncryptionPolicy");
            feature.AddKnownType("System.Net.Security.NegotiateStream", "NegotiateStream");
            feature.AddKnownType("System.Net.Security.ProtectionLevel", "ProtectionLevel");
            feature.AddKnownType("System.Net.Security.SslClientHelloInfo", "SslClientHelloInfo");
            feature.AddKnownType("System.Net.Security.SslApplicationProtocol", "SslApplicationProtocol");
            feature.AddKnownType("System.Net.Security.SslStreamCertificateContext", "SslStreamCertificateContext");
            feature.AddKnownType("System.Net.Security.SslClientAuthenticationOptions", "SslClientAuthenticationOptions");
            feature.AddKnownType("System.Net.Security.SslServerAuthenticationOptions", "SslServerAuthenticationOptions");
            feature.AddKnownType("System.Net.Security.SslStream", "SslStream");
            feature.AddKnownType("System.Net.Security.TlsCipherSuite", "TlsCipherSuite");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Authentication.AuthenticationException", "AuthenticationException");
            feature.AddKnownType("System.Security.Authentication.InvalidCredentialException", "InvalidCredentialException");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy", "ExtendedProtectionPolicy");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.PolicyEnforcement", "PolicyEnforcement");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ProtectionScenario", "ProtectionScenario");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ServiceNameCollection", "ServiceNameCollection");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.ServicePoint", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.SecurityProtocolType", "SecurityProtocolType");
            feature.AddKnownType("System.Net.ServicePoint", "ServicePoint");
            feature.AddKnownType("System.Net.ServicePointManager", "ServicePointManager");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Sockets", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Sockets.IOControlCode", "IOControlCode");
            feature.AddKnownType("System.Net.Sockets.IPPacketInformation", "IPPacketInformation");
            feature.AddKnownType("System.Net.Sockets.IPProtectionLevel", "IPProtectionLevel");
            feature.AddKnownType("System.Net.Sockets.IPv6MulticastOption", "IPv6MulticastOption");
            feature.AddKnownType("System.Net.Sockets.LingerOption", "LingerOption");
            feature.AddKnownType("System.Net.Sockets.MulticastOption", "MulticastOption");
            feature.AddKnownType("System.Net.Sockets.NetworkStream", "NetworkStream");
            feature.AddKnownType("System.Net.Sockets.ProtocolFamily", "ProtocolFamily");
            feature.AddKnownType("System.Net.Sockets.ProtocolType", "ProtocolType");
            feature.AddKnownType("System.Net.Sockets.SafeSocketHandle", "SafeSocketHandle");
            feature.AddKnownType("System.Net.Sockets.SelectMode", "SelectMode");
            feature.AddKnownType("System.Net.Sockets.SendPacketsElement", "SendPacketsElement");
            feature.AddKnownType("System.Net.Sockets.Socket", "Socket");
            feature.AddKnownType("System.Net.Sockets.SocketAsyncEventArgs", "SocketAsyncEventArgs");
            feature.AddKnownType("System.Net.Sockets.SocketAsyncOperation", "SocketAsyncOperation");
            feature.AddKnownType("System.Net.Sockets.SocketFlags", "SocketFlags");
            feature.AddKnownType("System.Net.Sockets.SocketInformation", "SocketInformation");
            feature.AddKnownType("System.Net.Sockets.SocketInformationOptions", "SocketInformationOptions");
            feature.AddKnownType("System.Net.Sockets.SocketOptionLevel", "SocketOptionLevel");
            feature.AddKnownType("System.Net.Sockets.SocketOptionName", "SocketOptionName");
            feature.AddKnownType("System.Net.Sockets.SocketReceiveFromResult", "SocketReceiveFromResult");
            feature.AddKnownType("System.Net.Sockets.SocketReceiveMessageFromResult", "SocketReceiveMessageFromResult");
            feature.AddKnownType("System.Net.Sockets.SocketShutdown", "SocketShutdown");
            feature.AddKnownType("System.Net.Sockets.SocketType", "SocketType");
            feature.AddKnownType("System.Net.Sockets.TcpClient", "TcpClient");
            feature.AddKnownType("System.Net.Sockets.TcpListener", "TcpListener");
            feature.AddKnownType("System.Net.Sockets.TransmitFileOptions", "TransmitFileOptions");
            feature.AddKnownType("System.Net.Sockets.UdpClient", "UdpClient");
            feature.AddKnownType("System.Net.Sockets.UdpReceiveResult", "UdpReceiveResult");
            feature.AddKnownType("System.Net.Sockets.UnixDomainSocketEndPoint", "UnixDomainSocketEndPoint");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebClient", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.DownloadDataCompletedEventArgs", "DownloadDataCompletedEventArgs");
            feature.AddKnownType("System.Net.DownloadProgressChangedEventArgs", "DownloadProgressChangedEventArgs");
            feature.AddKnownType("System.Net.DownloadStringCompletedEventArgs", "DownloadStringCompletedEventArgs");
            feature.AddKnownType("System.Net.OpenReadCompletedEventArgs", "OpenReadCompletedEventArgs");
            feature.AddKnownType("System.Net.OpenWriteCompletedEventArgs", "OpenWriteCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadDataCompletedEventArgs", "UploadDataCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadFileCompletedEventArgs", "UploadFileCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadProgressChangedEventArgs", "UploadProgressChangedEventArgs");
            feature.AddKnownType("System.Net.UploadStringCompletedEventArgs", "UploadStringCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadValuesCompletedEventArgs", "UploadValuesCompletedEventArgs");
            feature.AddKnownType("System.Net.WebClient", "WebClient");
            feature.AddKnownType("System.Net.WriteStreamClosedEventArgs", "WriteStreamClosedEventArgs");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebHeaderCollection", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.HttpRequestHeader", "HttpRequestHeader");
            feature.AddKnownType("System.Net.HttpResponseHeader", "HttpResponseHeader");
            feature.AddKnownType("System.Net.WebHeaderCollection", "WebHeaderCollection");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebProxy", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.IWebProxyScript", "IWebProxyScript");
            feature.AddKnownType("System.Net.WebProxy", "WebProxy");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebSockets.Client", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.WebSockets.ClientWebSocket", "ClientWebSocket");
            feature.AddKnownType("System.Net.WebSockets.ClientWebSocketOptions", "ClientWebSocketOptions");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebSockets", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.WebSockets.ValueWebSocketReceiveResult", "ValueWebSocketReceiveResult");
            feature.AddKnownType("System.Net.WebSockets.WebSocket", "WebSocket");
            feature.AddKnownType("System.Net.WebSockets.WebSocketCloseStatus", "WebSocketCloseStatus");
            feature.AddKnownType("System.Net.WebSockets.WebSocketContext", "WebSocketContext");
            feature.AddKnownType("System.Net.WebSockets.WebSocketError", "WebSocketError");
            feature.AddKnownType("System.Net.WebSockets.WebSocketException", "WebSocketException");
            feature.AddKnownType("System.Net.WebSockets.WebSocketMessageType", "WebSocketMessageType");
            feature.AddKnownType("System.Net.WebSockets.WebSocketReceiveResult", "WebSocketReceiveResult");
            feature.AddKnownType("System.Net.WebSockets.WebSocketState", "WebSocketState");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Numerics.Vectors", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Numerics.Matrix3x2", "Matrix3x2");
            feature.AddKnownType("System.Numerics.Matrix4x4", "Matrix4x4");
            feature.AddKnownType("System.Numerics.Plane", "Plane");
            feature.AddKnownType("System.Numerics.Quaternion", "Quaternion");
            feature.AddKnownType("System.Numerics.Vector`1", "Vector`1'1");
            feature.AddKnownType("System.Numerics.Vector2", "Vector2");
            feature.AddKnownType("System.Numerics.Vector3", "Vector3");
            feature.AddKnownType("System.Numerics.Vector4", "Vector4");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ObjectModel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.ObjectModel.KeyedCollection`2", "KeyedCollection`2'2");
            feature.AddKnownType("System.Collections.ObjectModel.ObservableCollection`1", "ObservableCollection`1'1");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyDictionary`2", "ReadOnlyDictionary`2'2");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection", "ReadOnlyDictionary`2'2.KeyCollection'2");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection", "ReadOnlyDictionary`2'2.ValueCollection'2");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyObservableCollection`1", "ReadOnlyObservableCollection`1'1");
            feature.AddKnownType("System.Collections.Specialized.INotifyCollectionChanged", "INotifyCollectionChanged");
            feature.AddKnownType("System.Collections.Specialized.NotifyCollectionChangedAction", "NotifyCollectionChangedAction");
            feature.AddKnownType("System.Collections.Specialized.NotifyCollectionChangedEventArgs", "NotifyCollectionChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.DataErrorsChangedEventArgs", "DataErrorsChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.INotifyDataErrorInfo", "INotifyDataErrorInfo");
            feature.AddKnownType("System.ComponentModel.INotifyPropertyChanged", "INotifyPropertyChanged");
            feature.AddKnownType("System.ComponentModel.INotifyPropertyChanging", "INotifyPropertyChanging");
            feature.AddKnownType("System.ComponentModel.PropertyChangedEventArgs", "PropertyChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.PropertyChangingEventArgs", "PropertyChangingEventArgs");
            feature.AddKnownType("System.ComponentModel.TypeConverterAttribute", "TypeConverterAttribute");
            feature.AddKnownType("System.ComponentModel.TypeDescriptionProviderAttribute", "TypeDescriptionProviderAttribute");
            feature.AddKnownType("System.Reflection.ICustomTypeProvider", "ICustomTypeProvider");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Windows.Input.ICommand", "ICommand");
            feature.AddKnownType("System.Windows.Markup.ValueSerializerAttribute", "ValueSerializerAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.DispatchProxy", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.DispatchProxy", "DispatchProxy");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Emit", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.AssemblyBuilder", "AssemblyBuilder");
            feature.AddKnownType("System.Reflection.Emit.AssemblyBuilderAccess", "AssemblyBuilderAccess");
            feature.AddKnownType("System.Reflection.Emit.ConstructorBuilder", "ConstructorBuilder");
            feature.AddKnownType("System.Reflection.Emit.EnumBuilder", "EnumBuilder");
            feature.AddKnownType("System.Reflection.Emit.EventBuilder", "EventBuilder");
            feature.AddKnownType("System.Reflection.Emit.FieldBuilder", "FieldBuilder");
            feature.AddKnownType("System.Reflection.Emit.GenericTypeParameterBuilder", "GenericTypeParameterBuilder");
            feature.AddKnownType("System.Reflection.Emit.MethodBuilder", "MethodBuilder");
            feature.AddKnownType("System.Reflection.Emit.ModuleBuilder", "ModuleBuilder");
            feature.AddKnownType("System.Reflection.Emit.PropertyBuilder", "PropertyBuilder");
            feature.AddKnownType("System.Reflection.Emit.TypeBuilder", "TypeBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Emit.ILGeneration", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.CustomAttributeBuilder", "CustomAttributeBuilder");
            feature.AddKnownType("System.Reflection.Emit.ILGenerator", "ILGenerator");
            feature.AddKnownType("System.Reflection.Emit.Label", "Label");
            feature.AddKnownType("System.Reflection.Emit.LocalBuilder", "LocalBuilder");
            feature.AddKnownType("System.Reflection.Emit.ParameterBuilder", "ParameterBuilder");
            feature.AddKnownType("System.Reflection.Emit.SignatureHelper", "SignatureHelper");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Emit.Lightweight", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.DynamicILInfo", "DynamicILInfo");
            feature.AddKnownType("System.Reflection.Emit.DynamicMethod", "DynamicMethod");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Metadata", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.AssemblyFlags", "AssemblyFlags");
            feature.AddKnownType("System.Reflection.AssemblyHashAlgorithm", "AssemblyHashAlgorithm");
            feature.AddKnownType("System.Reflection.DeclarativeSecurityAction", "DeclarativeSecurityAction");
            feature.AddKnownType("System.Reflection.ManifestResourceAttributes", "ManifestResourceAttributes");
            feature.AddKnownType("System.Reflection.MethodImportAttributes", "MethodImportAttributes");
            feature.AddKnownType("System.Reflection.MethodSemanticsAttributes", "MethodSemanticsAttributes");
            feature.AddKnownType("System.Reflection.Metadata.ArrayShape", "ArrayShape");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyDefinition", "AssemblyDefinition");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyDefinitionHandle", "AssemblyDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFile", "AssemblyFile");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFileHandle", "AssemblyFileHandle");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFileHandleCollection", "AssemblyFileHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFileHandleCollection+Enumerator", "AssemblyFileHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReference", "AssemblyReference");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReferenceHandle", "AssemblyReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReferenceHandleCollection", "AssemblyReferenceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReferenceHandleCollection+Enumerator", "AssemblyReferenceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.Blob", "Blob");
            feature.AddKnownType("System.Reflection.Metadata.BlobBuilder", "BlobBuilder");
            feature.AddKnownType("System.Reflection.Metadata.BlobBuilder+Blobs", "BlobBuilder.Blobs");
            feature.AddKnownType("System.Reflection.Metadata.BlobContentId", "BlobContentId");
            feature.AddKnownType("System.Reflection.Metadata.BlobHandle", "BlobHandle");
            feature.AddKnownType("System.Reflection.Metadata.BlobReader", "BlobReader");
            feature.AddKnownType("System.Reflection.Metadata.BlobWriter", "BlobWriter");
            feature.AddKnownType("System.Reflection.Metadata.Constant", "Constant");
            feature.AddKnownType("System.Reflection.Metadata.ConstantHandle", "ConstantHandle");
            feature.AddKnownType("System.Reflection.Metadata.ConstantTypeCode", "ConstantTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttribute", "CustomAttribute");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeHandle", "CustomAttributeHandle");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeHandleCollection", "CustomAttributeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeHandleCollection+Enumerator", "CustomAttributeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeNamedArgumentKind", "CustomAttributeNamedArgumentKind");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeNamedArgument`1", "CustomAttributeNamedArgument`1'1");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeTypedArgument`1", "CustomAttributeTypedArgument`1'1");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeValue`1", "CustomAttributeValue`1'1");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformation", "CustomDebugInformation");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformationHandle", "CustomDebugInformationHandle");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformationHandleCollection", "CustomDebugInformationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformationHandleCollection+Enumerator", "CustomDebugInformationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.DebugMetadataHeader", "DebugMetadataHeader");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttribute", "DeclarativeSecurityAttribute");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttributeHandle", "DeclarativeSecurityAttributeHandle");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection", "DeclarativeSecurityAttributeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection+Enumerator", "DeclarativeSecurityAttributeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.Document", "Document");
            feature.AddKnownType("System.Reflection.Metadata.DocumentHandle", "DocumentHandle");
            feature.AddKnownType("System.Reflection.Metadata.DocumentHandleCollection", "DocumentHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.DocumentHandleCollection+Enumerator", "DocumentHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.DocumentNameBlobHandle", "DocumentNameBlobHandle");
            feature.AddKnownType("System.Reflection.Metadata.EntityHandle", "EntityHandle");
            feature.AddKnownType("System.Reflection.Metadata.EventAccessors", "EventAccessors");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinition", "EventDefinition");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinitionHandle", "EventDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinitionHandleCollection", "EventDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinitionHandleCollection+Enumerator", "EventDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ExceptionRegion", "ExceptionRegion");
            feature.AddKnownType("System.Reflection.Metadata.ExceptionRegionKind", "ExceptionRegionKind");
            feature.AddKnownType("System.Reflection.Metadata.ExportedType", "ExportedType");
            feature.AddKnownType("System.Reflection.Metadata.ExportedTypeHandle", "ExportedTypeHandle");
            feature.AddKnownType("System.Reflection.Metadata.ExportedTypeHandleCollection", "ExportedTypeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.ExportedTypeHandleCollection+Enumerator", "ExportedTypeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinition", "FieldDefinition");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinitionHandle", "FieldDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinitionHandleCollection", "FieldDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinitionHandleCollection+Enumerator", "FieldDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameter", "GenericParameter");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraint", "GenericParameterConstraint");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraintHandle", "GenericParameterConstraintHandle");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraintHandleCollection", "GenericParameterConstraintHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraintHandleCollection+Enumerator", "GenericParameterConstraintHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterHandle", "GenericParameterHandle");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterHandleCollection", "GenericParameterHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterHandleCollection+Enumerator", "GenericParameterHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.GuidHandle", "GuidHandle");
            feature.AddKnownType("System.Reflection.Metadata.Handle", "Handle");
            feature.AddKnownType("System.Reflection.Metadata.HandleComparer", "HandleComparer");
            feature.AddKnownType("System.Reflection.Metadata.HandleKind", "HandleKind");
            feature.AddKnownType("System.Reflection.Metadata.IConstructedTypeProvider`1", "IConstructedTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.ICustomAttributeTypeProvider`1", "ICustomAttributeTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.ILOpCode", "ILOpCode");
            feature.AddKnownType("System.Reflection.Metadata.ImageFormatLimitationException", "ImageFormatLimitationException");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinition", "ImportDefinition");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinitionCollection", "ImportDefinitionCollection");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinitionCollection+Enumerator", "ImportDefinitionCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinitionKind", "ImportDefinitionKind");
            feature.AddKnownType("System.Reflection.Metadata.ImportScope", "ImportScope");
            feature.AddKnownType("System.Reflection.Metadata.ImportScopeCollection", "ImportScopeCollection");
            feature.AddKnownType("System.Reflection.Metadata.ImportScopeCollection+Enumerator", "ImportScopeCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ImportScopeHandle", "ImportScopeHandle");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementation", "InterfaceImplementation");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementationHandle", "InterfaceImplementationHandle");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementationHandleCollection", "InterfaceImplementationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementationHandleCollection+Enumerator", "InterfaceImplementationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ISignatureTypeProvider`2", "ISignatureTypeProvider`2'2");
            feature.AddKnownType("System.Reflection.Metadata.ISimpleTypeProvider`1", "ISimpleTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.ISZArrayTypeProvider`1", "ISZArrayTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstant", "LocalConstant");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstantHandle", "LocalConstantHandle");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstantHandleCollection", "LocalConstantHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstantHandleCollection+Enumerator", "LocalConstantHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.LocalScope", "LocalScope");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandle", "LocalScopeHandle");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandleCollection", "LocalScopeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandleCollection+ChildrenEnumerator", "LocalScopeHandleCollection.ChildrenEnumerator");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandleCollection+Enumerator", "LocalScopeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariable", "LocalVariable");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableAttributes", "LocalVariableAttributes");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableHandle", "LocalVariableHandle");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableHandleCollection", "LocalVariableHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableHandleCollection+Enumerator", "LocalVariableHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResource", "ManifestResource");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResourceHandle", "ManifestResourceHandle");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResourceHandleCollection", "ManifestResourceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResourceHandleCollection+Enumerator", "ManifestResourceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MemberReference", "MemberReference");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceHandle", "MemberReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceHandleCollection", "MemberReferenceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceHandleCollection+Enumerator", "MemberReferenceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceKind", "MemberReferenceKind");
            feature.AddKnownType("System.Reflection.Metadata.MetadataKind", "MetadataKind");
            feature.AddKnownType("System.Reflection.Metadata.MetadataReader", "MetadataReader");
            feature.AddKnownType("System.Reflection.Metadata.MetadataReaderOptions", "MetadataReaderOptions");
            feature.AddKnownType("System.Reflection.Metadata.MetadataReaderProvider", "MetadataReaderProvider");
            feature.AddKnownType("System.Reflection.Metadata.MetadataStreamOptions", "MetadataStreamOptions");
            feature.AddKnownType("System.Reflection.Metadata.MetadataStringComparer", "MetadataStringComparer");
            feature.AddKnownType("System.Reflection.Metadata.MetadataStringDecoder", "MetadataStringDecoder");
            feature.AddKnownType("System.Reflection.Metadata.MethodBodyBlock", "MethodBodyBlock");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformation", "MethodDebugInformation");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformationHandle", "MethodDebugInformationHandle");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformationHandleCollection", "MethodDebugInformationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformationHandleCollection+Enumerator", "MethodDebugInformationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinition", "MethodDefinition");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinitionHandle", "MethodDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinitionHandleCollection", "MethodDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinitionHandleCollection+Enumerator", "MethodDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementation", "MethodImplementation");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementationHandle", "MethodImplementationHandle");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementationHandleCollection", "MethodImplementationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementationHandleCollection+Enumerator", "MethodImplementationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MethodImport", "MethodImport");
            feature.AddKnownType("System.Reflection.Metadata.MethodSignature`1", "MethodSignature`1'1");
            feature.AddKnownType("System.Reflection.Metadata.MethodSpecification", "MethodSpecification");
            feature.AddKnownType("System.Reflection.Metadata.MethodSpecificationHandle", "MethodSpecificationHandle");
            feature.AddKnownType("System.Reflection.Metadata.ModuleDefinition", "ModuleDefinition");
            feature.AddKnownType("System.Reflection.Metadata.ModuleDefinitionHandle", "ModuleDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.ModuleReference", "ModuleReference");
            feature.AddKnownType("System.Reflection.Metadata.ModuleReferenceHandle", "ModuleReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.NamespaceDefinition", "NamespaceDefinition");
            feature.AddKnownType("System.Reflection.Metadata.NamespaceDefinitionHandle", "NamespaceDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.Parameter", "Parameter");
            feature.AddKnownType("System.Reflection.Metadata.ParameterHandle", "ParameterHandle");
            feature.AddKnownType("System.Reflection.Metadata.ParameterHandleCollection", "ParameterHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.ParameterHandleCollection+Enumerator", "ParameterHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.PrimitiveSerializationTypeCode", "PrimitiveSerializationTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.PrimitiveTypeCode", "PrimitiveTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.PropertyAccessors", "PropertyAccessors");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinition", "PropertyDefinition");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinitionHandle", "PropertyDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinitionHandleCollection", "PropertyDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinitionHandleCollection+Enumerator", "PropertyDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ReservedBlob`1", "ReservedBlob`1'1");
            feature.AddKnownType("System.Reflection.Metadata.SequencePoint", "SequencePoint");
            feature.AddKnownType("System.Reflection.Metadata.SequencePointCollection", "SequencePointCollection");
            feature.AddKnownType("System.Reflection.Metadata.SequencePointCollection+Enumerator", "SequencePointCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.SerializationTypeCode", "SerializationTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.SignatureAttributes", "SignatureAttributes");
            feature.AddKnownType("System.Reflection.Metadata.SignatureCallingConvention", "SignatureCallingConvention");
            feature.AddKnownType("System.Reflection.Metadata.SignatureHeader", "SignatureHeader");
            feature.AddKnownType("System.Reflection.Metadata.SignatureKind", "SignatureKind");
            feature.AddKnownType("System.Reflection.Metadata.SignatureTypeCode", "SignatureTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.SignatureTypeKind", "SignatureTypeKind");
            feature.AddKnownType("System.Reflection.Metadata.StandaloneSignature", "StandaloneSignature");
            feature.AddKnownType("System.Reflection.Metadata.StandaloneSignatureHandle", "StandaloneSignatureHandle");
            feature.AddKnownType("System.Reflection.Metadata.StandaloneSignatureKind", "StandaloneSignatureKind");
            feature.AddKnownType("System.Reflection.Metadata.StringHandle", "StringHandle");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinition", "TypeDefinition");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinitionHandle", "TypeDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinitionHandleCollection", "TypeDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinitionHandleCollection+Enumerator", "TypeDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.TypeLayout", "TypeLayout");
            feature.AddKnownType("System.Reflection.Metadata.TypeReference", "TypeReference");
            feature.AddKnownType("System.Reflection.Metadata.TypeReferenceHandle", "TypeReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.TypeReferenceHandleCollection", "TypeReferenceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.TypeReferenceHandleCollection+Enumerator", "TypeReferenceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.TypeSpecification", "TypeSpecification");
            feature.AddKnownType("System.Reflection.Metadata.TypeSpecificationHandle", "TypeSpecificationHandle");
            feature.AddKnownType("System.Reflection.Metadata.UserStringHandle", "UserStringHandle");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ArrayShapeEncoder", "ArrayShapeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.BlobEncoder", "BlobEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ControlFlowBuilder", "ControlFlowBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder", "CustomAttributeArrayTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder", "CustomAttributeElementTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder", "CustomAttributeNamedArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomModifiersEncoder", "CustomModifiersEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry", "EditAndContinueLogEntry");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.EditAndContinueOperation", "EditAndContinueOperation");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder", "ExceptionRegionEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder", "FixedArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.FunctionPointerAttributes", "FunctionPointerAttributes");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder", "GenericTypeArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.HeapIndex", "HeapIndex");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.InstructionEncoder", "InstructionEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LabelHandle", "LabelHandle");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LiteralEncoder", "LiteralEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LiteralsEncoder", "LiteralsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LocalVariablesEncoder", "LocalVariablesEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder", "LocalVariableTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataAggregator", "MetadataAggregator");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataBuilder", "MetadataBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataRootBuilder", "MetadataRootBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataSizes", "MetadataSizes");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodBodyAttributes", "MethodBodyAttributes");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder", "MethodBodyStreamEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder+MethodBody", "MethodBodyStreamEncoder.MethodBody");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodSignatureEncoder", "MethodSignatureEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder", "NamedArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder", "NamedArgumentTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.NameEncoder", "NameEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ParametersEncoder", "ParametersEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ParameterTypeEncoder", "ParameterTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.PermissionSetEncoder", "PermissionSetEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.PortablePdbBuilder", "PortablePdbBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ReturnTypeEncoder", "ReturnTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ScalarEncoder", "ScalarEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.SignatureDecoder`2", "SignatureDecoder`2'2");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.SignatureTypeEncoder", "SignatureTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.TableIndex", "TableIndex");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.VectorEncoder", "VectorEncoder");
            feature.AddKnownType("System.Reflection.PortableExecutable.Characteristics", "Characteristics");
            feature.AddKnownType("System.Reflection.PortableExecutable.CodeViewDebugDirectoryData", "CodeViewDebugDirectoryData");
            feature.AddKnownType("System.Reflection.PortableExecutable.CoffHeader", "CoffHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.CorFlags", "CorFlags");
            feature.AddKnownType("System.Reflection.PortableExecutable.CorHeader", "CorHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.DebugDirectoryBuilder", "DebugDirectoryBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.DebugDirectoryEntry", "DebugDirectoryEntry");
            feature.AddKnownType("System.Reflection.PortableExecutable.DebugDirectoryEntryType", "DebugDirectoryEntryType");
            feature.AddKnownType("System.Reflection.PortableExecutable.DirectoryEntry", "DirectoryEntry");
            feature.AddKnownType("System.Reflection.PortableExecutable.DllCharacteristics", "DllCharacteristics");
            feature.AddKnownType("System.Reflection.PortableExecutable.Machine", "Machine");
            feature.AddKnownType("System.Reflection.PortableExecutable.ManagedPEBuilder", "ManagedPEBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData", "PdbChecksumDebugDirectoryData");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEBuilder", "PEBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEBuilder+Section", "Section");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEDirectoriesBuilder", "PEDirectoriesBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEHeader", "PEHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEHeaderBuilder", "PEHeaderBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEHeaders", "PEHeaders");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEMagic", "PEMagic");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEMemoryBlock", "PEMemoryBlock");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEReader", "PEReader");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEStreamOptions", "PEStreamOptions");
            feature.AddKnownType("System.Reflection.PortableExecutable.ResourceSectionBuilder", "ResourceSectionBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.SectionCharacteristics", "SectionCharacteristics");
            feature.AddKnownType("System.Reflection.PortableExecutable.SectionHeader", "SectionHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.SectionLocation", "SectionLocation");
            feature.AddKnownType("System.Reflection.PortableExecutable.Subsystem", "Subsystem");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.FlowControl", "FlowControl");
            feature.AddKnownType("System.Reflection.Emit.OpCode", "OpCode");
            feature.AddKnownType("System.Reflection.Emit.OpCodes", "OpCodes");
            feature.AddKnownType("System.Reflection.Emit.OpCodeType", "OpCodeType");
            feature.AddKnownType("System.Reflection.Emit.OperandType", "OperandType");
            feature.AddKnownType("System.Reflection.Emit.PackingSize", "PackingSize");
            feature.AddKnownType("System.Reflection.Emit.StackBehaviour", "StackBehaviour");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.TypeExtensions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Resources.Writer", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Resources.IResourceWriter", "IResourceWriter");
            feature.AddKnownType("System.Resources.ResourceWriter", "ResourceWriter");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.CompilerServices.Unsafe", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.CompilerServices.VisualC", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CppInlineNamespaceAttribute", "CppInlineNamespaceAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.HasCopySemanticsAttribute", "HasCopySemanticsAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NativeCppClassAttribute", "NativeCppClassAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.RequiredAttributeAttribute", "RequiredAttributeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ScopelessEnumAttribute", "ScopelessEnumAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHere", "AssemblyAttributesGoHere");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHereS", "AssemblyAttributesGoHereS");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHereM", "AssemblyAttributesGoHereM");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHereSM", "AssemblyAttributesGoHereSM");
            feature.AddKnownType("System.Runtime.CompilerServices.DecoratedNameAttribute", "DecoratedNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.SuppressMergeCheckAttribute", "SuppressMergeCheckAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeFileHandle,System.Runtime", "Microsoft.Win32.SafeHandles.SafeFileHandle");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Runtime", "Microsoft.Win32.SafeHandles.SafeWaitHandle");
            feature.AddKnownType("System.AccessViolationException", "AccessViolationException");
            feature.AddKnownType("System.AggregateException", "AggregateException");
            feature.AddKnownType("System.AppDomain", "AppDomain");
            feature.AddKnownType("System.AppDomainSetup", "AppDomainSetup");
            feature.AddKnownType("System.AppDomainUnloadedException", "AppDomainUnloadedException");
            feature.AddKnownType("System.ApplicationException", "ApplicationException");
            feature.AddKnownType("System.ApplicationId", "ApplicationId");
            feature.AddKnownType("System.ArgumentException", "ArgumentException");
            feature.AddKnownType("System.ArgumentNullException", "ArgumentNullException");
            feature.AddKnownType("System.ArgumentOutOfRangeException", "ArgumentOutOfRangeException");
            feature.AddKnownType("System.ArithmeticException", "ArithmeticException");
            feature.AddKnownType("System.ArraySegment`1", "ArraySegment`1'1");
            feature.AddKnownType("System.ArraySegment`1+Enumerator", "ArraySegment`1'1.Enumerator'1");
            feature.AddKnownType("System.ArrayTypeMismatchException", "ArrayTypeMismatchException");
            feature.AddKnownType("System.AssemblyLoadEventArgs", "AssemblyLoadEventArgs");
            feature.AddKnownType("System.Attribute", "Attribute");
            feature.AddKnownType("System.AttributeTargets", "AttributeTargets");
            feature.AddKnownType("System.AttributeUsageAttribute", "AttributeUsageAttribute");
            feature.AddKnownType("System.BadImageFormatException", "BadImageFormatException");
            feature.AddKnownType("System.Base64FormattingOptions", "Base64FormattingOptions");
            feature.AddKnownType("System.CannotUnloadAppDomainException", "CannotUnloadAppDomainException");
            feature.AddKnownType("System.CharEnumerator", "CharEnumerator");
            feature.AddKnownType("System.CLSCompliantAttribute", "CLSCompliantAttribute");
            feature.AddKnownType("System.ContextBoundObject", "ContextBoundObject");
            feature.AddKnownType("System.ContextMarshalException", "ContextMarshalException");
            feature.AddKnownType("System.ContextStaticAttribute", "ContextStaticAttribute");
            feature.AddKnownType("System.DateTimeKind", "DateTimeKind");
            feature.AddKnownType("System.DateTimeOffset", "DateTimeOffset");
            feature.AddKnownType("System.DayOfWeek", "DayOfWeek");
            feature.AddKnownType("System.DBNull", "DBNull");
            feature.AddKnownType("System.DivideByZeroException", "DivideByZeroException");
            feature.AddKnownType("System.DuplicateWaitObjectException", "DuplicateWaitObjectException");
            feature.AddKnownType("System.EntryPointNotFoundException", "EntryPointNotFoundException");
            feature.AddKnownType("System.Environment+SpecialFolder", "Environment.SpecialFolder");
            feature.AddKnownType("System.Environment+SpecialFolderOption", "Environment.SpecialFolderOption");
            feature.AddKnownType("System.EnvironmentVariableTarget", "EnvironmentVariableTarget");
            feature.AddKnownType("System.EventArgs", "EventArgs");
            feature.AddKnownType("System.ExecutionEngineException", "ExecutionEngineException");
            feature.AddKnownType("System.FieldAccessException", "FieldAccessException");
            feature.AddKnownType("System.FileStyleUriParser", "FileStyleUriParser");
            feature.AddKnownType("System.FlagsAttribute", "FlagsAttribute");
            feature.AddKnownType("System.FormatException", "FormatException");
            feature.AddKnownType("System.FormattableString", "FormattableString");
            feature.AddKnownType("System.FtpStyleUriParser", "FtpStyleUriParser");
            feature.AddKnownType("System.GCCollectionMode", "GCCollectionMode");
            feature.AddKnownType("System.GCGenerationInfo", "GCGenerationInfo");
            feature.AddKnownType("System.GCKind", "GCKind");
            feature.AddKnownType("System.GCMemoryInfo", "GCMemoryInfo");
            feature.AddKnownType("System.GCNotificationStatus", "GCNotificationStatus");
            feature.AddKnownType("System.GenericUriParser", "GenericUriParser");
            feature.AddKnownType("System.GenericUriParserOptions", "GenericUriParserOptions");
            feature.AddKnownType("System.GopherStyleUriParser", "GopherStyleUriParser");
            feature.AddKnownType("System.Guid", "Guid");
            feature.AddKnownType("System.Half", "Half");
            feature.AddKnownType("System.HashCode", "HashCode");
            feature.AddKnownType("System.HttpStyleUriParser", "HttpStyleUriParser");
            feature.AddKnownType("System.IAsyncDisposable", "IAsyncDisposable");
            feature.AddKnownType("System.ICloneable", "ICloneable");
            feature.AddKnownType("System.IComparable", "IComparable");
            feature.AddKnownType("System.IComparable`1", "IComparable`1'1");
            feature.AddKnownType("System.IConvertible", "IConvertible");
            feature.AddKnownType("System.ICustomFormatter", "ICustomFormatter");
            feature.AddKnownType("System.IEquatable`1", "IEquatable`1'1");
            feature.AddKnownType("System.IFormatProvider", "IFormatProvider");
            feature.AddKnownType("System.IFormattable", "IFormattable");
            feature.AddKnownType("System.Index", "Index");
            feature.AddKnownType("System.IndexOutOfRangeException", "IndexOutOfRangeException");
            feature.AddKnownType("System.InsufficientExecutionStackException", "InsufficientExecutionStackException");
            feature.AddKnownType("System.InsufficientMemoryException", "InsufficientMemoryException");
            feature.AddKnownType("System.InvalidCastException", "InvalidCastException");
            feature.AddKnownType("System.InvalidOperationException", "InvalidOperationException");
            feature.AddKnownType("System.InvalidProgramException", "InvalidProgramException");
            feature.AddKnownType("System.InvalidTimeZoneException", "InvalidTimeZoneException");
            feature.AddKnownType("System.IObservable`1", "IObservable`1'1");
            feature.AddKnownType("System.IObserver`1", "IObserver`1'1");
            feature.AddKnownType("System.IProgress`1", "IProgress`1'1");
            feature.AddKnownType("System.Lazy`1", "Lazy`1'1");
            feature.AddKnownType("System.Lazy`2", "Lazy`2'2");
            feature.AddKnownType("System.LdapStyleUriParser", "LdapStyleUriParser");
            feature.AddKnownType("System.LoaderOptimization", "LoaderOptimization");
            feature.AddKnownType("System.LoaderOptimizationAttribute", "LoaderOptimizationAttribute");
            feature.AddKnownType("System.MarshalByRefObject", "MarshalByRefObject");
            feature.AddKnownType("System.MemberAccessException", "MemberAccessException");
            feature.AddKnownType("System.Memory`1", "Memory`1'1");
            feature.AddKnownType("System.MethodAccessException", "MethodAccessException");
            feature.AddKnownType("System.MidpointRounding", "MidpointRounding");
            feature.AddKnownType("System.MissingFieldException", "MissingFieldException");
            feature.AddKnownType("System.MissingMemberException", "MissingMemberException");
            feature.AddKnownType("System.MissingMethodException", "MissingMethodException");
            feature.AddKnownType("System.ModuleHandle", "ModuleHandle");
            feature.AddKnownType("System.MTAThreadAttribute", "MTAThreadAttribute");
            feature.AddKnownType("System.MulticastNotSupportedException", "MulticastNotSupportedException");
            feature.AddKnownType("System.NetPipeStyleUriParser", "NetPipeStyleUriParser");
            feature.AddKnownType("System.NetTcpStyleUriParser", "NetTcpStyleUriParser");
            feature.AddKnownType("System.NewsStyleUriParser", "NewsStyleUriParser");
            feature.AddKnownType("System.NonSerializedAttribute", "NonSerializedAttribute");
            feature.AddKnownType("System.NotFiniteNumberException", "NotFiniteNumberException");
            feature.AddKnownType("System.NotImplementedException", "NotImplementedException");
            feature.AddKnownType("System.NotSupportedException", "NotSupportedException");
            feature.AddKnownType("System.NullReferenceException", "NullReferenceException");
            feature.AddKnownType("System.ObjectDisposedException", "ObjectDisposedException");
            feature.AddKnownType("System.ObsoleteAttribute", "ObsoleteAttribute");
            feature.AddKnownType("System.OperatingSystem", "OperatingSystem");
            feature.AddKnownType("System.OperationCanceledException", "OperationCanceledException");
            feature.AddKnownType("System.OutOfMemoryException", "OutOfMemoryException");
            feature.AddKnownType("System.OverflowException", "OverflowException");
            feature.AddKnownType("System.ParamArrayAttribute", "ParamArrayAttribute");
            feature.AddKnownType("System.PlatformID", "PlatformID");
            feature.AddKnownType("System.PlatformNotSupportedException", "PlatformNotSupportedException");
            feature.AddKnownType("System.Progress`1", "Progress`1'1");
            feature.AddKnownType("System.Random", "Random");
            feature.AddKnownType("System.Range", "Range");
            feature.AddKnownType("System.RankException", "RankException");
            feature.AddKnownType("System.ReadOnlyMemory`1", "ReadOnlyMemory`1'1");
            feature.AddKnownType("System.ReadOnlySpan`1", "ReadOnlySpan`1'1");
            feature.AddKnownType("System.ReadOnlySpan`1+Enumerator", "ReadOnlySpan`1'1.Enumerator'1");
            feature.AddKnownType("System.ResolveEventArgs", "ResolveEventArgs");
            feature.AddKnownType("System.SerializableAttribute", "SerializableAttribute");
            feature.AddKnownType("System.Span`1", "Span`1'1");
            feature.AddKnownType("System.Span`1+Enumerator", "Span`1'1.Enumerator'1");
            feature.AddKnownType("System.StackOverflowException", "StackOverflowException");
            feature.AddKnownType("System.STAThreadAttribute", "STAThreadAttribute");
            feature.AddKnownType("System.StringComparer", "StringComparer");
            feature.AddKnownType("System.StringComparison", "StringComparison");
            feature.AddKnownType("System.StringSplitOptions", "StringSplitOptions");
            feature.AddKnownType("System.SystemException", "SystemException");
            feature.AddKnownType("System.ThreadStaticAttribute", "ThreadStaticAttribute");
            feature.AddKnownType("System.TimeoutException", "TimeoutException");
            feature.AddKnownType("System.TimeSpan", "TimeSpan");
            feature.AddKnownType("System.TimeZone", "TimeZone");
            feature.AddKnownType("System.TimeZoneInfo", "TimeZoneInfo");
            feature.AddKnownType("System.TimeZoneInfo+AdjustmentRule", "TimeZoneInfo.AdjustmentRule");
            feature.AddKnownType("System.TimeZoneInfo+TransitionTime", "TimeZoneInfo.TransitionTime");
            feature.AddKnownType("System.TimeZoneNotFoundException", "TimeZoneNotFoundException");
            feature.AddKnownType("System.Tuple`1", "Tuple`1'1");
            feature.AddKnownType("System.Tuple`2", "Tuple`2'2");
            feature.AddKnownType("System.Tuple`3", "Tuple`3'3");
            feature.AddKnownType("System.Tuple`4", "Tuple`4'4");
            feature.AddKnownType("System.Tuple`5", "Tuple`5'5");
            feature.AddKnownType("System.Tuple`6", "Tuple`6'6");
            feature.AddKnownType("System.Tuple`7", "Tuple`7'7");
            feature.AddKnownType("System.Tuple`8", "Tuple`8'8");
            feature.AddKnownType("System.Type", "Type");
            feature.AddKnownType("System.TypeAccessException", "TypeAccessException");
            feature.AddKnownType("System.TypeCode", "TypeCode");
            feature.AddKnownType("System.TypeInitializationException", "TypeInitializationException");
            feature.AddKnownType("System.TypeLoadException", "TypeLoadException");
            feature.AddKnownType("System.TypeUnloadedException", "TypeUnloadedException");
            feature.AddKnownType("System.UnauthorizedAccessException", "UnauthorizedAccessException");
            feature.AddKnownType("System.UnhandledExceptionEventArgs", "UnhandledExceptionEventArgs");
            feature.AddKnownType("System.Uri", "Uri");
            feature.AddKnownType("System.UriBuilder", "UriBuilder");
            feature.AddKnownType("System.UriComponents", "UriComponents");
            feature.AddKnownType("System.UriFormat", "UriFormat");
            feature.AddKnownType("System.UriFormatException", "UriFormatException");
            feature.AddKnownType("System.UriHostNameType", "UriHostNameType");
            feature.AddKnownType("System.UriKind", "UriKind");
            feature.AddKnownType("System.UriParser", "UriParser");
            feature.AddKnownType("System.UriPartial", "UriPartial");
            feature.AddKnownType("System.ValueTuple", "ValueTuple");
            feature.AddKnownType("System.ValueTuple`1", "ValueTuple`1'1");
            feature.AddKnownType("System.ValueTuple`2", "ValueTuple`2'2");
            feature.AddKnownType("System.ValueTuple`3", "ValueTuple`3'3");
            feature.AddKnownType("System.ValueTuple`4", "ValueTuple`4'4");
            feature.AddKnownType("System.ValueTuple`5", "ValueTuple`5'5");
            feature.AddKnownType("System.ValueTuple`6", "ValueTuple`6'6");
            feature.AddKnownType("System.ValueTuple`7", "ValueTuple`7'7");
            feature.AddKnownType("System.ValueTuple`8", "ValueTuple`8'8");
            feature.AddKnownType("System.Version", "Version");
            feature.AddKnownType("System.WeakReference", "WeakReference");
            feature.AddKnownType("System.WeakReference`1", "WeakReference`1'1");
            feature.AddKnownType("System.Buffers.ArrayPool`1", "ArrayPool`1'1");
            feature.AddKnownType("System.Buffers.IMemoryOwner`1", "IMemoryOwner`1'1");
            feature.AddKnownType("System.Buffers.IPinnable", "IPinnable");
            feature.AddKnownType("System.Buffers.MemoryHandle", "MemoryHandle");
            feature.AddKnownType("System.Buffers.MemoryManager`1", "MemoryManager`1'1");
            feature.AddKnownType("System.Buffers.OperationStatus", "OperationStatus");
            feature.AddKnownType("System.CodeDom.Compiler.GeneratedCodeAttribute", "GeneratedCodeAttribute");
            feature.AddKnownType("System.CodeDom.Compiler.IndentedTextWriter", "IndentedTextWriter");
            feature.AddKnownType("System.Collections.ArrayList", "ArrayList");
            feature.AddKnownType("System.Collections.Comparer", "Comparer");
            feature.AddKnownType("System.Collections.DictionaryEntry", "DictionaryEntry");
            feature.AddKnownType("System.Collections.Hashtable", "Hashtable");
            feature.AddKnownType("System.Collections.ICollection", "ICollection");
            feature.AddKnownType("System.Collections.IComparer", "IComparer");
            feature.AddKnownType("System.Collections.IDictionary", "IDictionary");
            feature.AddKnownType("System.Collections.IDictionaryEnumerator", "IDictionaryEnumerator");
            feature.AddKnownType("System.Collections.IEqualityComparer", "IEqualityComparer");
            feature.AddKnownType("System.Collections.IHashCodeProvider", "IHashCodeProvider");
            feature.AddKnownType("System.Collections.IList", "IList");
            feature.AddKnownType("System.Collections.IStructuralComparable", "IStructuralComparable");
            feature.AddKnownType("System.Collections.IStructuralEquatable", "IStructuralEquatable");
            feature.AddKnownType("System.Collections.Generic.IAsyncEnumerable`1", "IAsyncEnumerable`1'1");
            feature.AddKnownType("System.Collections.Generic.IAsyncEnumerator`1", "IAsyncEnumerator`1'1");
            feature.AddKnownType("System.Collections.Generic.IComparer`1", "IComparer`1'1");
            feature.AddKnownType("System.Collections.Generic.IDictionary`2", "IDictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.IEqualityComparer`1", "IEqualityComparer`1'1");
            feature.AddKnownType("System.Collections.Generic.IReadOnlyDictionary`2", "IReadOnlyDictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.IReadOnlySet`1", "IReadOnlySet`1'1");
            feature.AddKnownType("System.Collections.Generic.ISet`1", "ISet`1'1");
            feature.AddKnownType("System.Collections.Generic.KeyNotFoundException", "KeyNotFoundException");
            feature.AddKnownType("System.Collections.Generic.KeyValuePair`2", "KeyValuePair`2'2");
            feature.AddKnownType("System.Collections.ObjectModel.Collection`1", "Collection`1'1");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyCollection`1", "ReadOnlyCollection`1'1");
            feature.AddKnownType("System.ComponentModel.DefaultValueAttribute", "DefaultValueAttribute");
            feature.AddKnownType("System.ComponentModel.EditorBrowsableAttribute", "EditorBrowsableAttribute");
            feature.AddKnownType("System.ComponentModel.EditorBrowsableState", "EditorBrowsableState");
            feature.AddKnownType("System.Configuration.Assemblies.AssemblyHashAlgorithm", "AssemblyHashAlgorithm");
            feature.AddKnownType("System.Configuration.Assemblies.AssemblyVersionCompatibility", "AssemblyVersionCompatibility");
            feature.AddKnownType("System.Diagnostics.ConditionalAttribute", "ConditionalAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggableAttribute", "DebuggableAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggableAttribute+DebuggingModes", "DebuggableAttribute.DebuggingModes");
            feature.AddKnownType("System.Diagnostics.DebuggerBrowsableAttribute", "DebuggerBrowsableAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerBrowsableState", "DebuggerBrowsableState");
            feature.AddKnownType("System.Diagnostics.DebuggerDisplayAttribute", "DebuggerDisplayAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerHiddenAttribute", "DebuggerHiddenAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerNonUserCodeAttribute", "DebuggerNonUserCodeAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerStepperBoundaryAttribute", "DebuggerStepperBoundaryAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerStepThroughAttribute", "DebuggerStepThroughAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerTypeProxyAttribute", "DebuggerTypeProxyAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerVisualizerAttribute", "DebuggerVisualizerAttribute");
            feature.AddKnownType("System.Diagnostics.Stopwatch", "Stopwatch");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute", "DynamicallyAccessedMembersAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes", "DynamicallyAccessedMemberTypes");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute", "DynamicDependencyAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute", "ExcludeFromCodeCoverageAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute", "RequiresUnreferencedCodeAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute", "SuppressMessageAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute", "UnconditionalSuppressMessageAttribute");
            feature.AddKnownType("System.Globalization.Calendar", "Calendar");
            feature.AddKnownType("System.Globalization.CalendarAlgorithmType", "CalendarAlgorithmType");
            feature.AddKnownType("System.Globalization.CalendarWeekRule", "CalendarWeekRule");
            feature.AddKnownType("System.Globalization.ChineseLunisolarCalendar", "ChineseLunisolarCalendar");
            feature.AddKnownType("System.Globalization.CompareInfo", "CompareInfo");
            feature.AddKnownType("System.Globalization.CompareOptions", "CompareOptions");
            feature.AddKnownType("System.Globalization.CultureInfo", "CultureInfo");
            feature.AddKnownType("System.Globalization.CultureNotFoundException", "CultureNotFoundException");
            feature.AddKnownType("System.Globalization.CultureTypes", "CultureTypes");
            feature.AddKnownType("System.Globalization.DateTimeFormatInfo", "DateTimeFormatInfo");
            feature.AddKnownType("System.Globalization.DateTimeStyles", "DateTimeStyles");
            feature.AddKnownType("System.Globalization.DaylightTime", "DaylightTime");
            feature.AddKnownType("System.Globalization.DigitShapes", "DigitShapes");
            feature.AddKnownType("System.Globalization.EastAsianLunisolarCalendar", "EastAsianLunisolarCalendar");
            feature.AddKnownType("System.Globalization.GregorianCalendar", "GregorianCalendar");
            feature.AddKnownType("System.Globalization.GregorianCalendarTypes", "GregorianCalendarTypes");
            feature.AddKnownType("System.Globalization.HebrewCalendar", "HebrewCalendar");
            feature.AddKnownType("System.Globalization.HijriCalendar", "HijriCalendar");
            feature.AddKnownType("System.Globalization.IdnMapping", "IdnMapping");
            feature.AddKnownType("System.Globalization.JapaneseCalendar", "JapaneseCalendar");
            feature.AddKnownType("System.Globalization.JapaneseLunisolarCalendar", "JapaneseLunisolarCalendar");
            feature.AddKnownType("System.Globalization.JulianCalendar", "JulianCalendar");
            feature.AddKnownType("System.Globalization.KoreanCalendar", "KoreanCalendar");
            feature.AddKnownType("System.Globalization.KoreanLunisolarCalendar", "KoreanLunisolarCalendar");
            feature.AddKnownType("System.Globalization.NumberFormatInfo", "NumberFormatInfo");
            feature.AddKnownType("System.Globalization.NumberStyles", "NumberStyles");
            feature.AddKnownType("System.Globalization.PersianCalendar", "PersianCalendar");
            feature.AddKnownType("System.Globalization.RegionInfo", "RegionInfo");
            feature.AddKnownType("System.Globalization.SortKey", "SortKey");
            feature.AddKnownType("System.Globalization.SortVersion", "SortVersion");
            feature.AddKnownType("System.Globalization.StringInfo", "StringInfo");
            feature.AddKnownType("System.Globalization.TaiwanCalendar", "TaiwanCalendar");
            feature.AddKnownType("System.Globalization.TaiwanLunisolarCalendar", "TaiwanLunisolarCalendar");
            feature.AddKnownType("System.Globalization.TextElementEnumerator", "TextElementEnumerator");
            feature.AddKnownType("System.Globalization.TextInfo", "TextInfo");
            feature.AddKnownType("System.Globalization.ThaiBuddhistCalendar", "ThaiBuddhistCalendar");
            feature.AddKnownType("System.Globalization.TimeSpanStyles", "TimeSpanStyles");
            feature.AddKnownType("System.Globalization.UmAlQuraCalendar", "UmAlQuraCalendar");
            feature.AddKnownType("System.Globalization.UnicodeCategory", "UnicodeCategory");
            feature.AddKnownType("System.IO.BinaryReader", "BinaryReader");
            feature.AddKnownType("System.IO.BinaryWriter", "BinaryWriter");
            feature.AddKnownType("System.IO.BufferedStream", "BufferedStream");
            feature.AddKnownType("System.IO.DirectoryNotFoundException", "DirectoryNotFoundException");
            feature.AddKnownType("System.IO.EndOfStreamException", "EndOfStreamException");
            feature.AddKnownType("System.IO.FileAccess", "FileAccess");
            feature.AddKnownType("System.IO.FileAttributes", "FileAttributes");
            feature.AddKnownType("System.IO.FileLoadException", "FileLoadException");
            feature.AddKnownType("System.IO.FileMode", "FileMode");
            feature.AddKnownType("System.IO.FileNotFoundException", "FileNotFoundException");
            feature.AddKnownType("System.IO.FileOptions", "FileOptions");
            feature.AddKnownType("System.IO.FileShare", "FileShare");
            feature.AddKnownType("System.IO.FileStream", "FileStream");
            feature.AddKnownType("System.IO.HandleInheritability", "HandleInheritability");
            feature.AddKnownType("System.IO.InvalidDataException", "InvalidDataException");
            feature.AddKnownType("System.IO.IOException", "IOException");
            feature.AddKnownType("System.IO.MemoryStream", "MemoryStream");
            feature.AddKnownType("System.IO.PathTooLongException", "PathTooLongException");
            feature.AddKnownType("System.IO.SeekOrigin", "SeekOrigin");
            feature.AddKnownType("System.IO.Stream", "Stream");
            feature.AddKnownType("System.IO.StreamReader", "StreamReader");
            feature.AddKnownType("System.IO.StreamWriter", "StreamWriter");
            feature.AddKnownType("System.IO.StringReader", "StringReader");
            feature.AddKnownType("System.IO.StringWriter", "StringWriter");
            feature.AddKnownType("System.IO.TextReader", "TextReader");
            feature.AddKnownType("System.IO.TextWriter", "TextWriter");
            feature.AddKnownType("System.IO.UnmanagedMemoryStream", "UnmanagedMemoryStream");
            feature.AddKnownType("System.Reflection.AmbiguousMatchException", "AmbiguousMatchException");
            feature.AddKnownType("System.Reflection.Assembly", "Assembly");
            feature.AddKnownType("System.Reflection.AssemblyAlgorithmIdAttribute", "AssemblyAlgorithmIdAttribute");
            feature.AddKnownType("System.Reflection.AssemblyCompanyAttribute", "AssemblyCompanyAttribute");
            feature.AddKnownType("System.Reflection.AssemblyConfigurationAttribute", "AssemblyConfigurationAttribute");
            feature.AddKnownType("System.Reflection.AssemblyContentType", "AssemblyContentType");
            feature.AddKnownType("System.Reflection.AssemblyCopyrightAttribute", "AssemblyCopyrightAttribute");
            feature.AddKnownType("System.Reflection.AssemblyCultureAttribute", "AssemblyCultureAttribute");
            feature.AddKnownType("System.Reflection.AssemblyDefaultAliasAttribute", "AssemblyDefaultAliasAttribute");
            feature.AddKnownType("System.Reflection.AssemblyDelaySignAttribute", "AssemblyDelaySignAttribute");
            feature.AddKnownType("System.Reflection.AssemblyDescriptionAttribute", "AssemblyDescriptionAttribute");
            feature.AddKnownType("System.Reflection.AssemblyFileVersionAttribute", "AssemblyFileVersionAttribute");
            feature.AddKnownType("System.Reflection.AssemblyFlagsAttribute", "AssemblyFlagsAttribute");
            feature.AddKnownType("System.Reflection.AssemblyInformationalVersionAttribute", "AssemblyInformationalVersionAttribute");
            feature.AddKnownType("System.Reflection.AssemblyKeyFileAttribute", "AssemblyKeyFileAttribute");
            feature.AddKnownType("System.Reflection.AssemblyKeyNameAttribute", "AssemblyKeyNameAttribute");
            feature.AddKnownType("System.Reflection.AssemblyMetadataAttribute", "AssemblyMetadataAttribute");
            feature.AddKnownType("System.Reflection.AssemblyName", "AssemblyName");
            feature.AddKnownType("System.Reflection.AssemblyNameFlags", "AssemblyNameFlags");
            feature.AddKnownType("System.Reflection.AssemblyNameProxy", "AssemblyNameProxy");
            feature.AddKnownType("System.Reflection.AssemblyProductAttribute", "AssemblyProductAttribute");
            feature.AddKnownType("System.Reflection.AssemblySignatureKeyAttribute", "AssemblySignatureKeyAttribute");
            feature.AddKnownType("System.Reflection.AssemblyTitleAttribute", "AssemblyTitleAttribute");
            feature.AddKnownType("System.Reflection.AssemblyTrademarkAttribute", "AssemblyTrademarkAttribute");
            feature.AddKnownType("System.Reflection.AssemblyVersionAttribute", "AssemblyVersionAttribute");
            feature.AddKnownType("System.Reflection.Binder", "Binder");
            feature.AddKnownType("System.Reflection.BindingFlags", "BindingFlags");
            feature.AddKnownType("System.Reflection.CallingConventions", "CallingConventions");
            feature.AddKnownType("System.Reflection.ConstructorInfo", "ConstructorInfo");
            feature.AddKnownType("System.Reflection.CustomAttributeData", "CustomAttributeData");
            feature.AddKnownType("System.Reflection.CustomAttributeFormatException", "CustomAttributeFormatException");
            feature.AddKnownType("System.Reflection.CustomAttributeNamedArgument", "CustomAttributeNamedArgument");
            feature.AddKnownType("System.Reflection.CustomAttributeTypedArgument", "CustomAttributeTypedArgument");
            feature.AddKnownType("System.Reflection.DefaultMemberAttribute", "DefaultMemberAttribute");
            feature.AddKnownType("System.Reflection.EventAttributes", "EventAttributes");
            feature.AddKnownType("System.Reflection.EventInfo", "EventInfo");
            feature.AddKnownType("System.Reflection.ExceptionHandlingClause", "ExceptionHandlingClause");
            feature.AddKnownType("System.Reflection.ExceptionHandlingClauseOptions", "ExceptionHandlingClauseOptions");
            feature.AddKnownType("System.Reflection.FieldAttributes", "FieldAttributes");
            feature.AddKnownType("System.Reflection.FieldInfo", "FieldInfo");
            feature.AddKnownType("System.Reflection.GenericParameterAttributes", "GenericParameterAttributes");
            feature.AddKnownType("System.Reflection.ICustomAttributeProvider", "ICustomAttributeProvider");
            feature.AddKnownType("System.Reflection.ImageFileMachine", "ImageFileMachine");
            feature.AddKnownType("System.Reflection.InterfaceMapping", "InterfaceMapping");
            feature.AddKnownType("System.Reflection.InvalidFilterCriteriaException", "InvalidFilterCriteriaException");
            feature.AddKnownType("System.Reflection.IReflect", "IReflect");
            feature.AddKnownType("System.Reflection.IReflectableType", "IReflectableType");
            feature.AddKnownType("System.Reflection.LocalVariableInfo", "LocalVariableInfo");
            feature.AddKnownType("System.Reflection.ManifestResourceInfo", "ManifestResourceInfo");
            feature.AddKnownType("System.Reflection.MemberInfo", "MemberInfo");
            feature.AddKnownType("System.Reflection.MemberTypes", "MemberTypes");
            feature.AddKnownType("System.Reflection.MethodAttributes", "MethodAttributes");
            feature.AddKnownType("System.Reflection.MethodBase", "MethodBase");
            feature.AddKnownType("System.Reflection.MethodBody", "MethodBody");
            feature.AddKnownType("System.Reflection.MethodImplAttributes", "MethodImplAttributes");
            feature.AddKnownType("System.Reflection.MethodInfo", "MethodInfo");
            feature.AddKnownType("System.Reflection.Missing", "Missing");
            feature.AddKnownType("System.Reflection.Module", "Module");
            feature.AddKnownType("System.Reflection.ObfuscateAssemblyAttribute", "ObfuscateAssemblyAttribute");
            feature.AddKnownType("System.Reflection.ObfuscationAttribute", "ObfuscationAttribute");
            feature.AddKnownType("System.Reflection.ParameterAttributes", "ParameterAttributes");
            feature.AddKnownType("System.Reflection.ParameterInfo", "ParameterInfo");
            feature.AddKnownType("System.Reflection.ParameterModifier", "ParameterModifier");
            feature.AddKnownType("System.Reflection.Pointer", "Pointer");
            feature.AddKnownType("System.Reflection.PortableExecutableKinds", "PortableExecutableKinds");
            feature.AddKnownType("System.Reflection.ProcessorArchitecture", "ProcessorArchitecture");
            feature.AddKnownType("System.Reflection.PropertyAttributes", "PropertyAttributes");
            feature.AddKnownType("System.Reflection.PropertyInfo", "PropertyInfo");
            feature.AddKnownType("System.Reflection.ReflectionContext", "ReflectionContext");
            feature.AddKnownType("System.Reflection.ReflectionTypeLoadException", "ReflectionTypeLoadException");
            feature.AddKnownType("System.Reflection.ResourceAttributes", "ResourceAttributes");
            feature.AddKnownType("System.Reflection.ResourceLocation", "ResourceLocation");
            feature.AddKnownType("System.Reflection.StrongNameKeyPair", "StrongNameKeyPair");
            feature.AddKnownType("System.Reflection.TargetException", "TargetException");
            feature.AddKnownType("System.Reflection.TargetInvocationException", "TargetInvocationException");
            feature.AddKnownType("System.Reflection.TargetParameterCountException", "TargetParameterCountException");
            feature.AddKnownType("System.Reflection.TypeAttributes", "TypeAttributes");
            feature.AddKnownType("System.Reflection.TypeDelegator", "TypeDelegator");
            feature.AddKnownType("System.Reflection.TypeInfo", "TypeInfo");
            feature.AddKnownType("System.Resources.IResourceReader", "IResourceReader");
            feature.AddKnownType("System.Resources.MissingManifestResourceException", "MissingManifestResourceException");
            feature.AddKnownType("System.Resources.MissingSatelliteAssemblyException", "MissingSatelliteAssemblyException");
            feature.AddKnownType("System.Resources.NeutralResourcesLanguageAttribute", "NeutralResourcesLanguageAttribute");
            feature.AddKnownType("System.Resources.ResourceManager", "ResourceManager");
            feature.AddKnownType("System.Resources.ResourceReader", "ResourceReader");
            feature.AddKnownType("System.Resources.ResourceSet", "ResourceSet");
            feature.AddKnownType("System.Resources.SatelliteContractVersionAttribute", "SatelliteContractVersionAttribute");
            feature.AddKnownType("System.Resources.UltimateResourceFallbackLocation", "UltimateResourceFallbackLocation");
            feature.AddKnownType("System.Runtime.AmbiguousImplementationException", "AmbiguousImplementationException");
            feature.AddKnownType("System.Runtime.AssemblyTargetedPatchBandAttribute", "AssemblyTargetedPatchBandAttribute");
            feature.AddKnownType("System.Runtime.GCLargeObjectHeapCompactionMode", "GCLargeObjectHeapCompactionMode");
            feature.AddKnownType("System.Runtime.GCLatencyMode", "GCLatencyMode");
            feature.AddKnownType("System.Runtime.MemoryFailPoint", "MemoryFailPoint");
            feature.AddKnownType("System.Runtime.TargetedPatchingOptOutAttribute", "TargetedPatchingOptOutAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute", "AccessedThroughPropertyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncIteratorMethodBuilder", "AsyncIteratorMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute", "AsyncIteratorStateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncMethodBuilderAttribute", "AsyncMethodBuilderAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncStateMachineAttribute", "AsyncStateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncTaskMethodBuilder", "AsyncTaskMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", "AsyncTaskMethodBuilder`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder", "AsyncValueTaskMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1", "AsyncValueTaskMethodBuilder`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncVoidMethodBuilder", "AsyncVoidMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvCdecl", "CallConvCdecl");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvFastcall", "CallConvFastcall");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvStdcall", "CallConvStdcall");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvThiscall", "CallConvThiscall");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerArgumentExpressionAttribute", "CallerArgumentExpressionAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerFilePathAttribute", "CallerFilePathAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerLineNumberAttribute", "CallerLineNumberAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerMemberNameAttribute", "CallerMemberNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilationRelaxations", "CompilationRelaxations");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilationRelaxationsAttribute", "CompilationRelaxationsAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilerGeneratedAttribute", "CompilerGeneratedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilerGlobalScopeAttribute", "CompilerGlobalScopeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ConditionalWeakTable`2", "ConditionalWeakTable`2'2");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredAsyncDisposable", "ConfiguredAsyncDisposable");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1", "ConfiguredCancelableAsyncEnumerable`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1+Enumerator", "ConfiguredCancelableAsyncEnumerable`1'1.Enumerator'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable", "ConfiguredTaskAwaitable");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter", "ConfiguredTaskAwaitable.ConfiguredTaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1", "ConfiguredTaskAwaitable`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter", "ConfiguredTaskAwaitable`1'1.ConfiguredTaskAwaiter'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable", "ConfiguredValueTaskAwaitable");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable+ConfiguredValueTaskAwaiter", "ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1", "ConfiguredValueTaskAwaitable`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter", "ConfiguredValueTaskAwaitable`1'1.ConfiguredValueTaskAwaiter'1");
            feature.AddKnownType("System.Runtime.CompilerServices.CustomConstantAttribute", "CustomConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DateTimeConstantAttribute", "DateTimeConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DecimalConstantAttribute", "DecimalConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DefaultDependencyAttribute", "DefaultDependencyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DependencyAttribute", "DependencyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DisablePrivateReflectionAttribute", "DisablePrivateReflectionAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DiscardableAttribute", "DiscardableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.EnumeratorCancellationAttribute", "EnumeratorCancellationAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ExtensionAttribute", "ExtensionAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.FixedAddressValueTypeAttribute", "FixedAddressValueTypeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.FixedBufferAttribute", "FixedBufferAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IAsyncStateMachine", "IAsyncStateMachine");
            feature.AddKnownType("System.Runtime.CompilerServices.ICriticalNotifyCompletion", "ICriticalNotifyCompletion");
            feature.AddKnownType("System.Runtime.CompilerServices.IndexerNameAttribute", "IndexerNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.INotifyCompletion", "INotifyCompletion");
            feature.AddKnownType("System.Runtime.CompilerServices.InternalsVisibleToAttribute", "InternalsVisibleToAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsByRefLikeAttribute", "IsByRefLikeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IStrongBox", "IStrongBox");
            feature.AddKnownType("System.Runtime.CompilerServices.IteratorStateMachineAttribute", "IteratorStateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ITuple", "ITuple");
            feature.AddKnownType("System.Runtime.CompilerServices.LoadHint", "LoadHint");
            feature.AddKnownType("System.Runtime.CompilerServices.MethodCodeType", "MethodCodeType");
            feature.AddKnownType("System.Runtime.CompilerServices.MethodImplAttribute", "MethodImplAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.MethodImplOptions", "MethodImplOptions");
            feature.AddKnownType("System.Runtime.CompilerServices.ModuleInitializerAttribute", "ModuleInitializerAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.PreserveBaseOverridesAttribute", "PreserveBaseOverridesAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ReferenceAssemblyAttribute", "ReferenceAssemblyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.RuntimeCompatibilityAttribute", "RuntimeCompatibilityAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.RuntimeWrappedException", "RuntimeWrappedException");
            feature.AddKnownType("System.Runtime.CompilerServices.SkipLocalsInitAttribute", "SkipLocalsInitAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.SpecialNameAttribute", "SpecialNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.StateMachineAttribute", "StateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.StringFreezingAttribute", "StringFreezingAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.StrongBox`1", "StrongBox`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.SuppressIldasmAttribute", "SuppressIldasmAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.SwitchExpressionException", "SwitchExpressionException");
            feature.AddKnownType("System.Runtime.CompilerServices.TaskAwaiter", "TaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.TaskAwaiter`1", "TaskAwaiter`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.TupleElementNamesAttribute", "TupleElementNamesAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.TypeForwardedFromAttribute", "TypeForwardedFromAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.TypeForwardedToAttribute", "TypeForwardedToAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.UnsafeValueTypeAttribute", "UnsafeValueTypeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ValueTaskAwaiter", "ValueTaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.ValueTaskAwaiter`1", "ValueTaskAwaiter`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.YieldAwaitable", "YieldAwaitable");
            feature.AddKnownType("System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter", "YieldAwaitable.YieldAwaiter");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.Cer", "Cer");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.Consistency", "Consistency");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.CriticalFinalizerObject", "CriticalFinalizerObject");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute", "PrePrepareMethodAttribute");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute", "ReliabilityContractAttribute");
            feature.AddKnownType("System.Runtime.ExceptionServices.ExceptionDispatchInfo", "ExceptionDispatchInfo");
            feature.AddKnownType("System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs", "FirstChanceExceptionEventArgs");
            feature.AddKnownType("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute", "HandleProcessCorruptedStateExceptionsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.CharSet", "CharSet");
            feature.AddKnownType("System.Runtime.InteropServices.ComVisibleAttribute", "ComVisibleAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.CriticalHandle", "CriticalHandle");
            feature.AddKnownType("System.Runtime.InteropServices.ExternalException", "ExternalException");
            feature.AddKnownType("System.Runtime.InteropServices.FieldOffsetAttribute", "FieldOffsetAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.GCHandle", "GCHandle");
            feature.AddKnownType("System.Runtime.InteropServices.GCHandleType", "GCHandleType");
            feature.AddKnownType("System.Runtime.InteropServices.InAttribute", "InAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.LayoutKind", "LayoutKind");
            feature.AddKnownType("System.Runtime.InteropServices.OutAttribute", "OutAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.SafeBuffer", "SafeBuffer");
            feature.AddKnownType("System.Runtime.InteropServices.SafeHandle", "SafeHandle");
            feature.AddKnownType("System.Runtime.InteropServices.StructLayoutAttribute", "StructLayoutAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.SuppressGCTransitionAttribute", "SuppressGCTransitionAttribute");
            feature.AddKnownType("System.Runtime.Remoting.ObjectHandle", "ObjectHandle");
            feature.AddKnownType("System.Runtime.Serialization.IDeserializationCallback", "IDeserializationCallback");
            feature.AddKnownType("System.Runtime.Serialization.IFormatterConverter", "IFormatterConverter");
            feature.AddKnownType("System.Runtime.Serialization.IObjectReference", "IObjectReference");
            feature.AddKnownType("System.Runtime.Serialization.ISafeSerializationData", "ISafeSerializationData");
            feature.AddKnownType("System.Runtime.Serialization.ISerializable", "ISerializable");
            feature.AddKnownType("System.Runtime.Serialization.OnDeserializedAttribute", "OnDeserializedAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OnDeserializingAttribute", "OnDeserializingAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OnSerializedAttribute", "OnSerializedAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OnSerializingAttribute", "OnSerializingAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OptionalFieldAttribute", "OptionalFieldAttribute");
            feature.AddKnownType("System.Runtime.Serialization.SafeSerializationEventArgs", "SafeSerializationEventArgs");
            feature.AddKnownType("System.Runtime.Serialization.SerializationEntry", "SerializationEntry");
            feature.AddKnownType("System.Runtime.Serialization.SerializationException", "SerializationException");
            feature.AddKnownType("System.Runtime.Serialization.SerializationInfo", "SerializationInfo");
            feature.AddKnownType("System.Runtime.Serialization.SerializationInfoEnumerator", "SerializationInfoEnumerator");
            feature.AddKnownType("System.Runtime.Serialization.StreamingContext", "StreamingContext");
            feature.AddKnownType("System.Runtime.Serialization.StreamingContextStates", "StreamingContextStates");
            feature.AddKnownType("System.Runtime.Versioning.ComponentGuaranteesAttribute", "ComponentGuaranteesAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ComponentGuaranteesOptions", "ComponentGuaranteesOptions");
            feature.AddKnownType("System.Runtime.Versioning.FrameworkName", "FrameworkName");
            feature.AddKnownType("System.Runtime.Versioning.SupportedOSPlatformAttribute", "SupportedOSPlatformAttribute");
            feature.AddKnownType("System.Runtime.Versioning.OSPlatformAttribute", "OSPlatformAttribute");
            feature.AddKnownType("System.Runtime.Versioning.UnsupportedOSPlatformAttribute", "UnsupportedOSPlatformAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ResourceConsumptionAttribute", "ResourceConsumptionAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ResourceExposureAttribute", "ResourceExposureAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ResourceScope", "ResourceScope");
            feature.AddKnownType("System.Runtime.Versioning.TargetFrameworkAttribute", "TargetFrameworkAttribute");
            feature.AddKnownType("System.Runtime.Versioning.TargetPlatformAttribute", "TargetPlatformAttribute");
            feature.AddKnownType("System.Security.AllowPartiallyTrustedCallersAttribute", "AllowPartiallyTrustedCallersAttribute");
            feature.AddKnownType("System.Security.IPermission", "IPermission");
            feature.AddKnownType("System.Security.ISecurityEncodable", "ISecurityEncodable");
            feature.AddKnownType("System.Security.IStackWalk", "IStackWalk");
            feature.AddKnownType("System.Security.PartialTrustVisibilityLevel", "PartialTrustVisibilityLevel");
            feature.AddKnownType("System.Security.PermissionSet", "PermissionSet");
            feature.AddKnownType("System.Security.SecurityCriticalAttribute", "SecurityCriticalAttribute");
            feature.AddKnownType("System.Security.SecurityCriticalScope", "SecurityCriticalScope");
            feature.AddKnownType("System.Security.SecurityElement", "SecurityElement");
            feature.AddKnownType("System.Security.SecurityException", "SecurityException");
            feature.AddKnownType("System.Security.SecurityRulesAttribute", "SecurityRulesAttribute");
            feature.AddKnownType("System.Security.SecurityRuleSet", "SecurityRuleSet");
            feature.AddKnownType("System.Security.SecuritySafeCriticalAttribute", "SecuritySafeCriticalAttribute");
            feature.AddKnownType("System.Security.SecurityTransparentAttribute", "SecurityTransparentAttribute");
            feature.AddKnownType("System.Security.SecurityTreatAsSafeAttribute", "SecurityTreatAsSafeAttribute");
            feature.AddKnownType("System.Security.SuppressUnmanagedCodeSecurityAttribute", "SuppressUnmanagedCodeSecurityAttribute");
            feature.AddKnownType("System.Security.UnverifiableCodeAttribute", "UnverifiableCodeAttribute");
            feature.AddKnownType("System.Security.VerificationException", "VerificationException");
            feature.AddKnownType("System.Security.Cryptography.CryptographicException", "CryptographicException");
            feature.AddKnownType("System.Security.Permissions.CodeAccessSecurityAttribute", "CodeAccessSecurityAttribute");
            feature.AddKnownType("System.Security.Permissions.PermissionState", "PermissionState");
            feature.AddKnownType("System.Security.Permissions.SecurityAction", "SecurityAction");
            feature.AddKnownType("System.Security.Permissions.SecurityAttribute", "SecurityAttribute");
            feature.AddKnownType("System.Security.Permissions.SecurityPermissionAttribute", "SecurityPermissionAttribute");
            feature.AddKnownType("System.Security.Permissions.SecurityPermissionFlag", "SecurityPermissionFlag");
            feature.AddKnownType("System.Security.Principal.IIdentity", "IIdentity");
            feature.AddKnownType("System.Security.Principal.IPrincipal", "IPrincipal");
            feature.AddKnownType("System.Security.Principal.PrincipalPolicy", "PrincipalPolicy");
            feature.AddKnownType("System.Security.Principal.TokenImpersonationLevel", "TokenImpersonationLevel");
            feature.AddKnownType("System.Text.Decoder", "Decoder");
            feature.AddKnownType("System.Text.DecoderExceptionFallback", "DecoderExceptionFallback");
            feature.AddKnownType("System.Text.DecoderExceptionFallbackBuffer", "DecoderExceptionFallbackBuffer");
            feature.AddKnownType("System.Text.DecoderFallback", "DecoderFallback");
            feature.AddKnownType("System.Text.DecoderFallbackBuffer", "DecoderFallbackBuffer");
            feature.AddKnownType("System.Text.DecoderFallbackException", "DecoderFallbackException");
            feature.AddKnownType("System.Text.DecoderReplacementFallback", "DecoderReplacementFallback");
            feature.AddKnownType("System.Text.DecoderReplacementFallbackBuffer", "DecoderReplacementFallbackBuffer");
            feature.AddKnownType("System.Text.Encoder", "Encoder");
            feature.AddKnownType("System.Text.EncoderExceptionFallback", "EncoderExceptionFallback");
            feature.AddKnownType("System.Text.EncoderExceptionFallbackBuffer", "EncoderExceptionFallbackBuffer");
            feature.AddKnownType("System.Text.EncoderFallback", "EncoderFallback");
            feature.AddKnownType("System.Text.EncoderFallbackBuffer", "EncoderFallbackBuffer");
            feature.AddKnownType("System.Text.EncoderFallbackException", "EncoderFallbackException");
            feature.AddKnownType("System.Text.EncoderReplacementFallback", "EncoderReplacementFallback");
            feature.AddKnownType("System.Text.EncoderReplacementFallbackBuffer", "EncoderReplacementFallbackBuffer");
            feature.AddKnownType("System.Text.Encoding", "Encoding");
            feature.AddKnownType("System.Text.EncodingInfo", "EncodingInfo");
            feature.AddKnownType("System.Text.EncodingProvider", "EncodingProvider");
            feature.AddKnownType("System.Text.NormalizationForm", "NormalizationForm");
            feature.AddKnownType("System.Text.Rune", "Rune");
            feature.AddKnownType("System.Text.StringBuilder", "StringBuilder");
            feature.AddKnownType("System.Text.StringBuilder+ChunkEnumerator", "StringBuilder.ChunkEnumerator");
            feature.AddKnownType("System.Text.StringRuneEnumerator", "StringRuneEnumerator");
            feature.AddKnownType("System.Threading.CancellationToken", "CancellationToken");
            feature.AddKnownType("System.Threading.CancellationTokenRegistration", "CancellationTokenRegistration");
            feature.AddKnownType("System.Threading.CancellationTokenSource", "CancellationTokenSource");
            feature.AddKnownType("System.Threading.LazyThreadSafetyMode", "LazyThreadSafetyMode");
            feature.AddKnownType("System.Threading.Timer", "Timer");
            feature.AddKnownType("System.Threading.WaitHandle", "WaitHandle");
            feature.AddKnownType("System.Threading.Tasks.ConcurrentExclusiveSchedulerPair", "ConcurrentExclusiveSchedulerPair");
            feature.AddKnownType("System.Threading.Tasks.TaskCanceledException", "TaskCanceledException");
            feature.AddKnownType("System.Threading.Tasks.TaskCompletionSource", "TaskCompletionSource");
            feature.AddKnownType("System.Threading.Tasks.TaskCompletionSource`1", "TaskCompletionSource`1'1");
            feature.AddKnownType("System.Threading.Tasks.TaskContinuationOptions", "TaskContinuationOptions");
            feature.AddKnownType("System.Threading.Tasks.TaskCreationOptions", "TaskCreationOptions");
            feature.AddKnownType("System.Threading.Tasks.TaskFactory", "TaskFactory");
            feature.AddKnownType("System.Threading.Tasks.TaskFactory`1", "TaskFactory`1'1");
            feature.AddKnownType("System.Threading.Tasks.TaskScheduler", "TaskScheduler");
            feature.AddKnownType("System.Threading.Tasks.TaskSchedulerException", "TaskSchedulerException");
            feature.AddKnownType("System.Threading.Tasks.TaskStatus", "TaskStatus");
            feature.AddKnownType("System.Threading.Tasks.UnobservedTaskExceptionEventArgs", "UnobservedTaskExceptionEventArgs");
            feature.AddKnownType("System.Threading.Tasks.ValueTask", "ValueTask");
            feature.AddKnownType("System.Threading.Tasks.ValueTask`1", "ValueTask`1'1");
            feature.AddKnownType("System.Threading.Tasks.Sources.IValueTaskSource", "IValueTaskSource");
            feature.AddKnownType("System.Threading.Tasks.Sources.IValueTaskSource`1", "IValueTaskSource`1'1");
            feature.AddKnownType("System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1", "ManualResetValueTaskSourceCore`1'1");
            feature.AddKnownType("System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags", "ValueTaskSourceOnCompletedFlags");
            feature.AddKnownType("System.Threading.Tasks.Sources.ValueTaskSourceStatus", "ValueTaskSourceStatus");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.InteropServices", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.DataMisalignedException", "DataMisalignedException");
            feature.AddKnownType("System.DllNotFoundException", "DllNotFoundException");
            feature.AddKnownType("System.IO.UnmanagedMemoryAccessor", "UnmanagedMemoryAccessor");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IDispatchConstantAttribute", "IDispatchConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IUnknownConstantAttribute", "IUnknownConstantAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute", "AllowReversePInvokeCallsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ArrayWithOffset", "ArrayWithOffset");
            feature.AddKnownType("System.Runtime.InteropServices.AutomationProxyAttribute", "AutomationProxyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.BestFitMappingAttribute", "BestFitMappingAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.BStrWrapper", "BStrWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.CallingConvention", "CallingConvention");
            feature.AddKnownType("System.Runtime.InteropServices.ClassInterfaceAttribute", "ClassInterfaceAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ClassInterfaceType", "ClassInterfaceType");
            feature.AddKnownType("System.Runtime.InteropServices.CoClassAttribute", "CoClassAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComAliasNameAttribute", "ComAliasNameAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComAwareEventInfo", "ComAwareEventInfo");
            feature.AddKnownType("System.Runtime.InteropServices.ComCompatibleVersionAttribute", "ComCompatibleVersionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComConversionLossAttribute", "ComConversionLossAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComDefaultInterfaceAttribute", "ComDefaultInterfaceAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComEventInterfaceAttribute", "ComEventInterfaceAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.COMException", "COMException");
            feature.AddKnownType("System.Runtime.InteropServices.ComImportAttribute", "ComImportAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComInterfaceType", "ComInterfaceType");
            feature.AddKnownType("System.Runtime.InteropServices.ComMemberType", "ComMemberType");
            feature.AddKnownType("System.Runtime.InteropServices.ComRegisterFunctionAttribute", "ComRegisterFunctionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComSourceInterfacesAttribute", "ComSourceInterfacesAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComUnregisterFunctionAttribute", "ComUnregisterFunctionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.CurrencyWrapper", "CurrencyWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.CustomQueryInterfaceMode", "CustomQueryInterfaceMode");
            feature.AddKnownType("System.Runtime.InteropServices.CustomQueryInterfaceResult", "CustomQueryInterfaceResult");
            feature.AddKnownType("System.Runtime.InteropServices.DefaultCharSetAttribute", "DefaultCharSetAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute", "DefaultDllImportSearchPathsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DefaultParameterValueAttribute", "DefaultParameterValueAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DispatchWrapper", "DispatchWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.DispIdAttribute", "DispIdAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DllImportAttribute", "DllImportAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DllImportSearchPath", "DllImportSearchPath");
            feature.AddKnownType("System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute", "DynamicInterfaceCastableImplementationAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ErrorWrapper", "ErrorWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.GuidAttribute", "GuidAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.HandleCollector", "HandleCollector");
            feature.AddKnownType("System.Runtime.InteropServices.HandleRef", "HandleRef");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomAdapter", "ICustomAdapter");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomFactory", "ICustomFactory");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomMarshaler", "ICustomMarshaler");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomQueryInterface", "ICustomQueryInterface");
            feature.AddKnownType("System.Runtime.InteropServices.IDynamicInterfaceCastable", "IDynamicInterfaceCastable");
            feature.AddKnownType("System.Runtime.InteropServices.ImportedFromTypeLibAttribute", "ImportedFromTypeLibAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.InterfaceTypeAttribute", "InterfaceTypeAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.InvalidComObjectException", "InvalidComObjectException");
            feature.AddKnownType("System.Runtime.InteropServices.InvalidOleVariantTypeException", "InvalidOleVariantTypeException");
            feature.AddKnownType("System.Runtime.InteropServices.LCIDConversionAttribute", "LCIDConversionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute", "ManagedToNativeComInteropStubAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.MarshalAsAttribute", "MarshalAsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.MarshalDirectiveException", "MarshalDirectiveException");
            feature.AddKnownType("System.Runtime.InteropServices.OptionalAttribute", "OptionalAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.PreserveSigAttribute", "PreserveSigAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute", "PrimaryInteropAssemblyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ProgIdAttribute", "ProgIdAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.SafeArrayRankMismatchException", "SafeArrayRankMismatchException");
            feature.AddKnownType("System.Runtime.InteropServices.SafeArrayTypeMismatchException", "SafeArrayTypeMismatchException");
            feature.AddKnownType("System.Runtime.InteropServices.SEHException", "SEHException");
            feature.AddKnownType("System.Runtime.InteropServices.StandardOleMarshalObject", "StandardOleMarshalObject");
            feature.AddKnownType("System.Runtime.InteropServices.TypeIdentifierAttribute", "TypeIdentifierAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibFuncAttribute", "TypeLibFuncAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibFuncFlags", "TypeLibFuncFlags");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibImportClassAttribute", "TypeLibImportClassAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibTypeAttribute", "TypeLibTypeAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibTypeFlags", "TypeLibTypeFlags");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibVarAttribute", "TypeLibVarAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibVarFlags", "TypeLibVarFlags");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibVersionAttribute", "TypeLibVersionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.UnknownWrapper", "UnknownWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute", "UnmanagedFunctionPointerAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.UnmanagedType", "UnmanagedType");
            feature.AddKnownType("System.Runtime.InteropServices.VarEnum", "VarEnum");
            feature.AddKnownType("System.Runtime.InteropServices.VariantWrapper", "VariantWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.CreateComInterfaceFlags", "CreateComInterfaceFlags");
            feature.AddKnownType("System.Runtime.InteropServices.CreateObjectFlags", "CreateObjectFlags");
            feature.AddKnownType("System.Runtime.InteropServices.ComWrappers", "ComWrappers");
            feature.AddKnownType("System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry", "ComWrappers.ComInterfaceEntry");
            feature.AddKnownType("System.Runtime.InteropServices.ComWrappers+ComInterfaceDispatch", "ComWrappers.ComInterfaceDispatch");
            feature.AddKnownType("System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute", "UnmanagedCallersOnlyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ADVF", "ADVF");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.BINDPTR", "BINDPTR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.BIND_OPTS", "BIND_OPTS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.CALLCONV", "CALLCONV");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.CONNECTDATA", "CONNECTDATA");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DATADIR", "DATADIR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DESCKIND", "DESCKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DISPPARAMS", "DISPPARAMS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DVASPECT", "DVASPECT");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ELEMDESC", "ELEMDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION", "ELEMDESC.DESCUNION");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.EXCEPINFO", "EXCEPINFO");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FILETIME", "FILETIME");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FORMATETC", "FORMATETC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FUNCDESC", "FUNCDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FUNCFLAGS", "FUNCFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FUNCKIND", "FUNCKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IAdviseSink", "IAdviseSink");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IBindCtx", "IBindCtx");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IConnectionPoint", "IConnectionPoint");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IConnectionPointContainer", "IConnectionPointContainer");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IDataObject", "IDataObject");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IDLDESC", "IDLDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IDLFLAG", "IDLFLAG");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints", "IEnumConnectionPoints");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumConnections", "IEnumConnections");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumFORMATETC", "IEnumFORMATETC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumMoniker", "IEnumMoniker");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumSTATDATA", "IEnumSTATDATA");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumString", "IEnumString");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumVARIANT", "IEnumVARIANT");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IMoniker", "IMoniker");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS", "IMPLTYPEFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.INVOKEKIND", "INVOKEKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IPersistFile", "IPersistFile");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IRunningObjectTable", "IRunningObjectTable");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IStream", "IStream");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeComp", "ITypeComp");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeInfo", "ITypeInfo");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeInfo2", "ITypeInfo2");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeLib", "ITypeLib");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeLib2", "ITypeLib2");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.LIBFLAGS", "LIBFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.PARAMDESC", "PARAMDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.PARAMFLAG", "PARAMFLAG");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.STATDATA", "STATDATA");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.STATSTG", "STATSTG");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.STGMEDIUM", "STGMEDIUM");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.SYSKIND", "SYSKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYMED", "TYMED");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEATTR", "TYPEATTR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEDESC", "TYPEDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEFLAGS", "TYPEFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEKIND", "TYPEKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPELIBATTR", "TYPELIBATTR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARDESC", "VARDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION", "VARDESC.DESCUNION");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARFLAGS", "VARFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARKIND", "VARKIND");
            feature.AddKnownType("System.Security.SecureString", "SecureString");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.InteropServices.RuntimeInformation", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.Architecture", "Architecture");
            feature.AddKnownType("System.Runtime.InteropServices.OSPlatform", "OSPlatform");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Intrinsics", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Intrinsics.Vector128`1", "Vector128`1'1");
            feature.AddKnownType("System.Runtime.Intrinsics.Vector256`1", "Vector256`1'1");
            feature.AddKnownType("System.Runtime.Intrinsics.Vector64`1", "Vector64`1'1");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.AdvSimd", "AdvSimd");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.AdvSimd+Arm64", "AdvSimd.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Aes", "Aes");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Aes+Arm64", "Aes.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.ArmBase", "ArmBase");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.ArmBase+Arm64", "ArmBase.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Crc32", "Crc32");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Crc32+Arm64", "Crc32.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Dp", "Dp");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Dp+Arm64", "Dp.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Rdm", "Rdm");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Rdm+Arm64", "Rdm.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha1", "Sha1");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha1+Arm64", "Sha1.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha256", "Sha256");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha256+Arm64", "Sha256.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Aes", "Aes");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Aes+X64", "Aes.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx", "Avx");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx+X64", "Avx.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx2", "Avx2");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx2+X64", "Avx2.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi1", "Bmi1");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi1+X64", "Bmi1.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi2", "Bmi2");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi2+X64", "Bmi2.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.FloatComparisonMode", "FloatComparisonMode");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Fma", "Fma");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Fma+X64", "Fma.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Lzcnt", "Lzcnt");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Lzcnt+X64", "Lzcnt.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Pclmulqdq", "Pclmulqdq");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Pclmulqdq+X64", "Pclmulqdq.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Popcnt", "Popcnt");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Popcnt+X64", "Popcnt.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse", "Sse");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse+X64", "Sse.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse2", "Sse2");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse2+X64", "Sse2.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse3", "Sse3");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse3+X64", "Sse3.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse41", "Sse41");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse41+X64", "Sse41.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse42", "Sse42");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse42+X64", "Sse42.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Ssse3", "Ssse3");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Ssse3+X64", "Ssse3.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.X86Base", "X86Base");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.X86Base+X64", "X86Base.X64");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Loader", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Loader.AssemblyDependencyResolver", "AssemblyDependencyResolver");
            feature.AddKnownType("System.Runtime.Loader.AssemblyLoadContext", "AssemblyLoadContext");
            feature.AddKnownType("System.Runtime.Loader.AssemblyLoadContext+ContextualReflectionScope", "AssemblyLoadContext.ContextualReflectionScope");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Numerics", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Numerics.Complex", "Complex");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Formatters", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.Formatter", "Formatter");
            feature.AddKnownType("System.Runtime.Serialization.FormatterConverter", "FormatterConverter");
            feature.AddKnownType("System.Runtime.Serialization.IFormatter", "IFormatter");
            feature.AddKnownType("System.Runtime.Serialization.ISerializationSurrogate", "ISerializationSurrogate");
            feature.AddKnownType("System.Runtime.Serialization.ISurrogateSelector", "ISurrogateSelector");
            feature.AddKnownType("System.Runtime.Serialization.ObjectIDGenerator", "ObjectIDGenerator");
            feature.AddKnownType("System.Runtime.Serialization.ObjectManager", "ObjectManager");
            feature.AddKnownType("System.Runtime.Serialization.SerializationBinder", "SerializationBinder");
            feature.AddKnownType("System.Runtime.Serialization.SerializationObjectManager", "SerializationObjectManager");
            feature.AddKnownType("System.Runtime.Serialization.SurrogateSelector", "SurrogateSelector");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle", "FormatterAssemblyStyle");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.FormatterTypeStyle", "FormatterTypeStyle");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.IFieldInfo", "IFieldInfo");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.TypeFilterLevel", "TypeFilterLevel");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.Binary.BinaryFormatter", "BinaryFormatter");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DateTimeFormat", "DateTimeFormat");
            feature.AddKnownType("System.Runtime.Serialization.EmitTypeInformation", "EmitTypeInformation");
            feature.AddKnownType("System.Runtime.Serialization.Json.DataContractJsonSerializer", "DataContractJsonSerializer");
            feature.AddKnownType("System.Runtime.Serialization.Json.DataContractJsonSerializerSettings", "DataContractJsonSerializerSettings");
            feature.AddKnownType("System.Runtime.Serialization.Json.IXmlJsonReaderInitializer", "IXmlJsonReaderInitializer");
            feature.AddKnownType("System.Runtime.Serialization.Json.IXmlJsonWriterInitializer", "IXmlJsonWriterInitializer");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.CollectionDataContractAttribute", "CollectionDataContractAttribute");
            feature.AddKnownType("System.Runtime.Serialization.ContractNamespaceAttribute", "ContractNamespaceAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DataContractAttribute", "DataContractAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DataMemberAttribute", "DataMemberAttribute");
            feature.AddKnownType("System.Runtime.Serialization.EnumMemberAttribute", "EnumMemberAttribute");
            feature.AddKnownType("System.Runtime.Serialization.IgnoreDataMemberAttribute", "IgnoreDataMemberAttribute");
            feature.AddKnownType("System.Runtime.Serialization.InvalidDataContractException", "InvalidDataContractException");
            feature.AddKnownType("System.Runtime.Serialization.ISerializationSurrogateProvider", "ISerializationSurrogateProvider");
            feature.AddKnownType("System.Runtime.Serialization.KnownTypeAttribute", "KnownTypeAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Xml", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DataContractResolver", "DataContractResolver");
            feature.AddKnownType("System.Runtime.Serialization.DataContractSerializer", "DataContractSerializer");
            feature.AddKnownType("System.Runtime.Serialization.DataContractSerializerSettings", "DataContractSerializerSettings");
            feature.AddKnownType("System.Runtime.Serialization.ExportOptions", "ExportOptions");
            feature.AddKnownType("System.Runtime.Serialization.ExtensionDataObject", "ExtensionDataObject");
            feature.AddKnownType("System.Runtime.Serialization.IExtensibleDataObject", "IExtensibleDataObject");
            feature.AddKnownType("System.Runtime.Serialization.XmlObjectSerializer", "XmlObjectSerializer");
            feature.AddKnownType("System.Runtime.Serialization.XsdDataContractExporter", "XsdDataContractExporter");
            feature.AddKnownType("System.Xml.IFragmentCapableXmlDictionaryWriter", "IFragmentCapableXmlDictionaryWriter");
            feature.AddKnownType("System.Xml.IStreamProvider", "IStreamProvider");
            feature.AddKnownType("System.Xml.IXmlBinaryReaderInitializer", "IXmlBinaryReaderInitializer");
            feature.AddKnownType("System.Xml.IXmlBinaryWriterInitializer", "IXmlBinaryWriterInitializer");
            feature.AddKnownType("System.Xml.IXmlDictionary", "IXmlDictionary");
            feature.AddKnownType("System.Xml.IXmlTextReaderInitializer", "IXmlTextReaderInitializer");
            feature.AddKnownType("System.Xml.IXmlTextWriterInitializer", "IXmlTextWriterInitializer");
            feature.AddKnownType("System.Xml.UniqueId", "UniqueId");
            feature.AddKnownType("System.Xml.XmlBinaryReaderSession", "XmlBinaryReaderSession");
            feature.AddKnownType("System.Xml.XmlBinaryWriterSession", "XmlBinaryWriterSession");
            feature.AddKnownType("System.Xml.XmlDictionary", "XmlDictionary");
            feature.AddKnownType("System.Xml.XmlDictionaryReader", "XmlDictionaryReader");
            feature.AddKnownType("System.Xml.XmlDictionaryReaderQuotas", "XmlDictionaryReaderQuotas");
            feature.AddKnownType("System.Xml.XmlDictionaryReaderQuotaTypes", "XmlDictionaryReaderQuotaTypes");
            feature.AddKnownType("System.Xml.XmlDictionaryString", "XmlDictionaryString");
            feature.AddKnownType("System.Xml.XmlDictionaryWriter", "XmlDictionaryWriter");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Claims", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Claims.Claim", "Claim");
            feature.AddKnownType("System.Security.Claims.ClaimsIdentity", "ClaimsIdentity");
            feature.AddKnownType("System.Security.Claims.ClaimsPrincipal", "ClaimsPrincipal");
            feature.AddKnownType("System.Security.Principal.GenericIdentity", "GenericIdentity");
            feature.AddKnownType("System.Security.Principal.GenericPrincipal", "GenericPrincipal");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Algorithms", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.Aes", "Aes");
            feature.AddKnownType("System.Security.Cryptography.AesCcm", "AesCcm");
            feature.AddKnownType("System.Security.Cryptography.AesGcm", "AesGcm");
            feature.AddKnownType("System.Security.Cryptography.AesManaged", "AesManaged");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricKeyExchangeDeformatter", "AsymmetricKeyExchangeDeformatter");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricKeyExchangeFormatter", "AsymmetricKeyExchangeFormatter");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricSignatureDeformatter", "AsymmetricSignatureDeformatter");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricSignatureFormatter", "AsymmetricSignatureFormatter");
            feature.AddKnownType("System.Security.Cryptography.CryptoConfig", "CryptoConfig");
            feature.AddKnownType("System.Security.Cryptography.DeriveBytes", "DeriveBytes");
            feature.AddKnownType("System.Security.Cryptography.DES", "DES");
            feature.AddKnownType("System.Security.Cryptography.DSA", "DSA");
            feature.AddKnownType("System.Security.Cryptography.DSAParameters", "DSAParameters");
            feature.AddKnownType("System.Security.Cryptography.DSASignatureDeformatter", "DSASignatureDeformatter");
            feature.AddKnownType("System.Security.Cryptography.DSASignatureFormat", "DSASignatureFormat");
            feature.AddKnownType("System.Security.Cryptography.DSASignatureFormatter", "DSASignatureFormatter");
            feature.AddKnownType("System.Security.Cryptography.ECCurve", "ECCurve");
            feature.AddKnownType("System.Security.Cryptography.ECCurve+ECCurveType", "ECCurve.ECCurveType");
            feature.AddKnownType("System.Security.Cryptography.ECDiffieHellman", "ECDiffieHellman");
            feature.AddKnownType("System.Security.Cryptography.ECDiffieHellmanPublicKey", "ECDiffieHellmanPublicKey");
            feature.AddKnownType("System.Security.Cryptography.ECDsa", "ECDsa");
            feature.AddKnownType("System.Security.Cryptography.ECParameters", "ECParameters");
            feature.AddKnownType("System.Security.Cryptography.ECPoint", "ECPoint");
            feature.AddKnownType("System.Security.Cryptography.HMACMD5", "HMACMD5");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA1", "HMACSHA1");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA256", "HMACSHA256");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA384", "HMACSHA384");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA512", "HMACSHA512");
            feature.AddKnownType("System.Security.Cryptography.IncrementalHash", "IncrementalHash");
            feature.AddKnownType("System.Security.Cryptography.MaskGenerationMethod", "MaskGenerationMethod");
            feature.AddKnownType("System.Security.Cryptography.MD5", "MD5");
            feature.AddKnownType("System.Security.Cryptography.PKCS1MaskGenerationMethod", "PKCS1MaskGenerationMethod");
            feature.AddKnownType("System.Security.Cryptography.RandomNumberGenerator", "RandomNumberGenerator");
            feature.AddKnownType("System.Security.Cryptography.RC2", "RC2");
            feature.AddKnownType("System.Security.Cryptography.Rfc2898DeriveBytes", "Rfc2898DeriveBytes");
            feature.AddKnownType("System.Security.Cryptography.Rijndael", "Rijndael");
            feature.AddKnownType("System.Security.Cryptography.RijndaelManaged", "RijndaelManaged");
            feature.AddKnownType("System.Security.Cryptography.RSA", "RSA");
            feature.AddKnownType("System.Security.Cryptography.RSAEncryptionPadding", "RSAEncryptionPadding");
            feature.AddKnownType("System.Security.Cryptography.RSAEncryptionPaddingMode", "RSAEncryptionPaddingMode");
            feature.AddKnownType("System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter", "RSAOAEPKeyExchangeDeformatter");
            feature.AddKnownType("System.Security.Cryptography.RSAOAEPKeyExchangeFormatter", "RSAOAEPKeyExchangeFormatter");
            feature.AddKnownType("System.Security.Cryptography.RSAParameters", "RSAParameters");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter", "RSAPKCS1KeyExchangeDeformatter");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter", "RSAPKCS1KeyExchangeFormatter");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1SignatureDeformatter", "RSAPKCS1SignatureDeformatter");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1SignatureFormatter", "RSAPKCS1SignatureFormatter");
            feature.AddKnownType("System.Security.Cryptography.RSASignaturePadding", "RSASignaturePadding");
            feature.AddKnownType("System.Security.Cryptography.RSASignaturePaddingMode", "RSASignaturePaddingMode");
            feature.AddKnownType("System.Security.Cryptography.SHA1", "SHA1");
            feature.AddKnownType("System.Security.Cryptography.SHA1Managed", "SHA1Managed");
            feature.AddKnownType("System.Security.Cryptography.SHA256", "SHA256");
            feature.AddKnownType("System.Security.Cryptography.SHA256Managed", "SHA256Managed");
            feature.AddKnownType("System.Security.Cryptography.SHA384", "SHA384");
            feature.AddKnownType("System.Security.Cryptography.SHA384Managed", "SHA384Managed");
            feature.AddKnownType("System.Security.Cryptography.SHA512", "SHA512");
            feature.AddKnownType("System.Security.Cryptography.SHA512Managed", "SHA512Managed");
            feature.AddKnownType("System.Security.Cryptography.SignatureDescription", "SignatureDescription");
            feature.AddKnownType("System.Security.Cryptography.TripleDES", "TripleDES");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Csp", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.AesCryptoServiceProvider", "AesCryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.CspKeyContainerInfo", "CspKeyContainerInfo");
            feature.AddKnownType("System.Security.Cryptography.CspParameters", "CspParameters");
            feature.AddKnownType("System.Security.Cryptography.CspProviderFlags", "CspProviderFlags");
            feature.AddKnownType("System.Security.Cryptography.DESCryptoServiceProvider", "DESCryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.DSACryptoServiceProvider", "DSACryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.ICspAsymmetricAlgorithm", "ICspAsymmetricAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.KeyNumber", "KeyNumber");
            feature.AddKnownType("System.Security.Cryptography.MD5CryptoServiceProvider", "MD5CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.PasswordDeriveBytes", "PasswordDeriveBytes");
            feature.AddKnownType("System.Security.Cryptography.RC2CryptoServiceProvider", "RC2CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.RNGCryptoServiceProvider", "RNGCryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.RSACryptoServiceProvider", "RSACryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA1CryptoServiceProvider", "SHA1CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA256CryptoServiceProvider", "SHA256CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA384CryptoServiceProvider", "SHA384CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA512CryptoServiceProvider", "SHA512CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.TripleDESCryptoServiceProvider", "TripleDESCryptoServiceProvider");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Encoding", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.AsnEncodedData", "AsnEncodedData");
            feature.AddKnownType("System.Security.Cryptography.AsnEncodedDataCollection", "AsnEncodedDataCollection");
            feature.AddKnownType("System.Security.Cryptography.AsnEncodedDataEnumerator", "AsnEncodedDataEnumerator");
            feature.AddKnownType("System.Security.Cryptography.FromBase64Transform", "FromBase64Transform");
            feature.AddKnownType("System.Security.Cryptography.FromBase64TransformMode", "FromBase64TransformMode");
            feature.AddKnownType("System.Security.Cryptography.Oid", "Oid");
            feature.AddKnownType("System.Security.Cryptography.OidCollection", "OidCollection");
            feature.AddKnownType("System.Security.Cryptography.OidEnumerator", "OidEnumerator");
            feature.AddKnownType("System.Security.Cryptography.OidGroup", "OidGroup");
            feature.AddKnownType("System.Security.Cryptography.PemFields", "PemFields");
            feature.AddKnownType("System.Security.Cryptography.ToBase64Transform", "ToBase64Transform");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricAlgorithm", "AsymmetricAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.CipherMode", "CipherMode");
            feature.AddKnownType("System.Security.Cryptography.CryptographicUnexpectedOperationException", "CryptographicUnexpectedOperationException");
            feature.AddKnownType("System.Security.Cryptography.CryptoStream", "CryptoStream");
            feature.AddKnownType("System.Security.Cryptography.CryptoStreamMode", "CryptoStreamMode");
            feature.AddKnownType("System.Security.Cryptography.HashAlgorithm", "HashAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.HashAlgorithmName", "HashAlgorithmName");
            feature.AddKnownType("System.Security.Cryptography.HMAC", "HMAC");
            feature.AddKnownType("System.Security.Cryptography.ICryptoTransform", "ICryptoTransform");
            feature.AddKnownType("System.Security.Cryptography.KeyedHashAlgorithm", "KeyedHashAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.KeySizes", "KeySizes");
            feature.AddKnownType("System.Security.Cryptography.PaddingMode", "PaddingMode");
            feature.AddKnownType("System.Security.Cryptography.PbeEncryptionAlgorithm", "PbeEncryptionAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.PbeParameters", "PbeParameters");
            feature.AddKnownType("System.Security.Cryptography.SymmetricAlgorithm", "SymmetricAlgorithm");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.X509Certificates", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeX509ChainHandle,System.Security.Cryptography.X509Certificates", "Microsoft.Win32.SafeHandles.SafeX509ChainHandle");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.CertificateRequest", "CertificateRequest");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.OpenFlags", "OpenFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.PublicKey", "PublicKey");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.StoreLocation", "StoreLocation");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.StoreName", "StoreName");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder", "SubjectAlternativeNameBuilder");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X500DistinguishedName", "X500DistinguishedName");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags", "X500DistinguishedNameFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension", "X509BasicConstraintsExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate", "X509Certificate");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate2", "X509Certificate2");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate2Collection", "X509Certificate2Collection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator", "X509Certificate2Enumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509CertificateCollection", "X509CertificateCollection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator", "X509CertificateCollection.X509CertificateEnumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Chain", "X509Chain");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainElement", "X509ChainElement");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainElementCollection", "X509ChainElementCollection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator", "X509ChainElementEnumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainPolicy", "X509ChainPolicy");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainStatus", "X509ChainStatus");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags", "X509ChainStatusFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainTrustMode", "X509ChainTrustMode");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ContentType", "X509ContentType");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension", "X509EnhancedKeyUsageExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Extension", "X509Extension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ExtensionCollection", "X509ExtensionCollection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator", "X509ExtensionEnumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509FindType", "X509FindType");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509IncludeOption", "X509IncludeOption");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509KeyStorageFlags", "X509KeyStorageFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509KeyUsageExtension", "X509KeyUsageExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509KeyUsageFlags", "X509KeyUsageFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509NameType", "X509NameType");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509RevocationFlag", "X509RevocationFlag");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509RevocationMode", "X509RevocationMode");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509SignatureGenerator", "X509SignatureGenerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Store", "X509Store");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension", "X509SubjectKeyIdentifierExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm", "X509SubjectKeyIdentifierHashAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509VerificationFlags", "X509VerificationFlags");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Encoding.CodePages", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.CodePagesEncodingProvider", "CodePagesEncodingProvider");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Encoding.Extensions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.ASCIIEncoding", "ASCIIEncoding");
            feature.AddKnownType("System.Text.UnicodeEncoding", "UnicodeEncoding");
            feature.AddKnownType("System.Text.UTF32Encoding", "UTF32Encoding");
            feature.AddKnownType("System.Text.UTF7Encoding", "UTF7Encoding");
            feature.AddKnownType("System.Text.UTF8Encoding", "UTF8Encoding");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Encodings.Web", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.Encodings.Web.HtmlEncoder", "HtmlEncoder");
            feature.AddKnownType("System.Text.Encodings.Web.JavaScriptEncoder", "JavaScriptEncoder");
            feature.AddKnownType("System.Text.Encodings.Web.TextEncoder", "TextEncoder");
            feature.AddKnownType("System.Text.Encodings.Web.TextEncoderSettings", "TextEncoderSettings");
            feature.AddKnownType("System.Text.Encodings.Web.UrlEncoder", "UrlEncoder");
            feature.AddKnownType("System.Text.Unicode.UnicodeRange", "UnicodeRange");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.Json.JsonCommentHandling", "JsonCommentHandling");
            feature.AddKnownType("System.Text.Json.JsonDocument", "JsonDocument");
            feature.AddKnownType("System.Text.Json.JsonDocumentOptions", "JsonDocumentOptions");
            feature.AddKnownType("System.Text.Json.JsonElement", "JsonElement");
            feature.AddKnownType("System.Text.Json.JsonElement+ArrayEnumerator", "JsonElement.ArrayEnumerator");
            feature.AddKnownType("System.Text.Json.JsonElement+ObjectEnumerator", "JsonElement.ObjectEnumerator");
            feature.AddKnownType("System.Text.Json.JsonEncodedText", "JsonEncodedText");
            feature.AddKnownType("System.Text.Json.JsonException", "JsonException");
            feature.AddKnownType("System.Text.Json.JsonNamingPolicy", "JsonNamingPolicy");
            feature.AddKnownType("System.Text.Json.JsonProperty", "JsonProperty");
            feature.AddKnownType("System.Text.Json.JsonReaderOptions", "JsonReaderOptions");
            feature.AddKnownType("System.Text.Json.JsonReaderState", "JsonReaderState");
            feature.AddKnownType("System.Text.Json.JsonSerializerDefaults", "JsonSerializerDefaults");
            feature.AddKnownType("System.Text.Json.JsonSerializerOptions", "JsonSerializerOptions");
            feature.AddKnownType("System.Text.Json.JsonTokenType", "JsonTokenType");
            feature.AddKnownType("System.Text.Json.JsonValueKind", "JsonValueKind");
            feature.AddKnownType("System.Text.Json.JsonWriterOptions", "JsonWriterOptions");
            feature.AddKnownType("System.Text.Json.Utf8JsonReader", "Utf8JsonReader");
            feature.AddKnownType("System.Text.Json.Utf8JsonWriter", "Utf8JsonWriter");
            feature.AddKnownType("System.Text.Json.Serialization.JsonAttribute", "JsonAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConstructorAttribute", "JsonConstructorAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverter", "JsonConverter");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverter`1", "JsonConverter`1'1");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverterAttribute", "JsonConverterAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverterFactory", "JsonConverterFactory");
            feature.AddKnownType("System.Text.Json.Serialization.JsonExtensionDataAttribute", "JsonExtensionDataAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonIgnoreAttribute", "JsonIgnoreAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonIgnoreCondition", "JsonIgnoreCondition");
            feature.AddKnownType("System.Text.Json.Serialization.JsonIncludeAttribute", "JsonIncludeAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonNumberHandling", "JsonNumberHandling");
            feature.AddKnownType("System.Text.Json.Serialization.JsonNumberHandlingAttribute", "JsonNumberHandlingAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonPropertyNameAttribute", "JsonPropertyNameAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonStringEnumConverter", "JsonStringEnumConverter");
            feature.AddKnownType("System.Text.Json.Serialization.ReferenceHandler", "ReferenceHandler");
            feature.AddKnownType("System.Text.Json.Serialization.ReferenceHandler`1", "ReferenceHandler`1'1");
            feature.AddKnownType("System.Text.Json.Serialization.ReferenceResolver", "ReferenceResolver");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.RegularExpressions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.RegularExpressions.Capture", "Capture");
            feature.AddKnownType("System.Text.RegularExpressions.CaptureCollection", "CaptureCollection");
            feature.AddKnownType("System.Text.RegularExpressions.Group", "Group");
            feature.AddKnownType("System.Text.RegularExpressions.GroupCollection", "GroupCollection");
            feature.AddKnownType("System.Text.RegularExpressions.Match", "Match");
            feature.AddKnownType("System.Text.RegularExpressions.MatchCollection", "MatchCollection");
            feature.AddKnownType("System.Text.RegularExpressions.Regex", "Regex");
            feature.AddKnownType("System.Text.RegularExpressions.RegexCompilationInfo", "RegexCompilationInfo");
            feature.AddKnownType("System.Text.RegularExpressions.RegexMatchTimeoutException", "RegexMatchTimeoutException");
            feature.AddKnownType("System.Text.RegularExpressions.RegexOptions", "RegexOptions");
            feature.AddKnownType("System.Text.RegularExpressions.RegexParseError", "RegexParseError");
            feature.AddKnownType("System.Text.RegularExpressions.RegexParseException", "RegexParseException");
            feature.AddKnownType("System.Text.RegularExpressions.RegexRunner", "RegexRunner");
            feature.AddKnownType("System.Text.RegularExpressions.RegexRunnerFactory", "RegexRunnerFactory");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Channels", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.Channels.BoundedChannelFullMode", "BoundedChannelFullMode");
            feature.AddKnownType("System.Threading.Channels.BoundedChannelOptions", "BoundedChannelOptions");
            feature.AddKnownType("System.Threading.Channels.Channel`1", "Channel`1'1");
            feature.AddKnownType("System.Threading.Channels.Channel`2", "Channel`2'2");
            feature.AddKnownType("System.Threading.Channels.ChannelClosedException", "ChannelClosedException");
            feature.AddKnownType("System.Threading.Channels.ChannelOptions", "ChannelOptions");
            feature.AddKnownType("System.Threading.Channels.ChannelReader`1", "ChannelReader`1'1");
            feature.AddKnownType("System.Threading.Channels.ChannelWriter`1", "ChannelWriter`1'1");
            feature.AddKnownType("System.Threading.Channels.UnboundedChannelOptions", "UnboundedChannelOptions");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.AbandonedMutexException", "AbandonedMutexException");
            feature.AddKnownType("System.Threading.AsyncFlowControl", "AsyncFlowControl");
            feature.AddKnownType("System.Threading.AsyncLocalValueChangedArgs`1", "AsyncLocalValueChangedArgs`1'1");
            feature.AddKnownType("System.Threading.AsyncLocal`1", "AsyncLocal`1'1");
            feature.AddKnownType("System.Threading.AutoResetEvent", "AutoResetEvent");
            feature.AddKnownType("System.Threading.Barrier", "Barrier");
            feature.AddKnownType("System.Threading.BarrierPostPhaseException", "BarrierPostPhaseException");
            feature.AddKnownType("System.Threading.CountdownEvent", "CountdownEvent");
            feature.AddKnownType("System.Threading.EventResetMode", "EventResetMode");
            feature.AddKnownType("System.Threading.EventWaitHandle", "EventWaitHandle");
            feature.AddKnownType("System.Threading.ExecutionContext", "ExecutionContext");
            feature.AddKnownType("System.Threading.HostExecutionContext", "HostExecutionContext");
            feature.AddKnownType("System.Threading.HostExecutionContextManager", "HostExecutionContextManager");
            feature.AddKnownType("System.Threading.LockCookie", "LockCookie");
            feature.AddKnownType("System.Threading.LockRecursionException", "LockRecursionException");
            feature.AddKnownType("System.Threading.LockRecursionPolicy", "LockRecursionPolicy");
            feature.AddKnownType("System.Threading.ManualResetEvent", "ManualResetEvent");
            feature.AddKnownType("System.Threading.ManualResetEventSlim", "ManualResetEventSlim");
            feature.AddKnownType("System.Threading.Mutex", "Mutex");
            feature.AddKnownType("System.Threading.ReaderWriterLock", "ReaderWriterLock");
            feature.AddKnownType("System.Threading.ReaderWriterLockSlim", "ReaderWriterLockSlim");
            feature.AddKnownType("System.Threading.Semaphore", "Semaphore");
            feature.AddKnownType("System.Threading.SemaphoreFullException", "SemaphoreFullException");
            feature.AddKnownType("System.Threading.SemaphoreSlim", "SemaphoreSlim");
            feature.AddKnownType("System.Threading.SpinLock", "SpinLock");
            feature.AddKnownType("System.Threading.SpinWait", "SpinWait");
            feature.AddKnownType("System.Threading.SynchronizationContext", "SynchronizationContext");
            feature.AddKnownType("System.Threading.SynchronizationLockException", "SynchronizationLockException");
            feature.AddKnownType("System.Threading.ThreadLocal`1", "ThreadLocal`1'1");
            feature.AddKnownType("System.Threading.WaitHandleCannotBeOpenedException", "WaitHandleCannotBeOpenedException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Overlapped", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.NativeOverlapped", "NativeOverlapped");
            feature.AddKnownType("System.Threading.Overlapped", "Overlapped");
            feature.AddKnownType("System.Threading.PreAllocatedOverlapped", "PreAllocatedOverlapped");
            feature.AddKnownType("System.Threading.ThreadPoolBoundHandle", "ThreadPoolBoundHandle");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Tasks.Dataflow", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ActionBlock`1", "ActionBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BatchBlock`1", "BatchBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BatchedJoinBlock`2", "BatchedJoinBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BatchedJoinBlock`3", "BatchedJoinBlock`3'3");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BroadcastBlock`1", "BroadcastBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BufferBlock`1", "BufferBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowBlockOptions", "DataflowBlockOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowLinkOptions", "DataflowLinkOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowMessageHeader", "DataflowMessageHeader");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowMessageStatus", "DataflowMessageStatus");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions", "ExecutionDataflowBlockOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions", "GroupingDataflowBlockOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.IDataflowBlock", "IDataflowBlock");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.IPropagatorBlock`2", "IPropagatorBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1", "IReceivableSourceBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ISourceBlock`1", "ISourceBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ITargetBlock`1", "ITargetBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.JoinBlock`2", "JoinBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.JoinBlock`3", "JoinBlock`3'3");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.TransformBlock`2", "TransformBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.TransformManyBlock`2", "TransformManyBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.WriteOnceBlock`1", "WriteOnceBlock`1'1");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Tasks.Parallel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.Tasks.ParallelLoopResult", "ParallelLoopResult");
            feature.AddKnownType("System.Threading.Tasks.ParallelLoopState", "ParallelLoopState");
            feature.AddKnownType("System.Threading.Tasks.ParallelOptions", "ParallelOptions");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Thread", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.LocalDataStoreSlot", "LocalDataStoreSlot");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.ApartmentState", "ApartmentState");
            feature.AddKnownType("System.Threading.CompressedStack", "CompressedStack");
            feature.AddKnownType("System.Threading.Thread", "Thread");
            feature.AddKnownType("System.Threading.ThreadAbortException", "ThreadAbortException");
            feature.AddKnownType("System.Threading.ThreadExceptionEventArgs", "ThreadExceptionEventArgs");
            feature.AddKnownType("System.Threading.ThreadInterruptedException", "ThreadInterruptedException");
            feature.AddKnownType("System.Threading.ThreadPriority", "ThreadPriority");
            feature.AddKnownType("System.Threading.ThreadStartException", "ThreadStartException");
            feature.AddKnownType("System.Threading.ThreadState", "ThreadState");
            feature.AddKnownType("System.Threading.ThreadStateException", "ThreadStateException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.ThreadPool", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.IThreadPoolWorkItem", "IThreadPoolWorkItem");
            feature.AddKnownType("System.Threading.RegisteredWaitHandle", "RegisteredWaitHandle");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Transactions.Local", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Transactions.CommittableTransaction", "CommittableTransaction");
            feature.AddKnownType("System.Transactions.DependentCloneOption", "DependentCloneOption");
            feature.AddKnownType("System.Transactions.DependentTransaction", "DependentTransaction");
            feature.AddKnownType("System.Transactions.Enlistment", "Enlistment");
            feature.AddKnownType("System.Transactions.EnlistmentOptions", "EnlistmentOptions");
            feature.AddKnownType("System.Transactions.EnterpriseServicesInteropOption", "EnterpriseServicesInteropOption");
            feature.AddKnownType("System.Transactions.IDtcTransaction", "IDtcTransaction");
            feature.AddKnownType("System.Transactions.IEnlistmentNotification", "IEnlistmentNotification");
            feature.AddKnownType("System.Transactions.IPromotableSinglePhaseNotification", "IPromotableSinglePhaseNotification");
            feature.AddKnownType("System.Transactions.ISimpleTransactionSuperior", "ISimpleTransactionSuperior");
            feature.AddKnownType("System.Transactions.ISinglePhaseNotification", "ISinglePhaseNotification");
            feature.AddKnownType("System.Transactions.IsolationLevel", "IsolationLevel");
            feature.AddKnownType("System.Transactions.ITransactionPromoter", "ITransactionPromoter");
            feature.AddKnownType("System.Transactions.PreparingEnlistment", "PreparingEnlistment");
            feature.AddKnownType("System.Transactions.SinglePhaseEnlistment", "SinglePhaseEnlistment");
            feature.AddKnownType("System.Transactions.SubordinateTransaction", "SubordinateTransaction");
            feature.AddKnownType("System.Transactions.Transaction", "Transaction");
            feature.AddKnownType("System.Transactions.TransactionAbortedException", "TransactionAbortedException");
            feature.AddKnownType("System.Transactions.TransactionEventArgs", "TransactionEventArgs");
            feature.AddKnownType("System.Transactions.TransactionException", "TransactionException");
            feature.AddKnownType("System.Transactions.TransactionInDoubtException", "TransactionInDoubtException");
            feature.AddKnownType("System.Transactions.TransactionInformation", "TransactionInformation");
            feature.AddKnownType("System.Transactions.TransactionManagerCommunicationException", "TransactionManagerCommunicationException");
            feature.AddKnownType("System.Transactions.TransactionOptions", "TransactionOptions");
            feature.AddKnownType("System.Transactions.TransactionPromotionException", "TransactionPromotionException");
            feature.AddKnownType("System.Transactions.TransactionScope", "TransactionScope");
            feature.AddKnownType("System.Transactions.TransactionScopeAsyncFlowOption", "TransactionScopeAsyncFlowOption");
            feature.AddKnownType("System.Transactions.TransactionScopeOption", "TransactionScopeOption");
            feature.AddKnownType("System.Transactions.TransactionStatus", "TransactionStatus");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Web.HttpUtility", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Web.HttpUtility", "HttpUtility");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.ReaderWriter", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.ConformanceLevel", "ConformanceLevel");
            feature.AddKnownType("System.Xml.DtdProcessing", "DtdProcessing");
            feature.AddKnownType("System.Xml.EntityHandling", "EntityHandling");
            feature.AddKnownType("System.Xml.Formatting", "Formatting");
            feature.AddKnownType("System.Xml.IApplicationResourceStreamResolver", "IApplicationResourceStreamResolver");
            feature.AddKnownType("System.Xml.IHasXmlNode", "IHasXmlNode");
            feature.AddKnownType("System.Xml.IXmlLineInfo", "IXmlLineInfo");
            feature.AddKnownType("System.Xml.IXmlNamespaceResolver", "IXmlNamespaceResolver");
            feature.AddKnownType("System.Xml.NamespaceHandling", "NamespaceHandling");
            feature.AddKnownType("System.Xml.NameTable", "NameTable");
            feature.AddKnownType("System.Xml.NewLineHandling", "NewLineHandling");
            feature.AddKnownType("System.Xml.ReadState", "ReadState");
            feature.AddKnownType("System.Xml.ValidationType", "ValidationType");
            feature.AddKnownType("System.Xml.WhitespaceHandling", "WhitespaceHandling");
            feature.AddKnownType("System.Xml.WriteState", "WriteState");
            feature.AddKnownType("System.Xml.XmlAttribute", "XmlAttribute");
            feature.AddKnownType("System.Xml.XmlAttributeCollection", "XmlAttributeCollection");
            feature.AddKnownType("System.Xml.XmlCDataSection", "XmlCDataSection");
            feature.AddKnownType("System.Xml.XmlCharacterData", "XmlCharacterData");
            feature.AddKnownType("System.Xml.XmlComment", "XmlComment");
            feature.AddKnownType("System.Xml.XmlConvert", "XmlConvert");
            feature.AddKnownType("System.Xml.XmlDateTimeSerializationMode", "XmlDateTimeSerializationMode");
            feature.AddKnownType("System.Xml.XmlDeclaration", "XmlDeclaration");
            feature.AddKnownType("System.Xml.XmlDocument", "XmlDocument");
            feature.AddKnownType("System.Xml.XmlDocumentFragment", "XmlDocumentFragment");
            feature.AddKnownType("System.Xml.XmlDocumentType", "XmlDocumentType");
            feature.AddKnownType("System.Xml.XmlElement", "XmlElement");
            feature.AddKnownType("System.Xml.XmlEntity", "XmlEntity");
            feature.AddKnownType("System.Xml.XmlEntityReference", "XmlEntityReference");
            feature.AddKnownType("System.Xml.XmlException", "XmlException");
            feature.AddKnownType("System.Xml.XmlImplementation", "XmlImplementation");
            feature.AddKnownType("System.Xml.XmlLinkedNode", "XmlLinkedNode");
            feature.AddKnownType("System.Xml.XmlNamedNodeMap", "XmlNamedNodeMap");
            feature.AddKnownType("System.Xml.XmlNamespaceManager", "XmlNamespaceManager");
            feature.AddKnownType("System.Xml.XmlNamespaceScope", "XmlNamespaceScope");
            feature.AddKnownType("System.Xml.XmlNameTable", "XmlNameTable");
            feature.AddKnownType("System.Xml.XmlNode", "XmlNode");
            feature.AddKnownType("System.Xml.XmlNodeChangedAction", "XmlNodeChangedAction");
            feature.AddKnownType("System.Xml.XmlNodeChangedEventArgs", "XmlNodeChangedEventArgs");
            feature.AddKnownType("System.Xml.XmlNodeList", "XmlNodeList");
            feature.AddKnownType("System.Xml.XmlNodeOrder", "XmlNodeOrder");
            feature.AddKnownType("System.Xml.XmlNodeReader", "XmlNodeReader");
            feature.AddKnownType("System.Xml.XmlNodeType", "XmlNodeType");
            feature.AddKnownType("System.Xml.XmlNotation", "XmlNotation");
            feature.AddKnownType("System.Xml.XmlOutputMethod", "XmlOutputMethod");
            feature.AddKnownType("System.Xml.XmlParserContext", "XmlParserContext");
            feature.AddKnownType("System.Xml.XmlProcessingInstruction", "XmlProcessingInstruction");
            feature.AddKnownType("System.Xml.XmlQualifiedName", "XmlQualifiedName");
            feature.AddKnownType("System.Xml.XmlReader", "XmlReader");
            feature.AddKnownType("System.Xml.XmlReaderSettings", "XmlReaderSettings");
            feature.AddKnownType("System.Xml.XmlResolver", "XmlResolver");
            feature.AddKnownType("System.Xml.XmlSecureResolver", "XmlSecureResolver");
            feature.AddKnownType("System.Xml.XmlSignificantWhitespace", "XmlSignificantWhitespace");
            feature.AddKnownType("System.Xml.XmlSpace", "XmlSpace");
            feature.AddKnownType("System.Xml.XmlText", "XmlText");
            feature.AddKnownType("System.Xml.XmlTextReader", "XmlTextReader");
            feature.AddKnownType("System.Xml.XmlTextWriter", "XmlTextWriter");
            feature.AddKnownType("System.Xml.XmlTokenizedType", "XmlTokenizedType");
            feature.AddKnownType("System.Xml.XmlUrlResolver", "XmlUrlResolver");
            feature.AddKnownType("System.Xml.XmlValidatingReader", "XmlValidatingReader");
            feature.AddKnownType("System.Xml.XmlWhitespace", "XmlWhitespace");
            feature.AddKnownType("System.Xml.XmlWriter", "XmlWriter");
            feature.AddKnownType("System.Xml.XmlWriterSettings", "XmlWriterSettings");
            feature.AddKnownType("System.Xml.Resolvers.XmlKnownDtds", "XmlKnownDtds");
            feature.AddKnownType("System.Xml.Resolvers.XmlPreloadedResolver", "XmlPreloadedResolver");
            feature.AddKnownType("System.Xml.Schema.IXmlSchemaInfo", "IXmlSchemaInfo");
            feature.AddKnownType("System.Xml.Schema.ValidationEventArgs", "ValidationEventArgs");
            feature.AddKnownType("System.Xml.Schema.XmlAtomicValue", "XmlAtomicValue");
            feature.AddKnownType("System.Xml.Schema.XmlSchema", "XmlSchema");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAll", "XmlSchemaAll");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAnnotated", "XmlSchemaAnnotated");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAnnotation", "XmlSchemaAnnotation");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAny", "XmlSchemaAny");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAnyAttribute", "XmlSchemaAnyAttribute");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAppInfo", "XmlSchemaAppInfo");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAttribute", "XmlSchemaAttribute");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAttributeGroup", "XmlSchemaAttributeGroup");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAttributeGroupRef", "XmlSchemaAttributeGroupRef");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaChoice", "XmlSchemaChoice");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaCollection", "XmlSchemaCollection");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaCollectionEnumerator", "XmlSchemaCollectionEnumerator");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaCompilationSettings", "XmlSchemaCompilationSettings");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexContent", "XmlSchemaComplexContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexContentExtension", "XmlSchemaComplexContentExtension");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexContentRestriction", "XmlSchemaComplexContentRestriction");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexType", "XmlSchemaComplexType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContent", "XmlSchemaContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContentModel", "XmlSchemaContentModel");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContentProcessing", "XmlSchemaContentProcessing");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContentType", "XmlSchemaContentType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDatatype", "XmlSchemaDatatype");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDatatypeVariety", "XmlSchemaDatatypeVariety");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDerivationMethod", "XmlSchemaDerivationMethod");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDocumentation", "XmlSchemaDocumentation");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaElement", "XmlSchemaElement");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaEnumerationFacet", "XmlSchemaEnumerationFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaException", "XmlSchemaException");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaExternal", "XmlSchemaExternal");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaFacet", "XmlSchemaFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaForm", "XmlSchemaForm");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaFractionDigitsFacet", "XmlSchemaFractionDigitsFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaGroup", "XmlSchemaGroup");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaGroupBase", "XmlSchemaGroupBase");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaGroupRef", "XmlSchemaGroupRef");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaIdentityConstraint", "XmlSchemaIdentityConstraint");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaImport", "XmlSchemaImport");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInclude", "XmlSchemaInclude");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInference", "XmlSchemaInference");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInference+InferenceOption", "XmlSchemaInference.InferenceOption");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInferenceException", "XmlSchemaInferenceException");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInfo", "XmlSchemaInfo");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaKey", "XmlSchemaKey");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaKeyref", "XmlSchemaKeyref");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaLengthFacet", "XmlSchemaLengthFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMaxExclusiveFacet", "XmlSchemaMaxExclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMaxInclusiveFacet", "XmlSchemaMaxInclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMaxLengthFacet", "XmlSchemaMaxLengthFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMinExclusiveFacet", "XmlSchemaMinExclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMinInclusiveFacet", "XmlSchemaMinInclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMinLengthFacet", "XmlSchemaMinLengthFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaNotation", "XmlSchemaNotation");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaNumericFacet", "XmlSchemaNumericFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObject", "XmlSchemaObject");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObjectCollection", "XmlSchemaObjectCollection");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObjectEnumerator", "XmlSchemaObjectEnumerator");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObjectTable", "XmlSchemaObjectTable");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaParticle", "XmlSchemaParticle");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaPatternFacet", "XmlSchemaPatternFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaRedefine", "XmlSchemaRedefine");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSequence", "XmlSchemaSequence");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSet", "XmlSchemaSet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleContent", "XmlSchemaSimpleContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleContentExtension", "XmlSchemaSimpleContentExtension");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleContentRestriction", "XmlSchemaSimpleContentRestriction");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleType", "XmlSchemaSimpleType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeContent", "XmlSchemaSimpleTypeContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeList", "XmlSchemaSimpleTypeList");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeRestriction", "XmlSchemaSimpleTypeRestriction");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeUnion", "XmlSchemaSimpleTypeUnion");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaTotalDigitsFacet", "XmlSchemaTotalDigitsFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaType", "XmlSchemaType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaUnique", "XmlSchemaUnique");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaUse", "XmlSchemaUse");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidationException", "XmlSchemaValidationException");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidationFlags", "XmlSchemaValidationFlags");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidator", "XmlSchemaValidator");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidity", "XmlSchemaValidity");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaWhiteSpaceFacet", "XmlSchemaWhiteSpaceFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaXPath", "XmlSchemaXPath");
            feature.AddKnownType("System.Xml.Schema.XmlSeverityType", "XmlSeverityType");
            feature.AddKnownType("System.Xml.Schema.XmlTypeCode", "XmlTypeCode");
            feature.AddKnownType("System.Xml.Serialization.IXmlSerializable", "IXmlSerializable");
            feature.AddKnownType("System.Xml.Serialization.XmlAnyAttributeAttribute", "XmlAnyAttributeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlAnyElementAttribute", "XmlAnyElementAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributeAttribute", "XmlAttributeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlElementAttribute", "XmlElementAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlEnumAttribute", "XmlEnumAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlIgnoreAttribute", "XmlIgnoreAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlNamespaceDeclarationsAttribute", "XmlNamespaceDeclarationsAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlRootAttribute", "XmlRootAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaProviderAttribute", "XmlSchemaProviderAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerNamespaces", "XmlSerializerNamespaces");
            feature.AddKnownType("System.Xml.Serialization.XmlTextAttribute", "XmlTextAttribute");
            feature.AddKnownType("System.Xml.XPath.IXPathNavigable", "IXPathNavigable");
            feature.AddKnownType("System.Xml.XPath.XmlCaseOrder", "XmlCaseOrder");
            feature.AddKnownType("System.Xml.XPath.XmlDataType", "XmlDataType");
            feature.AddKnownType("System.Xml.XPath.XmlSortOrder", "XmlSortOrder");
            feature.AddKnownType("System.Xml.XPath.XPathExpression", "XPathExpression");
            feature.AddKnownType("System.Xml.XPath.XPathItem", "XPathItem");
            feature.AddKnownType("System.Xml.XPath.XPathNamespaceScope", "XPathNamespaceScope");
            feature.AddKnownType("System.Xml.XPath.XPathNavigator", "XPathNavigator");
            feature.AddKnownType("System.Xml.XPath.XPathNodeIterator", "XPathNodeIterator");
            feature.AddKnownType("System.Xml.XPath.XPathNodeType", "XPathNodeType");
            feature.AddKnownType("System.Xml.XPath.XPathResultType", "XPathResultType");
            feature.AddKnownType("System.Xml.Xsl.IXsltContextFunction", "IXsltContextFunction");
            feature.AddKnownType("System.Xml.Xsl.IXsltContextVariable", "IXsltContextVariable");
            feature.AddKnownType("System.Xml.Xsl.XslCompiledTransform", "XslCompiledTransform");
            feature.AddKnownType("System.Xml.Xsl.XsltArgumentList", "XsltArgumentList");
            feature.AddKnownType("System.Xml.Xsl.XsltCompileException", "XsltCompileException");
            feature.AddKnownType("System.Xml.Xsl.XsltContext", "XsltContext");
            feature.AddKnownType("System.Xml.Xsl.XsltException", "XsltException");
            feature.AddKnownType("System.Xml.Xsl.XsltMessageEncounteredEventArgs", "XsltMessageEncounteredEventArgs");
            feature.AddKnownType("System.Xml.Xsl.XslTransform", "XslTransform");
            feature.AddKnownType("System.Xml.Xsl.XsltSettings", "XsltSettings");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XDocument", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.Linq.LoadOptions", "LoadOptions");
            feature.AddKnownType("System.Xml.Linq.ReaderOptions", "ReaderOptions");
            feature.AddKnownType("System.Xml.Linq.SaveOptions", "SaveOptions");
            feature.AddKnownType("System.Xml.Linq.XAttribute", "XAttribute");
            feature.AddKnownType("System.Xml.Linq.XCData", "XCData");
            feature.AddKnownType("System.Xml.Linq.XComment", "XComment");
            feature.AddKnownType("System.Xml.Linq.XContainer", "XContainer");
            feature.AddKnownType("System.Xml.Linq.XDeclaration", "XDeclaration");
            feature.AddKnownType("System.Xml.Linq.XDocument", "XDocument");
            feature.AddKnownType("System.Xml.Linq.XDocumentType", "XDocumentType");
            feature.AddKnownType("System.Xml.Linq.XElement", "XElement");
            feature.AddKnownType("System.Xml.Linq.XName", "XName");
            feature.AddKnownType("System.Xml.Linq.XNamespace", "XNamespace");
            feature.AddKnownType("System.Xml.Linq.XNode", "XNode");
            feature.AddKnownType("System.Xml.Linq.XNodeDocumentOrderComparer", "XNodeDocumentOrderComparer");
            feature.AddKnownType("System.Xml.Linq.XNodeEqualityComparer", "XNodeEqualityComparer");
            feature.AddKnownType("System.Xml.Linq.XObject", "XObject");
            feature.AddKnownType("System.Xml.Linq.XObjectChange", "XObjectChange");
            feature.AddKnownType("System.Xml.Linq.XObjectChangeEventArgs", "XObjectChangeEventArgs");
            feature.AddKnownType("System.Xml.Linq.XProcessingInstruction", "XProcessingInstruction");
            feature.AddKnownType("System.Xml.Linq.XStreamingElement", "XStreamingElement");
            feature.AddKnownType("System.Xml.Linq.XText", "XText");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XmlSerializer", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.Serialization.CodeGenerationOptions", "CodeGenerationOptions");
            feature.AddKnownType("System.Xml.Serialization.CodeIdentifier", "CodeIdentifier");
            feature.AddKnownType("System.Xml.Serialization.CodeIdentifiers", "CodeIdentifiers");
            feature.AddKnownType("System.Xml.Serialization.ImportContext", "ImportContext");
            feature.AddKnownType("System.Xml.Serialization.IXmlTextParser", "IXmlTextParser");
            feature.AddKnownType("System.Xml.Serialization.SchemaImporter", "SchemaImporter");
            feature.AddKnownType("System.Xml.Serialization.SoapAttributeAttribute", "SoapAttributeAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapAttributeOverrides", "SoapAttributeOverrides");
            feature.AddKnownType("System.Xml.Serialization.SoapAttributes", "SoapAttributes");
            feature.AddKnownType("System.Xml.Serialization.SoapElementAttribute", "SoapElementAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapEnumAttribute", "SoapEnumAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapIgnoreAttribute", "SoapIgnoreAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapIncludeAttribute", "SoapIncludeAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapReflectionImporter", "SoapReflectionImporter");
            feature.AddKnownType("System.Xml.Serialization.SoapSchemaMember", "SoapSchemaMember");
            feature.AddKnownType("System.Xml.Serialization.SoapTypeAttribute", "SoapTypeAttribute");
            feature.AddKnownType("System.Xml.Serialization.UnreferencedObjectEventArgs", "UnreferencedObjectEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlAnyElementAttributes", "XmlAnyElementAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlArrayAttribute", "XmlArrayAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlArrayItemAttribute", "XmlArrayItemAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlArrayItemAttributes", "XmlArrayItemAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributeEventArgs", "XmlAttributeEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributeOverrides", "XmlAttributeOverrides");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributes", "XmlAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlChoiceIdentifierAttribute", "XmlChoiceIdentifierAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlDeserializationEvents", "XmlDeserializationEvents");
            feature.AddKnownType("System.Xml.Serialization.XmlElementAttributes", "XmlElementAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlElementEventArgs", "XmlElementEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlIncludeAttribute", "XmlIncludeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlMapping", "XmlMapping");
            feature.AddKnownType("System.Xml.Serialization.XmlMappingAccess", "XmlMappingAccess");
            feature.AddKnownType("System.Xml.Serialization.XmlMemberMapping", "XmlMemberMapping");
            feature.AddKnownType("System.Xml.Serialization.XmlMembersMapping", "XmlMembersMapping");
            feature.AddKnownType("System.Xml.Serialization.XmlNodeEventArgs", "XmlNodeEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlReflectionImporter", "XmlReflectionImporter");
            feature.AddKnownType("System.Xml.Serialization.XmlReflectionMember", "XmlReflectionMember");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaEnumerator", "XmlSchemaEnumerator");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaExporter", "XmlSchemaExporter");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaImporter", "XmlSchemaImporter");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemas", "XmlSchemas");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationGeneratedCode", "XmlSerializationGeneratedCode");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationReader", "XmlSerializationReader");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationReader+CollectionFixup", "CollectionFixup");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationReader+Fixup", "Fixup");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationWriter", "XmlSerializationWriter");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializer", "XmlSerializer");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerAssemblyAttribute", "XmlSerializerAssemblyAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerFactory", "XmlSerializerFactory");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerImplementation", "XmlSerializerImplementation");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerVersionAttribute", "XmlSerializerVersionAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlTypeAttribute", "XmlTypeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlTypeMapping", "XmlTypeMapping");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XPath", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.XPath.XPathDocument", "XPathDocument");
            feature.AddKnownType("System.Xml.XPath.XPathException", "XPathException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XPath.XDocument", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
